^{ try { if (action.equals("testSaveLocationExists")) { boolean b = DirectoryManager.testSaveLocationExists(); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("getFreeDiskSpace")) { long l = DirectoryManager.getFreeDiskSpace(false); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, l)); } else if (action.equals("testFileExists")) { boolean b = DirectoryManager.testFileExists(args.getString(0)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("testDirectoryExists")) { boolean b = DirectoryManager.testFileExists(args.getString(0)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("readAsText")) { String encoding = args.getString(1); int start = args.getInt(2); int end = args.getInt(3); this.readFileAs(args.getString(0), start, end, callbackContext, encoding, PluginResult.MESSAGE_TYPE_STRING); } else if (action.equals("readAsDataURL")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, -1); } else if (action.equals("readAsArrayBuffer")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, PluginResult.MESSAGE_TYPE_ARRAYBUFFER); } else if (action.equals("readAsBinaryString")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, PluginResult.MESSAGE_TYPE_BINARYSTRING); } else if (action.equals("write")) { long fileSize = this.write(args.getString(0), args.getString(1), args.getInt(2)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, fileSize)); } else if (action.equals("truncate")) { long fileSize = this.truncateFile(args.getString(0), args.getLong(1)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, fileSize)); } else if (action.equals("requestFileSystem")) { long size = args.optLong(1); if (size != 0 && size > (DirectoryManager.getFreeDiskSpace(true) * 1024)) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, FileUtils.QUOTA_EXCEEDED_ERR)); } else { JSONObject obj = requestFileSystem(args.getInt(0)); callbackContext.success(obj); } } else if (action.equals("resolveLocalFileSystemURI")) { JSONObject obj = resolveLocalFileSystemURI(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getMetadata")) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, getMetadata(args.getString(0)))); } else if (action.equals("getFileMetadata")) { JSONObject obj = getFileMetadata(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getParent")) { JSONObject obj = getParent(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getDirectory")) { JSONObject obj = getFile(args.getString(0), args.getString(1), args.optJSONObject(2), true); callbackContext.success(obj); } else if (action.equals("getFile")) { JSONObject obj = getFile(args.getString(0), args.getString(1), args.optJSONObject(2), false); callbackContext.success(obj); } else if (action.equals("remove")) { boolean success; success = remove(args.getString(0)); if (success) { notifyDelete(args.getString(0)); callbackContext.success(); } else { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } } else if (action.equals("removeRecursively")) { boolean success = removeRecursively(args.getString(0)); if (success) { callbackContext.success(); } else { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } } else if (action.equals("moveTo")) { JSONObject entry = transferTo(args.getString(0), args.getString(1), args.getString(2), true); callbackContext.success(entry); } else if (action.equals("copyTo")) { JSONObject entry = transferTo(args.getString(0), args.getString(1), args.getString(2), false); callbackContext.success(entry); } else if (action.equals("readEntries")) { JSONArray entries = readEntries(args.getString(0)); callbackContext.success(entries); } else { return false; } } catch (FileNotFoundException e) { callbackContext.error(FileUtils.NOT_FOUND_ERR); } catch (FileExistsException e) { callbackContext.error(FileUtils.PATH_EXISTS_ERR); } catch (NoModificationAllowedException e) { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } catch (InvalidModificationException e) { callbackContext.error(FileUtils.INVALID_MODIFICATION_ERR); } catch (MalformedURLException e) { callbackContext.error(FileUtils.ENCODING_ERR); } catch (IOException e) { callbackContext.error(FileUtils.INVALID_MODIFICATION_ERR); } catch (EncodingException e) { callbackContext.error(FileUtils.ENCODING_ERR); } catch (TypeMismatchException e) { callbackContext.error(FileUtils.TYPE_MISMATCH_ERR); } return true; }#execute#execute#94#229#136#3#125#38#35#254#0#519#26
^{ String newFilePath = FileHelper.getRealPath(filePath, cordova); try { this.cordova.getActivity().getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, MediaStore.Images.Media.DATA + " = ?", new String { newFilePath }); } catch (UnsupportedOperationException t) { // Was seeing this on the File mobile-spec tests on 4.0.3 x86 emulator. // The ContentResolver applies only when the file was registered in the // first case, which is generally only the case with images. } }#notify delete#notifyDelete#237#246#10#1#4#3#1#8#3#32#1
^{ String decoded = URLDecoder.decode(url, "UTF-8"); File fp = null; // Handle the special case where you get an Android content:// uri. if (decoded.startsWith("content:")) { Cursor cursor = this.cordova.getActivity().managedQuery(Uri.parse(decoded), new String { MediaStore.Images.Media.DATA }, null, null, null); // Note: MediaStore.Images/Audio/Video.Media.DATA is always "_data" int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA); cursor.moveToFirst(); fp = new File(cursor.getString(column_index)); } else { // Test to see if this is a valid URL first @SuppressWarnings("unused") URL testUrl = new URL(decoded); if (decoded.startsWith("file://")) { int questionMark = decoded.indexOf("?"); if (questionMark < 0) { fp = new File(decoded.substring(7, decoded.length())); } else { fp = new File(decoded.substring(7, questionMark)); } } else { fp = new File(decoded); } } if (!fp.exists()) { throw new FileNotFoundException(); } if (!fp.canRead()) { throw new IOException(); } return getEntry(fp); }#resolve local file system uri#resolveLocalFileSystemURI#260#296#37#1#23#7#5#47#3#96#6
^{ File fp = createFileObject(fileName); if (!fp.exists()) { // The directory we are listing doesn't exist so we should fail. throw new FileNotFoundException(); } JSONArray entries = new JSONArray(); if (fp.isDirectory()) { File files = fp.listFiles(); for (int i = 0; i < files.length; i++) { if (files[i].canRead()) { entries.put(getEntry(files[i])); } } } return entries; }#read entries#readEntries#307#326#20#1#9#5#1#19#1#44#5
^{ String newFileName = FileHelper.getRealPath(fileName, cordova); newParent = FileHelper.getRealPath(newParent, cordova); // Check for invalid file name if (newName != null && newName.contains(":")) { throw new EncodingException("Bad file name"); } File source = new File(newFileName); if (!source.exists()) { // The file/directory we are copying doesn't exist so we should fail. throw new FileNotFoundException("The source does not exist"); } File destinationDir = new File(newParent); if (!destinationDir.exists()) { // The destination does not exist so we should fail. throw new FileNotFoundException("The source does not exist"); } // Figure out where we should be copying to File destination = createDestination(newName, source, destinationDir); //Log.d(LOG_TAG, "Source: " + source.getAbsolutePath()); //Log.d(LOG_TAG, "Destin: " + destination.getAbsolutePath()); // Check to see if source and destination are the same file if (source.getAbsolutePath().equals(destination.getAbsolutePath())) { throw new InvalidModificationException("Can't copy a file onto itself"); } if (source.isDirectory()) { if (move) { return moveDirectory(source, destination); } else { return copyDirectory(source, destination); } } else { if (move) { JSONObject newFileEntry = moveFile(source, destination); // If we've moved a file given its content URI, we need to clean up. if (fileName.startsWith("content://")) { notifyDelete(fileName); } return newFileEntry; } else { return copyFile(source, destination); } } }#transfer to#transferTo#344#394#51#4#22#9#2#54#8#89#9
^{ File destFile = null; // I know this looks weird but it is to work around a JSON bug. if ("null".equals(newName) || "".equals(newName)) { newName = null; } if (newName != null) { destFile = new File(destination.getAbsolutePath() + File.separator + newName); } else { destFile = new File(destination.getAbsolutePath() + File.separator + fp.getName()); } return destFile; }#create destination#createDestination#407#420#14#3#7#4#3#11#1#37#3
^{ // Renaming a file to an existing directory should fail if (destFile.exists() && destFile.isDirectory()) { throw new InvalidModificationException("Can't rename a file to a directory"); } copyAction(srcFile, destFile); return getEntry(destFile); }#copy file#copyFile#433#441#9#2#5#2#1#11#1#21#2
^{ FileInputStream istream = new FileInputStream(srcFile); FileOutputStream ostream = new FileOutputStream(destFile); FileChannel input = istream.getChannel(); FileChannel output = ostream.getChannel(); try { input.transferTo(0, input.size(), output); } finally { istream.close(); ostream.close(); input.close(); output.close(); } }#copy action#copyAction#447#460#14#2#10#6#5#16#0#45#1
^{ // Renaming a file to an existing directory should fail if (destinationDir.exists() && destinationDir.isFile()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Check to make sure we are not copying the directory into itself if (isCopyOnItself(srcDir.getAbsolutePath(), destinationDir.getAbsolutePath())) { throw new InvalidModificationException("Can't copy itself into itself"); } // See if the destination directory exists. If not create it. if (!destinationDir.exists()) { if (!destinationDir.mkdir()) { // If we can't create the directory then fail throw new NoModificationAllowedException("Couldn't create the destination directory"); } } for (File file : srcDir.listFiles()) { if (file.isDirectory()) { copyDirectory(file, destinationDir); } else { File destination = new File(destinationDir.getAbsoluteFile() + File.separator + file.getName()); copyFile(file, destination); } } return getEntry(destinationDir); }#copy directory#copyDirectory#475#503#29#2#18#4#2#28#4#60#7
^{ // This weird test is to determine if we are copying or moving a directory into itself. // Copy /sdcard/myDir to /sdcard/myDir-backup is okay but // Copy /sdcard/myDir to /sdcard/myDir/backup should throw an INVALID_MODIFICATION_ERR if (dest.startsWith(src) && dest.indexOf(File.separator, src.length() - 1) != -1) { return true; } return false; }#is copy on itself#isCopyOnItself#514#523#10#2#3#2#0#6#3#19#2
^{ // Renaming a file to an existing directory should fail if (destFile.exists() && destFile.isDirectory()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Try to rename the file if (!srcFile.renameTo(destFile)) { // Trying to rename the file failed. Possibly because we moved across file system on the device. // Now we have to do things the hard way // 1) Copy all the old file // 2) delete the src file copyAction(srcFile, destFile); if (destFile.exists()) { srcFile.delete(); } else { throw new IOException("moved failed"); } } return getEntry(destFile); }#move file#moveFile#536#556#21#2#9#2#2#17#6#32#4
^{ // Renaming a file to an existing directory should fail if (destinationDir.exists() && destinationDir.isFile()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Check to make sure we are not copying the directory into itself if (isCopyOnItself(srcDir.getAbsolutePath(), destinationDir.getAbsolutePath())) { throw new InvalidModificationException("Can't move itself into itself"); } // If the destination directory already exists and is empty then delete it. This is according to spec. if (destinationDir.exists()) { if (destinationDir.list().length > 0) { throw new InvalidModificationException("directory is not empty"); } } // Try to rename the directory if (!srcDir.renameTo(destinationDir)) { // Trying to rename the directory failed. Possibly because we moved across file system on the device. // Now we have to do things the hard way // 1) Copy all the old files // 2) delete the src directory copyDirectory(srcDir, destinationDir); if (destinationDir.exists()) { removeDirRecursively(srcDir); } else { throw new IOException("moved failed"); } } return getEntry(destinationDir); }#move directory#moveDirectory#571#603#33#2#16#2#2#29#8#49#7
^{ File fp = createFileObject(filePath); // You can't delete the root directory. if (atRootDirectory(filePath)) { return false; } return removeDirRecursively(fp); }#remove recursively#removeRecursively#616#624#9#1#3#2#0#8#1#13#2
^{ if (directory.isDirectory()) { for (File file : directory.listFiles()) { removeDirRecursively(file); } } if (!directory.delete()) { throw new FileExistsException("could not delete: " + directory.getName()); } else { return true; } }#remove dir recursively#removeDirRecursively#634#644#11#1#6#2#1#9#0#22#4
^{ File fp = createFileObject(filePath); // You can't delete the root directory. if (atRootDirectory(filePath)) { throw new NoModificationAllowedException("You can't delete the root directory"); } // You can't delete a directory that is not empty if (fp.isDirectory() && fp.list().length > 0) { throw new InvalidModificationException("You can't delete a directory that is not empty."); } return fp.delete(); }#remove#remove#657#670#14#1#7#2#0#12#2#24#3
^{ boolean create = false; boolean exclusive = false; if (options != null) { create = options.optBoolean("create"); if (create) { exclusive = options.optBoolean("exclusive"); } } // Check for a ":" character in the file to line up with BB and iOS if (fileName.contains(":")) { throw new EncodingException("This file has a : in it's name"); } File fp = createFileObject(dirPath, fileName); if (create) { if (exclusive && fp.exists()) { throw new FileExistsException("create/exclusive fails"); } if (directory) { fp.mkdir(); } else { fp.createNewFile(); } if (!fp.exists()) { throw new FileExistsException("create fails"); } } else { if (!fp.exists()) { throw new FileNotFoundException("path does not exist"); } if (directory) { if (fp.isFile()) { throw new TypeMismatchException("path doesn't exist or is file"); } } else { if (fp.isDirectory()) { throw new TypeMismatchException("path doesn't exist or is directory"); } } } // Return the directory return getEntry(fp); }#get file#getFile#687#733#47#4#18#7#4#42#2#70#12
^{ File fp = null; if (fileName.startsWith("/")) { fp = new File(fileName); } else { dirPath = FileHelper.getRealPath(dirPath, cordova); fp = new File(dirPath + File.separator + fileName); } return fp; }#create file object#createFileObject#744#752#9#2#4#3#3#11#0#28#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); if (atRootDirectory(filePath)) { return getEntry(filePath); } return getEntry(new File(filePath).getParent()); }#get parent#getParent#763#769#7#1#6#1#1#11#0#19#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); if (filePath.equals(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache") || filePath.equals(Environment.getExternalStorageDirectory().getAbsolutePath()) || filePath.equals("/data/data/" + cordova.getActivity().getPackageName())) { return true; } return false; }#at root directory#atRootDirectory#779#787#9#1#12#1#1#9#0#35#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); File file = new File(filePath); return file; }#create file object#createFileObject#796#800#5#1#2#2#1#6#0#15#1
^{ File file = createFileObject(filePath); if (!file.exists()) { throw new FileNotFoundException("Failed to find file in getMetadata"); } return file.lastModified(); }#get metadata#getMetadata#810#817#8#1#4#2#0#7#0#16#2
^{ File file = createFileObject(filePath); if (!file.exists()) { throw new FileNotFoundException("File: " + filePath + " does not exist."); } JSONObject metadata = new JSONObject(); metadata.put("size", file.length()); metadata.put("type", FileHelper.getMimeType(filePath, cordova)); metadata.put("name", file.getName()); metadata.put("fullPath", filePath); metadata.put("lastModifiedDate", file.lastModified()); return metadata; }#get file metadata#getFileMetadata#828#842#15#1#13#3#5#26#0#49#2
^{ JSONObject fs = new JSONObject(); if (type == TEMPORARY) { File fp; fs.put("name", "temporary"); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { fp = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache/"); // Create the cache dir if it doesn't exist. fp.mkdirs(); fs.put("root", getEntry(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache/")); } else { fp = new File("/data/data/" + cordova.getActivity().getPackageName() + "/cache/"); // Create the cache dir if it doesn't exist. fp.mkdirs(); fs.put("root", getEntry("/data/data/" + cordova.getActivity().getPackageName() + "/cache/")); } } else if (type == PERSISTENT) { fs.put("name", "persistent"); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { fs.put("root", getEntry(Environment.getExternalStorageDirectory())); } else { fs.put("root", getEntry("/data/data/" + cordova.getActivity().getPackageName())); } } else { throw new IOException("No filesystem of type requested"); } return fs; }#request file system#requestFileSystem#853#884#32#1#35#3#10#40#2#94#5
^{ JSONObject entry = new JSONObject(); entry.put("isFile", file.isFile()); entry.put("isDirectory", file.isDirectory()); entry.put("name", file.getName()); entry.put("fullPath", "file://" + file.getAbsolutePath()); // The file system can't be specified, as it would lead to an infinite loop. // entry.put("filesystem", null); return entry; }#get entry#getEntry#894#904#11#1#9#2#4#15#2#33#1
^{ return getEntry(new File(path)); }#get entry#getEntry#914#915#2#1#2#1#0#4#0#8#1
^{ this.cordova.getThreadPool().execute(new Runnable() { public void run() { try { byte bytes = readAsBinaryHelper(filename, start, end); PluginResult result; switch (resultType) { case PluginResult.MESSAGE_TYPE_STRING: result = new PluginResult(PluginResult.Status.OK, new String(bytes, encoding)); break; case PluginResult.MESSAGE_TYPE_ARRAYBUFFER: result = new PluginResult(PluginResult.Status.OK, bytes); break; case PluginResult.MESSAGE_TYPE_BINARYSTRING: result = new PluginResult(PluginResult.Status.OK, bytes, true); break; default: // Base64. String contentType = FileHelper.getMimeType(filename, cordova); byte base64 = Base64.encodeBase64(bytes); String s = "data:" + contentType + ";base64," + new String(base64, "US-ASCII"); result = new PluginResult(PluginResult.Status.OK, s); } callbackContext.sendPluginResult(result); } catch (FileNotFoundException e) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_FOUND_ERR)); } catch (IOException e) { Log.d(LOG_TAG, e.getLocalizedMessage()); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_READABLE_ERR)); } } }); }#read file as#readFileAs#935#964#30#6#18#13#9#46#1#121#5
^{ try { byte bytes = readAsBinaryHelper(filename, start, end); PluginResult result; switch (resultType) { case PluginResult.MESSAGE_TYPE_STRING: result = new PluginResult(PluginResult.Status.OK, new String(bytes, encoding)); break; case PluginResult.MESSAGE_TYPE_ARRAYBUFFER: result = new PluginResult(PluginResult.Status.OK, bytes); break; case PluginResult.MESSAGE_TYPE_BINARYSTRING: result = new PluginResult(PluginResult.Status.OK, bytes, true); break; default: // Base64. String contentType = FileHelper.getMimeType(filename, cordova); byte base64 = Base64.encodeBase64(bytes); String s = "data:" + contentType + ";base64," + new String(base64, "US-ASCII"); result = new PluginResult(PluginResult.Status.OK, s); } callbackContext.sendPluginResult(result); } catch (FileNotFoundException e) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_FOUND_ERR)); } catch (IOException e) { Log.d(LOG_TAG, e.getLocalizedMessage()); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_READABLE_ERR)); } }#run#run#937#964#28#0#16#7#8#44#1#101#5
^{ int numBytesToRead = end - start; byte bytes = new byte[numBytesToRead]; InputStream inputStream = FileHelper.getInputStreamFromUriString(filename, cordova); int numBytesRead = 0; if (start > 0) { inputStream.skip(start); } while (numBytesToRead > 0 && (numBytesRead = inputStream.read(bytes, numBytesRead, numBytesToRead)) >= 0) { numBytesToRead -= numBytesRead; } return bytes; }#read as binary helper#readAsBinaryHelper#980#994#15#3#3#7#2#17#0#43#3
^{ if (filename.startsWith("content://")) { throw new NoModificationAllowedException("Couldn't write to file given its content URI"); } filename = FileHelper.getRealPath(filename, cordova); boolean append = false; if (offset > 0) { this.truncateFile(filename, offset); append = true; } byte rawData = data.getBytes(); ByteArrayInputStream in = new ByteArrayInputStream(rawData); FileOutputStream out = new FileOutputStream(filename, append); byte buff = new byte[rawData.length]; in.read(buff, 0, buff.length); out.write(buff, 0, rawData.length); out.flush(); out.close(); return rawData.length; }#write#write#1007#1029#23#3#11#8#7#35#0#75#3
^{ if (filename.startsWith("content://")) { throw new NoModificationAllowedException("Couldn't truncate file given its content URI"); } filename = FileHelper.getRealPath(filename, cordova); RandomAccessFile raf = new RandomAccessFile(filename, "rw"); try { if (raf.length() >= size) { FileChannel channel = raf.getChannel(); channel.truncate(size); return size; } return raf.length(); } finally { raf.close(); } }#truncate file#truncateFile#1040#1057#18#2#9#4#3#20#0#43#3
^{ TransformerFactory factory = TransformerFactory.newInstance(); Source xslt = new StreamSource(new File(args[0])); Transformer transformer = factory.newTransformer(xslt); Source text = new StreamSource(new File(args[1])); transformer.transform(text, new StreamResult(new File(args[2]))); }#main#main#28#34#7#1#9#5#1#20#0#39#1
^{ XmlToHtmlConverter x = new XmlToHtmlConverter(); x.populateForApi(); x.generateToc(); x.generateIndividualCommandPages(); }#main#main#24#28#5#1#4#2#3#4#0#17#1
^{ try { TransformerFactory tFactory = TransformerFactory.newInstance(); // Generate the TOC for root administrator role Transformer transformer1 = tFactory.newTransformer(new javax.xml.transform.stream.StreamSource("generatetoc.xsl")); // Modify this path to match your own setup. transformer1.transform(new javax.xml.transform.stream.StreamSource("apis/apiSummarySorted.xml"), // Modify this path to your own desired output location. new javax.xml.transform.stream.StreamResult(new FileOutputStream("html/index.html"))); } catch (Exception e) { e.printStackTrace(); } }#generate toc#generateToc#31#41#11#0#8#3#2#11#3#39#1
^{ for (String commandName : allCommandNames) { try { TransformerFactory tFactory = TransformerFactory.newInstance(); Transformer transformer = tFactory.newTransformer(new javax.xml.transform.stream.StreamSource("generatecommands.xsl")); transformer.transform // Modify this path to the location of the input files on your system. (new javax.xml.transform.stream.StreamSource("apis/" + commandName + ".xml"), // Modify this path with the desired output location. new javax.xml.transform.stream.StreamResult(new FileOutputStream("html/apis/" + commandName + ".html"))); } catch (Exception e) { e.printStackTrace(); } } }#generate individual command pages#generateIndividualCommandPages#46#60#15#0#8#4#2#12#2#44#2
^{ try { CommandLine commandLine = new CommandLine("heat"); if(dir != null && !dir.trim().isEmpty()) { commandLine.addArgument("dir"); commandLine.addArgument(dir); } commandLine.addArgument("-gg"); commandLine.addArgument("-cg"); commandLine.addArgument(componentGroup); commandLine.addArgument("-ke"); commandLine.addArgument("-sfrag"); if(template == null || template.trim().isEmpty()) { commandLine.addArgument("-template"); commandLine.addArgument("fragment"); } else { commandLine.addArgument("-template"); commandLine.addArgument(template); } if (outputFile != null) { commandLine.addArgument("-out"); commandLine.addArgument(outputFile.getAbsolutePath()); } if (directoryName != null) { commandLine.addArgument("-dr"); commandLine.addArgument(directoryName); } if (vars != null) { commandLine.addArguments(vars, false); } DefaultExecutor executor = new DefaultExecutor(); getLog().debug("working directory " + commandLine.toString()); executor.setWorkingDirectory(getWorkingDirectory(workingDirectory)); int exitValue = executor.execute(commandLine); if (exitValue != 0) { throw new MojoExecutionException( "Problem executing heat, return code " + exitValue); } } catch (ExecuteException e) { throw new MojoExecutionException("Problem executing heat", e); } catch (IOException e) { throw new MojoExecutionException("Problem executing heat", e); } }#execute#execute#89#140#52#0#32#5#18#59#0#107#7
^{ cnc = Mockito.mock(CheckNetworkCommand.class); cna = new CheckNetworkAnswer(cnc, true, "details", true); }#set up#setUp#47#50#4#0#2#0#2#7#0#13#1
^{ return 1L; }#get id#getId#80#82#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#85#87#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#90#92#3#0#0#0#0#1#0#3#1
^{ return Storage.StoragePoolType.Filesystem; }#get pool type#getPoolType#95#97#3#0#0#0#0#1#0#9#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#100#108#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#111#113#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#116#118#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#121#123#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#126#128#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#131#133#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#136#138#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#141#143#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#146#148#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#151#153#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#156#158#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#161#163#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#166#168#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#171#173#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#176#177#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#179#181#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#184#187#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#190#193#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#196#198#3#0#0#0#0#1#1#5#1
^{ return 1L; }#get id#getId#42#44#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#47#49#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#52#54#3#0#0#0#0#1#0#3#1
^{ return StoragePoolType.Filesystem; }#get pool type#getPoolType#57#59#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#62#70#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#73#75#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#78#80#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#83#85#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#88#90#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#93#95#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#98#100#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#103#105#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#108#110#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#113#115#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#118#120#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#123#125#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#128#130#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#133#135#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#138#139#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#141#143#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#146#149#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#152#155#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#158#160#3#0#0#0#0#1#1#5#1
^{ ssc1 = new SnapshotCommand(pool, "secondaryStorageUrl", "snapshotUuid", "snapshotName", 101L, 102L, 103L); }#set up#setUp#170#172#3#0#1#0#1#8#0#6#1
^{ return 1L; }#get id#getId#41#43#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#46#48#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#51#53#3#0#0#0#0#1#0#3#1
^{ return StoragePoolType.Filesystem; }#get pool type#getPoolType#56#58#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#61#69#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#72#74#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#77#79#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#82#84#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#87#89#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#92#94#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#97#99#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#102#104#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#107#109#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#112#114#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#117#119#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#122#124#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#127#129#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#132#134#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#137#138#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#140#142#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#145#148#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#151#154#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#157#159#3#0#0#0#0#1#1#5#1
^{ StoragePool pool = Mockito.mock(StoragePool.class); bsc = new BackupSnapshotCommand("secondaryStoragePoolURL", 101L, 102L, 103L, 104L, 105L, "volumePath", pool, "snapshotUuid", "snapshotName", "prevSnapshotUuid", "prevBackupUuid", false, "vmName", 5); bsa = new BackupSnapshotAnswer(bsc, true, "results", "bussname", false); }#set up#setUp#37#45#9#0#3#1#2#24#0#17#1
^{ @SuppressWarnings("unchecked") List<PhysicalNetworkSetupInfo> net = Mockito.mock(List.class); cnc = new CheckNetworkCommand(net); }#set up#setUp#37#41#5#0#2#1#1#5#0#17#1
^{ return Status.Up; }#get state#getState#41#43#3#0#0#0#0#1#0#6#1
^{ return 101L; }#get id#getId#46#48#3#0#0#0#0#1#0#3#1
^{ return "101"; }#get uuid#getUuid#51#53#3#0#0#0#0#1#0#3#1
^{ return "hostName"; }#get name#getName#56#58#3#0#0#0#0#1#0#3#1
^{ return Host.Type.Storage; }#get type#getType#61#63#3#0#0#0#0#1#0#7#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#66#74#9#0#3#2#2#6#0#14#1
^{ return Status.Up; }#get status#getStatus#77#79#3#0#0#0#0#1#0#6#1
^{ return "10.1.1.1"; }#get private ip address#getPrivateIpAddress#82#84#3#0#0#0#0#1#0#3#1
^{ return null; }#get storage url#getStorageUrl#87#88#2#0#0#0#0#1#0#2#1
^{ return "10.1.1.2"; }#get storage ip address#getStorageIpAddress#91#92#2#0#0#0#0#1#0#2#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get guid#getGuid#95#97#3#0#0#0#0#1#0#3#1
^{ return 100000000000L; }#get total memory#getTotalMemory#100#102#3#0#0#0#0#1#0#3#1
^{ return 1; }#get cpu sockets#getCpuSockets#105#107#3#0#0#0#0#1#0#3#1
^{ return 16; }#get cpus#getCpus#110#112#3#0#0#0#0#1#0#3#1
^{ return 2000000000L; }#get speed#getSpeed#115#117#3#0#0#0#0#1#0#3#1
^{ return 22; }#get proxy port#getProxyPort#120#122#3#0#0#0#0#1#0#3#1
^{ return 16L; }#get pod id#getPodId#125#127#3#0#0#0#0#1#0#3#1
^{ return 17L; }#get data center id#getDataCenterId#130#132#3#0#0#0#0#1#0#3#1
^{ return "parent"; }#get parent#getParent#135#137#3#0#0#0#0#1#0#3#1
^{ return "10.1.1.3"; }#get storage ip address deux#getStorageIpAddressDeux#140#142#3#0#0#0#0#1#0#3#1
^{ return HypervisorType.XenServer; }#get hypervisor type#getHypervisorType#145#147#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/2012 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get disconnected on#getDisconnectedOn#150#158#9#0#3#2#2#6#0#14#1
^{ return "4.0.1"; }#get version#getVersion#161#163#3#0#0#0#0#1#0#3#1
^{ return 100000000000L; }#get total size#getTotalSize#166#168#3#0#0#0#0#1#0#3#1
^{ return "capabilities"; }#get capabilities#getCapabilities#171#173#3#0#0#0#0#1#0#3#1
^{ return 1L; }#get last pinged#getLastPinged#176#178#3#0#0#0#0#1#0#3#1
^{ return 2L; }#get management server id#getManagementServerId#181#183#3#0#0#0#0#1#0#3#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("02/01/2012 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get removed#getRemoved#186#194#9#0#3#2#2#6#0#14#1
^{ return 3L; }#get cluster id#getClusterId#197#199#3#0#0#0#0#1#0#3#1
^{ return "10.1.1.4"; }#get public ip address#getPublicIpAddress#202#204#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.8"; }#get public netmask#getPublicNetmask#207#209#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.16"; }#get private netmask#getPrivateNetmask#212#214#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.24"; }#get storage netmask#getStorageNetmask#217#219#3#0#0#0#0#1#0#3#1
^{ return "01:f4:17:38:0e:26"; }#get storage mac address#getStorageMacAddress#222#224#3#0#0#0#0#1#0#3#1
^{ return "02:f4:17:38:0e:26"; }#get public mac address#getPublicMacAddress#227#229#3#0#0#0#0#1#0#3#1
^{ return "03:f4:17:38:0e:26"; }#get private mac address#getPrivateMacAddress#232#234#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.25"; }#get storage netmask deux#getStorageNetmaskDeux#237#239#3#0#0#0#0#1#0#3#1
^{ return "01:f4:17:38:0e:27"; }#get storage mac address deux#getStorageMacAddressDeux#242#244#3#0#0#0#0#1#0#3#1
^{ return "1.2.3.0"; }#get hypervisor version#getHypervisorVersion#247#249#3#0#0#0#0#1#0#3#1
^{ return false; }#is in maintenance states#isInMaintenanceStates#252#254#3#0#0#0#0#1#0#3#1
^{ return ResourceState.Enabled; }#get resource state#getResourceState#257#259#3#0#0#0#0#1#0#6#1
^{ String sa = hpg.generateConfiguration(cmd); StringBuilder sb = new StringBuilder(); for (String s : sa) { sb.append(s).append('\n'); } return sb.toString(); }#gen config#genConfig#112#118#7#2#5#5#1#8#0#26#2
^{ assert req1.getSequence() == req2.getSequence(); assert req1.getAgentId() == req2.getAgentId(); assert req1.getManagementServerId() == req2.getManagementServerId(); assert req1.isControl() == req2.isControl(); assert req1.isFromServer() == req2.isFromServer(); assert req1.executeInSequence() == req2.executeInSequence(); assert req1.stopOnError() == req2.stopOnError(); assert req1.getVersion().equals(req2.getVersion()); assert req1.getViaAgentId() == req2.getViaAgentId(); Command cmd1 = req1.getCommands(); Command cmd2 = req2.getCommands(); for (int i = 0; i < cmd1.length; i++) { assert cmd1[i].getClass().equals(cmd2[i].getClass()); } }#compare request#compareRequest#236#249#14#2#24#5#0#19#0#87#2
^{ final String guestIp = "10.10.10.10"; final String guestMac = "aa:aa:aa:aa:aa:aa"; final String vmName = "vm"; final Long vmId = 1L; final String signature = "sig"; final Long seqNum = 0L; final String proto = "abc"; final int startPort = 1; final int endPort = 2; final String allowedCidrs = new String {"1.2.3.4/5","6.7.8.9/0"}; final IpPortAndProto ingressRuleSet = new IpPortAndProto{new IpPortAndProto(proto, startPort, endPort, allowedCidrs)}; final IpPortAndProto egressRuleSet = new IpPortAndProto{new IpPortAndProto(proto, startPort, endPort, allowedCidrs)}; final List<String> secIps = new Vector<String>(); securityGroupRulesCmd = new SecurityGroupRulesCmd(guestIp, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps); }#set up#setUp#45#60#16#0#4#13#1#36#0#62#1
^{ return executeInVR(routerIp, script, args, Duration.standardSeconds(60L)); }#execute in vr#executeInVR#99#101#3#3#2#3#0#6#0#16#1
^{ assertEquals(routerIp, ROUTERIP); verifyCommand(_currentCmd, script, args); return new ExecutionResult(true, null); }#execute in vr#executeInVR#104#108#5#4#3#4#2#10#0#19#1
^{ assertEquals(routerIp, ROUTERIP); verifyFile(_currentCmd, path, filename, content); return new ExecutionResult(true, null); }#create file in vr#createFileInVR#111#115#5#4#3#4#2#11#0#20#1
^{ cmd.setRouterAccessIp(ROUTERIP); _currentCmd = cmd; if (cmd instanceof IpAssocVpcCommand) { return prepareNetworkElementCommand((IpAssocVpcCommand)cmd); } else if (cmd instanceof IpAssocCommand) { return prepareNetworkElementCommand((IpAssocCommand)cmd); } else if (cmd instanceof SetupGuestNetworkCommand) { return prepareNetworkElementCommand((SetupGuestNetworkCommand)cmd); } else if (cmd instanceof SetSourceNatCommand) { return prepareNetworkElementCommand((SetSourceNatCommand)cmd); } else if (cmd instanceof SetNetworkACLCommand) { return prepareNetworkElementCommand((SetNetworkACLCommand)cmd); } return new ExecutionResult(true, null); }#prepare command#prepareCommand#118#133#16#1#7#1#2#21#0#37#6
^{ return new ExecutionResult(true, null); }#cleanup command#cleanupCommand#136#138#3#1#1#1#0#3#0#6#1
^{ _resource = new VirtualRoutingResource(this); try { _resource.configure("VRResource", new HashMap<String, Object>()); } catch (final ConfigurationException e) { e.printStackTrace(); } }#setup#setup#141#147#7#0#4#1#3#6#0#18#1
^{ if (cmd instanceof AggregationControlCommand) { verifyFile(cmd, path, filename, content); } else if (cmd instanceof LoadBalancerConfigCommand) { verifyFile((LoadBalancerConfigCommand)cmd, path, filename, content); } }#verify file#verifyFile#151#155#5#4#2#4#2#12#0#25#3
^{ if (cmd instanceof SetStaticRouteCommand) { verifyArgs((SetStaticRouteCommand) cmd, script, args); } else if (cmd instanceof SetStaticNatRulesCommand) { verifyArgs((SetStaticNatRulesCommand) cmd, script, args); } else if (cmd instanceof LoadBalancerConfigCommand) { verifyArgs((LoadBalancerConfigCommand) cmd, script, args); } else if (cmd instanceof SavePasswordCommand) { verifyArgs((SavePasswordCommand)cmd, script, args); } else if (cmd instanceof DhcpEntryCommand) { verifyArgs((DhcpEntryCommand)cmd, script, args); } else if (cmd instanceof DnsMasqConfigCommand) { verifyArgs((DnsMasqConfigCommand)cmd, script, args); } else if (cmd instanceof VmDataCommand) { verifyArgs((VmDataCommand)cmd, script, args); } else if (cmd instanceof RemoteAccessVpnCfgCommand) { verifyArgs((RemoteAccessVpnCfgCommand)cmd, script, args); } else if (cmd instanceof VpnUsersCfgCommand) { verifyArgs((VpnUsersCfgCommand)cmd, script, args); } else if (cmd instanceof Site2SiteVpnCfgCommand) { verifyArgs((Site2SiteVpnCfgCommand)cmd, script, args); } else if (cmd instanceof SetMonitorServiceCommand) { verifyArgs((SetMonitorServiceCommand)cmd, script, args); } else if (cmd instanceof SetupGuestNetworkCommand) { verifyArgs((SetupGuestNetworkCommand)cmd, script, args); } else if (cmd instanceof SetNetworkACLCommand) { verifyArgs((SetNetworkACLCommand)cmd, script, args); } else if (cmd instanceof SetSourceNatCommand) { verifyArgs((SetSourceNatCommand)cmd, script, args); } else if (cmd instanceof IpAssocCommand) { verifyArgs((IpAssocCommand)cmd, script, args); } if (cmd instanceof AggregationControlCommand) { verifyArgs((AggregationControlCommand)cmd, script, args); } }#verify command#verifyCommand#159#193#35#3#16#3#16#80#0#120#17
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#197#198#2#3#0#3#0#0#1#8#1
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#201#202#2#3#0#3#0#0#1#8#1
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#205#206#2#3#0#3#0#0#1#8#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesVpcCommand cmd = new SetPortForwardingRulesVpcCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules vpc command#generateSetPortForwardingRulesVpcCommand#229#236#8#0#9#2#4#34#0#32#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesCommand cmd = new SetPortForwardingRulesCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules command#generateSetPortForwardingRulesCommand#251#258#8#0#9#2#4#34#0#32#1
^{ final IpAddressTO ips = cmd.getIpAddresses(); for (final IpAddressTO ip : ips) { ip.setNicDevId(2); } return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#273#278#6#1#3#3#1#7#0#16#2
^{ final List<IpAddressTO> ips = new ArrayList<>(); ips.add(new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(2, "64.1.1.11", false, false, false, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false)); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocCommand cmd = new IpAssocCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 3); return cmd; }#generate ip assoc command#generateIpAssocCommand#281#291#11#0#13#3#5#52#0#46#1
^{ final IpAddressTO ips = cmd.getIpAddresses(); for (final IpAddressTO ip : ips) { ip.setNicDevId(2); } return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#306#311#6#1#3#3#1#7#0#16#2
^{ final List<IpAddressTO> ips = new ArrayList<IpAddressTO>(); ips.add(new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(2, "64.1.1.11", false, false, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false)); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(6, cmd.getAnswersCount()); // AnswersCount is clearly wrong as it doesn't know enough to tell return cmd; }#generate ip assoc vpc command#generateIpAssocVpcCommand#314#324#11#0#13#3#5#52#1#47#1
^{ if (cmd instanceof IpAssocVpcCommand) { _count ++; switch (_count) { case 1: assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; default: fail("Failed to recongize the match!"); } } else { assertEquals(script, VRScripts.UPDATE_CONFIG); _count ++; switch (_count) { case 1: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; case 2: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; case 3: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; default: fail("Failed to recongize the match!"); } } }#verify args#verifyArgs#327#352#26#3#8#3#10#31#0#46#8
^{ final IpAddressTO ip = cmd.getIpAddress(); ip.setNicDevId(1); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#364#367#4#1#3#2#1#6#0#13#1
^{ final IpAddressTO ip = new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); final SetSourceNatCommand cmd = new SetSourceNatCommand(ip, true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set source nat command#generateSetSourceNatCommand#370#374#5#0#3#2#1#19#0#17#1
^{ assertEquals(script, VRScripts.VPC_SOURCE_NAT); assertEquals(args, "-A -l 64.1.1.10 -c eth1"); }#verify args#verifyArgs#377#379#3#3#2#3#2#6#0#15#1
^{ final List<NetworkACLTO> acls = new ArrayList<>(); final List<String> cidrs = new ArrayList<>(); cidrs.add("192.168.0.1/24"); cidrs.add("192.168.0.2/24"); acls.add(new NetworkACLTO(1, "64", "TCP", 20, 80, false, false, cidrs, 0, 0, TrafficType.Ingress, true, 1)); acls.add(new NetworkACLTO(2, "64", "ICMP", 0, 0, false, false, cidrs, -1, -1, TrafficType.Ingress, false, 2)); acls.add(new NetworkACLTO(3, "65", "ALL", 0, 0, false, false, cidrs, -1, -1, TrafficType.Egress, true, 3)); final NicTO nic = new NicTO(); nic.setMac("01:23:45:67:89:AB"); nic.setIp("192.168.1.1"); nic.setNetmask("255.255.255.0"); final SetNetworkACLCommand cmd = new SetNetworkACLCommand(acls, nic); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set network acl command#generateSetNetworkACLCommand#395#410#16#0#16#4#9#65#0#69#1
^{ _count ++; switch (_count) { case 1: // FIXME Check the json content assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.NETWORK_ACL_CONFIG, args); // assertEquals(args, " -d eth3 -M 01:23:45:67:89:AB -i 192.168.1.1 -m 24 -a Egress:ALL:0:0:192.168.0.1/24-192.168.0.2/24:ACCEPT:," + // "Ingress:ICMP:0:0:192.168.0.1/24-192.168.0.2/24:DROP:,Ingress:TCP:20:80:192.168.0.1/24-192.168.0.2/24:ACCEPT:,"); break; case 2: assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.NETWORK_ACL_CONFIG, args); break; default: fail(); } }#verify args#verifyArgs#413#428#16#3#5#3#6#17#3#31#4
^{ final NicTO nic = cmd.getNic(); nic.setDeviceId(3); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#432#435#4#1#3#2#1#6#0#13#1
^{ final NicTO nic = cmd.getNic(); nic.setDeviceId(4); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#445#448#4#1#3#2#1#6#0#13#1
^{ final NicTO nic = new NicTO(); nic.setMac("01:23:45:67:89:AB"); nic.setIp("10.1.1.1"); nic.setNetmask("255.255.255.0"); final SetupGuestNetworkCommand cmd = new SetupGuestNetworkCommand("10.1.1.10-10.1.1.20", "cloud.test", false, "8.8.8.8", "8.8.4.4", true, nic); cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, "10.1.1.2"); cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY, "10.1.1.1"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate setup guest network command#generateSetupGuestNetworkCommand#451#462#12#0#8#2#6#25#0#38#1
^{ // TODO Check the contents of the json file //assertEquals(script, VRScripts.VPC_GUEST_NETWORK); //assertEquals(args, " -C -M 01:23:45:67:89:AB -d eth4 -i 10.1.1.2 -g 10.1.1.1 -m 24 -n 10.1.1.0 -s 8.8.8.8,8.8.4.4 -e cloud.test"); }#verify args#verifyArgs#465#468#4#3#0#3#0#0#3#8#1
^{ final List<MonitorServiceTO> services = new ArrayList<>(); services.add(new MonitorServiceTO("service", "process", "name", "path", "file", true)); services.add(new MonitorServiceTO("service_2", "process_2", "name_2", "path_2", "file_2", false)); final SetMonitorServiceCommand cmd = new SetMonitorServiceCommand(services); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set monitor service command#generateSetMonitorServiceCommand#478#486#9#0#7#2#3#23#0#28#1
^{ assertEquals(script, VRScripts.MONITOR_SERVICE); assertEquals(args, " -c [service]:processname=process:servicename=name:pidfile=file:,[service_2]:processname=process_2:servicename=name_2:pidfile=file_2:,"); }#verify args#verifyArgs#489#491#3#3#2#3#2#6#0#15#1
^{ _count ++; assertEquals(script, VRScripts.S2SVPN_IPSEC); switch (_count) { case 1: assertEquals(args, "-A -l 64.10.1.10 -n 192.168.1.1/16 -g 64.10.1.1 -r 124.10.1.10 -N 192.168.100.1/24 -e \"3des-sha1,aes128-md5\" -i \"3des-sha1,aes128-sha1;modp1536\" -t 1800 -T 1800 -s \"psk\" -d 1"); break; case 2: assertEquals(args, "-A -l 64.10.1.10 -n 192.168.1.1/16 -g 64.10.1.1 -r 124.10.1.10 -N 192.168.100.1/24 -e \"3des-sha1,aes128-md5\" -i \"3des-sha1,aes128-sha1;modp1536\" -t 1800 -T 1800 -s \"psk\" -d 0 -p "); break; case 3: assertEquals(args, "-D -r 124.10.1.10 -n 192.168.1.1/16 -N 192.168.100.1/24"); break; default: fail(); } }#verify args#verifyArgs#514#529#16#3#5#3#6#18#0#22#5
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(true, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 1#generateRemoteAccessVpnCfgCommand1#547#551#5#0#3#1#2#13#0#16#1
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(false, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 2#generateRemoteAccessVpnCfgCommand2#554#558#5#0#3#1#2#13#0#16#1
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(true, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 3#generateRemoteAccessVpnCfgCommand3#561#565#5#0#3#1#2#13#0#16#1
^{ _count ++; assertEquals(script, VRScripts.VPN_L2TP); switch (_count) { case 1: assertEquals(args, "-r 10.10.1.10-10.10.1.20 -p sharedkey -s 124.10.10.10 -l 10.10.1.1 -c -C 10.1.1.1/24 -i eth2"); break; case 2: assertEquals(args, "-d -s 124.10.10.10 -C 10.1.1.1/24 -i eth2"); break; case 3: assertEquals(args, "-r 10.10.1.10-10.10.1.20 -p sharedkey -s 124.10.10.10 -l 10.10.1.1 -c -C 10.1.1.1/24 -i eth1"); break; default: fail(); } }#verify args#verifyArgs#568#583#16#3#5#3#6#18#0#22#5
^{ final List<FirewallRuleTO> rules = new ArrayList<>(); final List<String> sourceCidrs = new ArrayList<>(); sourceCidrs.add("10.10.1.1/24"); sourceCidrs.add("10.10.1.2/24"); rules.add(new FirewallRuleTO(1, "64.10.10.10", "TCP", 22, 80, false, false, Purpose.Firewall, sourceCidrs, 0, 0)); rules.add(new FirewallRuleTO(2, "64.10.10.10", "ICMP", 0, 0, false, false, Purpose.Firewall, sourceCidrs, -1, -1)); rules.add(new FirewallRuleTO(3, "64.10.10.10", "ICMP", 0, 0, true, true, Purpose.Firewall, sourceCidrs, -1, -1)); final SetFirewallRulesCommand cmd = new SetFirewallRulesCommand(rules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set firewall rules command#generateSetFirewallRulesCommand#598#609#12#0#12#3#6#51#0#56#1
^{ final VmDataCommand cmd = new VmDataCommand("10.1.10.4", "i-4-VM", true); // if you add new metadata files, also edit systemvm/patches/debian/config/var/www/html/latest/.htaccess cmd.addVmData("userdata", "user-data", "user-data"); cmd.addVmData("metadata", "service-offering", "serviceOffering"); cmd.addVmData("metadata", "availability-zone", "zoneName"); cmd.addVmData("metadata", "local-ipv4", "10.1.10.4"); cmd.addVmData("metadata", "local-hostname", "test-vm"); cmd.addVmData("metadata", "public-ipv4", "110.1.10.4"); cmd.addVmData("metadata", "public-hostname", "hostname"); cmd.addVmData("metadata", "instance-id", "i-4-VM"); cmd.addVmData("metadata", "vm-id", "4"); cmd.addVmData("metadata", "public-keys", "publickey"); cmd.addVmData("metadata", "cloud-identifier", "CloudStack-{test}"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate vm data command#generateVmDataCommand#618#635#18#0#13#1#12#52#1#46#1
^{ assertEquals(script, VRScripts.UPDATE_CONFIG); assertEquals(args, VRScripts.VM_METADATA_CONFIG); }#verify args#verifyArgs#638#640#3#3#2#3#2#6#0#18#1
^{ final SavePasswordCommand cmd = new SavePasswordCommand("123pass", "10.1.10.4", "i-4-VM", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate save password command#generateSavePasswordCommand#649#652#4#0#2#1#1#9#0#13#1
^{ assertEquals(script, VRScripts.PASSWORD); assertEquals(args, "-v 10.1.10.4 -p 123pass"); }#verify args#verifyArgs#655#657#3#3#2#3#2#6#0#15#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", "10.1.10.2", "vm1", null, true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dhcp entry command 1#generateDhcpEntryCommand1#674#677#4#0#2#1#1#10#0#13#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", null, "vm1", "2001:db8:0:0:0:ff00:42:8329", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac())); return cmd; }#generate dhcp entry command 2#generateDhcpEntryCommand2#680#684#5#0#5#1#2#13#0#22#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", "10.1.10.2", "vm1", "2001:db8:0:0:0:ff00:42:8329", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac())); return cmd; }#generate dhcp entry command 3#generateDhcpEntryCommand3#687#691#5#0#5#1#2#13#0#22#1
^{ _count ++; assertEquals(script, VRScripts.DHCP); switch (_count) { case 1: assertEquals(args, " -m 12:34:56:78:90:AB -4 10.1.10.2 -h vm1"); break; case 2: assertEquals(args, " -m 12:34:56:78:90:AB -h vm1 -6 2001:db8:0:0:0:ff00:42:8329 -u 00:03:00:01:12:34:56:78:90:AB"); break; case 3: assertEquals(args, " -m 12:34:56:78:90:AB -4 10.1.10.2 -h vm1 -6 2001:db8:0:0:0:ff00:42:8329 -u 00:03:00:01:12:34:56:78:90:AB"); break; default: fail(); } }#verify args#verifyArgs#694#708#15#3#5#3#6#18#0#22#5
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final CreateIpAliasCommand cmd = new CreateIpAliasCommand("169.254.3.10", aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate create ip alias command#generateCreateIpAliasCommand#718#726#9#0#9#2#4#23#0#32#1
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final DeleteIpAliasCommand cmd = new DeleteIpAliasCommand("169.254.10.1", aliases, aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate delete ip alias command#generateDeleteIpAliasCommand#735#742#8#0#9#2#4#24#0#33#1
^{ final List<DhcpTO> dhcps = new ArrayList<>(); dhcps.add(new DhcpTO("10.1.20.2", "10.1.20.1", "255.255.255.0", "10.1.20.5")); dhcps.add(new DhcpTO("10.1.21.2", "10.1.21.1", "255.255.255.0", "10.1.21.5")); final DnsMasqConfigCommand cmd = new DnsMasqConfigCommand(dhcps); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dns masq config command#generateDnsMasqConfigCommand#751#757#7#0#7#2#3#19#0#28#1
^{ assertEquals(script, VRScripts.DNSMASQ_CONFIG); assertEquals(args, "10.1.20.2:10.1.20.1:255.255.255.0:10.1.20.5-10.1.21.2:10.1.21.1:255.255.255.0:10.1.21.5-"); }#verify args#verifyArgs#760#762#3#3#2#3#2#6#0#15#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, null, "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command 1#generateLoadBalancerConfigCommand1#777#789#13#0#16#5#6#46#0#64#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); nic.setIp("10.1.10.2"); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, Long.valueOf(1), "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command 2#generateLoadBalancerConfigCommand2#792#805#14#0#18#5#7#49#0#70#1
^{ _count ++; switch (_count) { case 1: case 3: _file = path + filename; assertEquals(path, "/etc/haproxy/"); assertTrue(filename.startsWith("haproxy.cfg.new")); assertEquals(content, "global\n" + "\tlog 127.0.0.1:3914 local0 warning\n" + "\tmaxconn 1000\n" + "\tmaxpipes 250\n" + "\tchroot /var/lib/haproxy\n" + "\tuser haproxy\n" + "\tgroup haproxy\n" + "\tdaemon\n" + "\t \n" + "defaults\n" + "\tlog global\n" + "\tmode tcp\n" + "\toption dontlognull\n" + "\tretries 3\n" + "\toption redispatch\n" + "\toption forwardfor\n" + "\toption forceclose\n" + "\ttimeout connect 5000\n" + "\ttimeout client 50000\n" + "\ttimeout server 50000\n" + "\n" + "listen stats_on_guest 10.1.10.2:8081\n" + "\tmode http\n" + "\toption httpclose\n" + "\tstats enable\n" + "\tstats uri /admin?stats\n" + "\tstats realm Haproxy\\ Statistics\n" + "\tstats auth admin1:AdMiN123\n" + "\n" + "\t \n" + "listen 64_10_1_10-80 64.10.1.10:80\n" + "\tbalance algo\n" + "\tserver 64_10_1_10-80_0 10.1.10.2:80 check\n" + "\tmode http\n" + "\toption httpclose\n" + "\t \n" + "\t \n"); break; default: fail(); } }#verify file#verifyFile#808#855#48#4#5#4#6#15#0#24#4
^{ _count ++; switch (_count) { case 2: assertEquals(script, VRScripts.LB); assertEquals(args, " -i 10.1.10.2 -f " + _file + " -a 64.10.1.10:80:, -s 10.1.10.2:8081:0/0:,,"); break; default: fail(); } }#verify args#verifyArgs#859#867#9#3#3#3#4#10#0#19#3
^{ assertEquals(script, VRScripts.VR_CFG); assertTrue(args.startsWith("-c /var/cache/cloud/VR-")); assertTrue(args.endsWith(".cfg")); }#verify args#verifyArgs#915#918#4#3#5#3#3#9#0#21#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, null, "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command#generateLoadBalancerConfigCommand#223#238#16#0#16#5#6#46#0#64#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesVpcCommand cmd = new SetPortForwardingRulesVpcCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules vpc command#generateSetPortForwardingRulesVpcCommand#241#250#10#0#9#2#4#34#0#32#1
^{ final List<DhcpTO> dhcps = new ArrayList<>(); dhcps.add(new DhcpTO("10.1.20.2", "10.1.20.1", "255.255.255.0", "10.1.20.5")); dhcps.add(new DhcpTO("10.1.21.2", "10.1.21.1", "255.255.255.0", "10.1.21.5")); final DnsMasqConfigCommand cmd = new DnsMasqConfigCommand(dhcps); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dns masq config command#generateDnsMasqConfigCommand#253#260#8#0#7#2#3#19#0#28#1
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final DeleteIpAliasCommand cmd = new DeleteIpAliasCommand("169.254.10.1", aliases, aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate delete ip alias command#generateDeleteIpAliasCommand#263#271#9#0#9#2#4#24#0#33#1
^{ final List<IpAddressTO> ips = new ArrayList<IpAddressTO>(); IpAddressTO ip1 = new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); IpAddressTO ip2 = new IpAddressTO(2, "64.1.1.11", false, false, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); IpAddressTO ip3 = new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false); ip1.setTrafficType(TrafficType.Public); ip2.setTrafficType(TrafficType.Public); ip3.setTrafficType(TrafficType.Public); ips.add(ip1); ips.add(ip2); ips.add(ip3); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(6, cmd.getAnswersCount()); // AnswersCount is clearly wrong as it doesn't know enough to tell return cmd; }#generate ip assoc vpc command#generateIpAssocVpcCommand#274#291#18#0#16#6#8#61#1#74#1
^{ String url = new File("pom.xml").toURI().toURL().toString(); TemplateDownloader td = new LocalTemplateDownloader(null, url, System.getProperty("java.io.tmpdir"), TemplateDownloader.DEFAULT_MAX_TEMPLATE_SIZE_IN_BYTES, null); long bytes = td.download(true, null); if (!(bytes > 0)) { fail("Failed download"); } }#local template downloader test#localTemplateDownloaderTest#31#37#7#0#8#3#1#16#0#27#2
^{ processor = Mockito.spy(new VhdProcessor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("VHD Processor", params); }#set up#setUp#47#52#6#0#5#1#3#10#0#29#1
^{ processor = PowerMockito.spy(new OVAProcessor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("OVA Processor", params); }#set up#setUp#48#53#6#0#5#1#3#10#0#29#1
^{ processor = Mockito.spy(new QCOW2Processor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("VHD Processor", params); }#set up#setUp#44#49#6#0#5#1#3#10#0#29#1
^{ return data; }#get data#getData#37#38#2#0#0#0#0#1#0#3#1
^{ super(); }#create object answer#CreateObjectAnswer#28#29#2#0#1#0#1#1#0#2#1
^{ super(); this.data = data; }#create object answer#CreateObjectAnswer#32#34#3#1#1#1#2#2#0#8#1
^{ super(null, false, errMsg); }#create object answer#CreateObjectAnswer#41#42#2#1#1#1#1#4#0#5#1
^{ return controllerInfo; }#get controller info#getControllerInfo#44#45#2#0#0#0#0#1#0#6#1
^{ this.controllerInfo = controllerInfo; }#set controller info#setControllerInfo#47#48#2#1#0#1#1#1#0#11#1
^{ return false; }#execute in sequence#executeInSequence#51#53#3#0#0#0#0#1#0#3#1
^{ return disk; }#get disk#getDisk#56#57#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#60#61#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#64#65#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#68#69#2#1#0#1#1#1#0#8#1
^{ this.inSeq = inSeq; }#set execute in sequence#setExecuteInSequence#72#74#3#1#0#1#1#1#0#9#1
^{ super(); this.disk = disk; this.vmName = vmName; }#attach command#AttachCommand#32#35#4#2#1#2#3#3#0#14#1
^{ super(); this.disk = disk; this.vmName = vmName; this.controllerInfo = controllerInfo; }#attach command#AttachCommand#37#41#5#3#1#3#4#4#0#23#1
^{ return jobId; }#get job id#getJobId#41#42#2#0#0#0#0#1#0#3#1
^{ this.request = request; }#set request#setRequest#45#46#2#1#0#1#1#1#0#8#1
^{ return request; }#get request#getRequest#49#50#2#0#0#0#0#1#0#3#1
^{ super(); }#download progress command#DownloadProgressCommand#30#31#2#0#1#0#1#1#0#2#1
^{ super(cmd); this.jobId = jobId; this.setRequest(req); }#download progress command#DownloadProgressCommand#34#38#5#3#2#3#3#5#0#17#1
^{ return dataStore; }#get data store#getDataStore#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ super(); dataStore = uri; }#create primary data store cmd#CreatePrimaryDataStoreCmd#26#28#3#1#1#1#2#2#0#6#1
^{ return destTO; }#get dest to#getDestTO#43#44#2#0#0#0#0#1#0#3#1
^{ this.srcTO = srcTO; }#set src to#setSrcTO#47#48#2#1#0#1#1#1#0#8#1
^{ this.destTO = destTO; }#set dest to#setDestTO#51#52#2#1#0#1#1#1#0#8#1
^{ return srcTO; }#get src to#getSrcTO#55#56#2#0#0#0#0#1#0#3#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#4#1
^{ return cacheTO; }#get cache to#getCacheTO#64#65#2#0#0#0#0#1#0#3#1
^{ this.cacheTO = cacheTO; }#set cache to#setCacheTO#68#69#2#1#0#1#1#1#0#8#1
^{ return getWait() * 1000; }#get wait in mill seconds#getWaitInMillSeconds#72#73#2#0#1#0#0#1#0#3#1
^{ this.options = options; }#set options#setOptions#76#77#2#1#0#1#1#1#0#11#1
^{ return options; }#get options#getOptions#80#81#2#0#0#0#0#1#0#6#1
^{ this.options2 = options2; }#set options 2#setOptions2#84#85#2#1#0#1#1#1#0#11#1
^{ return options2; }#get options 2#getOptions2#88#89#2#0#0#0#0#1#0#6#1
^{ executeInSequence = inSeq; }#set execute in sequence#setExecuteInSequence#92#94#3#1#0#1#1#1#0#7#1
^{ super(); srcTO = srcData; destTO = destData; setWait(timeout); this.executeInSequence = executeInSequence; }#copy command#CopyCommand#35#40#6#4#2#4#5#6#0#20#1
^{ return dataStore; }#get data store#getDataStore#36#37#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#40#42#3#0#0#0#0#1#0#3#1
^{ super(); dataStore = uri; }#attach primary data store cmd#AttachPrimaryDataStoreCmd#31#33#3#1#1#1#2#2#0#6#1
^{ return dataTO; }#get data to#getDataTO#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ dataTO = data; }#forget object cmd#ForgetObjectCmd#27#28#2#1#0#1#1#1#0#5#1
^{ return this.newData; }#get new data#getNewData#33#34#2#0#0#0#0#1#0#5#1
^{ super(null); this.newData = newData; }#copy cmd answer#CopyCmdAnswer#28#30#3#1#1#1#2#3#0#8#1
^{ super(null, false, errMsg); }#copy cmd answer#CopyCmdAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return false; }#execute in sequence#executeInSequence#38#40#3#0#0#0#0#1#0#3#1
^{ return disk; }#get disk#getDisk#43#44#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#47#48#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#51#52#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#55#56#2#1#0#1#1#1#0#8#1
^{ _managed = managed; }#set managed#setManaged#59#60#2#1#0#1#1#1#0#6#1
^{ return _managed; }#is managed#isManaged#63#64#2#0#0#0#0#1#0#3#1
^{ _iScsiName = iScsiName; }#set i scsi name#set_iScsiName#67#68#2#1#0#1#1#1#0#6#1
^{ return _iScsiName; }#get i scsi name#get_iScsiName#71#72#2#0#0#0#0#1#0#3#1
^{ _storageHost = storageHost; }#set storage host#setStorageHost#75#76#2#1#0#1#1#1#0#6#1
^{ return _storageHost; }#get storage host#getStorageHost#79#80#2#0#0#0#0#1#0#3#1
^{ _storagePort = storagePort; }#set storage port#setStoragePort#83#84#2#1#0#1#1#1#0#6#1
^{ return _storagePort; }#get storage port#getStoragePort#87#88#2#0#0#0#0#1#0#3#1
^{ super(); this.disk = disk; this.vmName = vmName; }#dettach command#DettachCommand#32#35#4#2#1#2#3#3#0#14#1
^{ this.size = size; }#set size#setSize#37#38#2#1#0#1#1#1#0#8#1
^{ return size; }#get size#getSize#41#42#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#45#46#2#1#0#1#1#1#0#8#1
^{ return path; }#get path#getPath#49#50#2#0#0#0#0#1#0#3#1
^{ this.format = format; }#set format#setFormat#53#54#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#57#58#2#0#0#0#0#1#0#3#1
^{ super(null, false, errMsg); }#resignature answer#ResignatureAnswer#33#34#2#1#1#1#1#4#0#5#1
^{ _path = path; }#set path#setPath#34#35#2#1#0#1#1#1#0#6#1
^{ return _path; }#get path#getPath#38#39#2#0#0#0#0#1#0#3#1
^{ super(null, false, errMsg); }#snapshot and copy answer#SnapshotAndCopyAnswer#30#31#2#1#1#1#1#4#0#5#1
^{ return _uuidOfSourceVdi; }#get uuid of source vdi#getUuidOfSourceVdi#37#38#2#0#0#0#0#1#0#3#1
^{ return _sourceDetails; }#get source details#getSourceDetails#41#42#2#0#0#0#0#1#0#6#1
^{ return _destDetails; }#get dest details#getDestDetails#45#46#2#0#0#0#0#1#0#6#1
^{ _executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#49#51#3#1#0#1#1#1#0#7#1
^{ return _executeInSequence; }#execute in sequence#executeInSequence#54#56#3#0#0#0#0#1#0#4#1
^{ _uuidOfSourceVdi = uuidOfSourceVdi; _sourceDetails = sourceDetails; _destDetails = destDetails; }#snapshot and copy command#SnapshotAndCopyCommand#31#34#4#3#0#3#3#3#0#19#1
^{ return disk; }#get disk#getDisk#41#42#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#45#46#2#1#0#1#1#1#0#8#1
^{ super(null); }#attach answer#AttachAnswer#28#29#2#0#1#0#1#2#0#2#1
^{ super(null); setDisk(disk); }#attach answer#AttachAnswer#32#34#3#1#2#1#2#4#0#6#1
^{ super(null, false, errMsg); }#attach answer#AttachAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return remoteEndPoint; }#get remote end point#getRemoteEndPoint#74#75#2#0#0#0#0#1#0#3#1
^{ this.remoteEndPoint = remoteEndPoint; }#set remote end point#setRemoteEndPoint#78#79#2#1#0#1#1#1#0#8#1
^{ return dataTo; }#get data to#getDataTo#82#83#2#0#0#0#0#1#0#3#1
^{ this.dataTo = dataTo; }#set data to#setDataTo#86#87#2#1#0#1#1#1#0#8#1
^{ return dataToRole; }#get data to role#getDataToRole#90#91#2#0#0#0#0#1#0#3#1
^{ this.dataToRole = dataToRole; }#set data to role#setDataToRole#94#95#2#1#0#1#1#1#0#8#1
^{ return localPath; }#get local path#getLocalPath#98#99#2#0#0#0#0#1#0#3#1
^{ this.localPath = localPath; }#set local path#setLocalPath#102#103#2#1#0#1#1#1#0#8#1
^{ return requiresHvm; }#get requires hvm#getRequiresHvm#106#107#2#0#0#0#0#1#0#3#1
^{ this.requiresHvm = requiresHvm; }#set requires hvm#setRequiresHvm#110#111#2#1#0#1#1#1#0#8#1
^{ return imageFormat; }#get image format#getImageFormat#114#115#2#0#0#0#0#1#0#3#1
^{ this.imageFormat = imageFormat; }#set image format#setImageFormat#118#119#2#1#0#1#1#1#0#8#1
^{ return entityId; }#get entity id#getEntityId#122#123#2#0#0#0#0#1#0#3#1
^{ this.entityId = entityId; }#set entity id#setEntityId#126#127#2#1#0#1#1#1#0#8#1
^{ return entityUUID; }#get entity uuid#getEntityUUID#130#131#2#0#0#0#0#1#0#3#1
^{ this.entityUUID = entityUUID; }#set entity uuid#setEntityUUID#134#135#2#1#0#1#1#1#0#8#1
^{ return absolutePath; }#get absolute path#getAbsolutePath#138#139#2#0#0#0#0#1#0#3#1
^{ this.absolutePath = absolutePath; }#set absolute path#setAbsolutePath#142#143#2#1#0#1#1#1#0#8#1
^{ return checksum; }#get checksum#getChecksum#146#147#2#0#0#0#0#1#0#3#1
^{ this.checksum = checksum; }#set checksum#setChecksum#150#151#2#1#0#1#1#1#0#8#1
^{ return type; }#get type#getType#154#155#2#0#0#0#0#1#0#3#1
^{ this.type = type; }#set type#setType#158#159#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#162#163#2#0#0#0#0#1#0#3#1
^{ this.name = name; }#set name#setName#166#167#2#1#0#1#1#1#0#8#1
^{ return maxUploadSize; }#get max upload size#getMaxUploadSize#170#171#2#0#0#0#0#1#0#3#1
^{ this.maxUploadSize = maxUploadSize; }#set max upload size#setMaxUploadSize#174#175#2#1#0#1#1#1#0#8#1
^{ return description; }#get description#getDescription#178#179#2#0#0#0#0#1#0#3#1
^{ this.description = description; }#set description#setDescription#182#183#2#1#0#1#1#1#0#8#1
^{ this.defaultMaxAccountSecondaryStorage = defaultMaxAccountSecondaryStorage; }#set default max account secondary storage#setDefaultMaxAccountSecondaryStorage#186#187#2#1#0#1#1#1#0#8#1
^{ return defaultMaxAccountSecondaryStorage; }#get default max account secondary storage#getDefaultMaxAccountSecondaryStorage#190#191#2#0#0#0#0#1#0#3#1
^{ this.accountId = accountId; }#set account id#setAccountId#194#195#2#1#0#1#1#1#0#8#1
^{ return accountId; }#get account id#getAccountId#198#199#2#0#0#0#0#1#0#3#1
^{ return nfsVersion; }#get nfs version#getNfsVersion#202#203#2#0#0#0#0#1#0#3#1
^{ this.nfsVersion = nfsVersion; }#set nfs version#setNfsVersion#206#207#2#1#0#1#1#1#0#8#1
^{ this.entityId = entityId; this.entityUUID = entityUUID; this.absolutePath = absolutePath; this.checksum = checksum; this.type = type; this.name = name; this.imageFormat = imageFormat; this.dataTo = dataTo; this.dataToRole = dataToRole; }#template or volume post upload command#TemplateOrVolumePostUploadCommand#58#68#11#9#0#9#9#9#0#55#1
^{ return disk; }#get disk#getDisk#41#42#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#45#46#2#1#0#1#1#1#0#8#1
^{ super(null); }#dettach answer#DettachAnswer#28#29#2#0#1#0#1#2#0#2#1
^{ super(null); setDisk(disk); }#dettach answer#DettachAnswer#32#34#3#1#2#1#2#4#0#6#1
^{ super(null, false, errMsg); }#dettach answer#DettachAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return false; }#execute in sequence#executeInSequence#36#38#3#0#0#0#0#1#0#3#1
^{ return data; }#get data#getData#41#42#2#0#0#0#0#1#0#3#1
^{ super(); data = obj; }#create object command#CreateObjectCommand#27#29#3#1#1#1#2#2#0#6#1
^{ super(); }#create object command#CreateObjectCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return status; }#get status#getStatus#53#54#2#0#0#0#0#1#0#3#1
^{ return virtualSize; }#get virtual size#getVirtualSize#57#58#2#0#0#0#0#1#0#3#1
^{ this.virtualSize = virtualSize; }#set virtual size#setVirtualSize#61#62#2#1#0#1#1#1#0#8#1
^{ return physicalSize; }#get physical size#getPhysicalSize#65#66#2#0#0#0#0#1#0#3#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#69#70#2#1#0#1#1#1#0#8#1
^{ return installPath; }#get install path#getInstallPath#73#74#2#0#0#0#0#1#0#3#1
^{ this.installPath = installPath; }#set install path#setInstallPath#77#78#2#1#0#1#1#1#0#8#1
^{ return downloadPercent; }#get download percent#getDownloadPercent#81#82#2#0#0#0#0#1#0#3#1
^{ this.downloadPercent = downloadPercent; }#set download percent#setDownloadPercent#85#86#2#1#0#1#1#1#0#8#1
^{ super(cmd, false, msg); this.status = status; }#upload status answer#UploadStatusAnswer#38#40#3#3#1#3#2#5#0#14#1
^{ super(cmd, false, e.getMessage()); this.status = UploadStatus.ERROR; }#upload status answer#UploadStatusAnswer#43#45#3#2#2#2#2#5#0#16#1
^{ super(cmd, true, null); this.status = status; }#upload status answer#UploadStatusAnswer#48#50#3#2#1#2#2#5#0#11#1
^{ return id; }#get id#getId#99#101#3#0#0#0#0#1#0#4#1
^{ this.hvm = hvm; }#set hvm#setHvm#104#105#2#1#0#1#1#1#0#8#1
^{ return hvm; }#is hvm#isHvm#108#109#2#0#0#0#0#1#0#3#1
^{ return description; }#get description#getDescription#112#113#2#0#0#0#0#1#0#3#1
^{ return checksum; }#get checksum#getChecksum#116#117#2#0#0#0#0#1#0#3#1
^{ this.description = description; }#set description#setDescription#120#121#2#1#0#1#1#1#0#8#1
^{ this.checksum = checksum; }#set checksum#setChecksum#124#125#2#1#0#1#1#1#0#8#1
^{ return false; }#execute in sequence#executeInSequence#128#130#3#0#0#0#0#1#0#3#1
^{ return auth; }#get auth#getAuth#133#134#2#0#0#0#0#1#0#3#1
^{ auth = new PasswordAuth(userName, passwd); }#set creds#setCreds#137#138#2#2#1#2#1#3#0#10#1
^{ return _proxy; }#get proxy#getProxy#141#142#2#0#0#0#0#1#0#3#1
^{ _proxy = proxy; }#set proxy#setProxy#145#146#2#1#0#1#1#1#0#6#1
^{ return maxDownloadSizeInBytes; }#get max download size in bytes#getMaxDownloadSizeInBytes#149#150#2#0#0#0#0#1#0#3#1
^{ return resourceType; }#get resource type#getResourceType#153#154#2#0#0#0#0#1#0#3#1
^{ this.resourceType = resourceType; }#set resource type#setResourceType#157#158#2#1#0#1#1#1#0#8#1
^{ return _store; }#get data store#getDataStore#161#162#2#0#0#0#0#1#0#3#1
^{ this._store = store; }#set data store#setDataStore#165#166#2#1#0#1#1#1#0#8#1
^{ return installPath; }#get install path#getInstallPath#169#170#2#0#0#0#0#1#0#3#1
^{ this.installPath = installPath; }#set install path#setInstallPath#173#174#2#1#0#1#1#1#0#8#1
^{ this.cacheStore = cacheStore; }#set cache store#setCacheStore#177#178#2#1#0#1#1#1#0#8#1
^{ return cacheStore; }#get cache store#getCacheStore#181#182#2#0#0#0#0#1#0#3#1
^{ super(that); hvm = that.hvm; checksum = that.checksum; id = that.id; description = that.description; auth = that.getAuth(); setSecUrl(that.getSecUrl()); maxDownloadSizeInBytes = that.getMaxDownloadSizeInBytes(); resourceType = that.resourceType; installPath = that.installPath; _store = that._store; _proxy = that._proxy; }#download command#DownloadCommand#54#66#13#1#5#1#12#14#0#49#1
^{ super(template.getName(), template.getOrigUrl(), template.getFormat(), template.getAccountId()); _store = template.getDataStore(); installPath = template.getPath(); hvm = template.isRequiresHvm(); checksum = template.getChecksum(); id = template.getId(); description = template.getDescription(); if (_store instanceof NfsTO) { setSecUrl(((NfsTO)_store).getUrl()); } this.maxDownloadSizeInBytes = maxDownloadSizeInBytes; }#download command#DownloadCommand#69#81#13#2#13#2#9#15#0#52#2
^{ this(template, maxDownloadSizeInBytes); auth = new PasswordAuth(user, passwd); }#download command#DownloadCommand#84#86#3#4#2#4#2#6#0#16#1
^{ super(volume.getName(), url, format, volume.getAccountId()); checksum = checkSum; id = volume.getVolumeId(); installPath = volume.getPath(); _store = volume.getDataStore(); this.maxDownloadSizeInBytes = maxDownloadSizeInBytes; resourceType = ResourceType.VOLUME; }#download command#DownloadCommand#89#96#8#5#6#5#7#11#0#42#1
^{ return dataTO; }#get data to#getDataTO#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ this.dataTO = dataTO; }#introduce object cmd#IntroduceObjectCmd#27#28#2#1#0#1#1#1#0#7#1
^{ return details; }#get details#getDetails#35#36#2#0#0#0#0#1#0#6#1
^{ this.executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#39#41#3#1#0#1#1#1#0#9#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#44#46#3#0#0#0#0#1#0#4#1
^{ this.details = Utils.getImmutableMap(details); }#resignature command#ResignatureCommand#31#32#2#1#1#1#1#2#0#13#1
^{ return dataTO; }#get data to#getDataTO#32#33#2#0#0#0#0#1#0#3#1
^{ this.dataTO = dataTO; }#introduce object answer#IntroduceObjectAnswer#28#29#2#1#0#1#1#1#0#7#1
^{ return entityUuid; }#get entity uuid#getEntityUuid#40#41#2#0#0#0#0#1#0#3#1
^{ return entityType; }#get entity type#getEntityType#44#45#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#48#50#3#0#0#0#0#1#0#3#1
^{ this.entityUuid = entityUuid; this.entityType = entityType; }#upload status command#UploadStatusCommand#35#37#3#2#0#2#2#2#0#13#1
^{ this.uuid = uuid; }#set uuid#setUuid#34#35#2#1#0#1#1#1#0#8#1
^{ return uuid; }#get uuid#getUuid#38#39#2#0#0#0#0#1#0#3#1
^{ this.capacity = capacity; }#set capacity#setCapacity#42#43#2#1#0#1#1#1#0#8#1
^{ return capacity; }#get capacity#getCapacity#46#47#2#0#0#0#0#1#0#3#1
^{ this.avail = avail; }#set available#setAvailable#50#51#2#1#0#1#1#1#0#8#1
^{ return avail; }#get available#getAvailable#54#55#2#0#0#0#0#1#0#3#1
^{ super(cmd); }#attach primary data store answer#AttachPrimaryDataStoreAnswer#30#31#2#1#1#1#1#2#0#5#1
^{ return false; }#execute in sequence#executeInSequence#36#38#3#0#0#0#0#1#0#3#1
^{ return data; }#get data#getData#41#42#2#0#0#0#0#1#0#3#1
^{ super(); this.data = data; }#delete command#DeleteCommand#27#29#3#1#1#1#2#2#0#8#1
^{ super(); }#delete command#DeleteCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return this.data; }#get data#getData#36#37#2#0#0#0#0#1#0#5#1
^{ _executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#40#42#3#1#0#1#1#1#0#7#1
^{ return _executeInSequence; }#execute in sequence#executeInSequence#45#47#3#0#0#0#0#1#0#4#1
^{ super(); this.data = data; }#revert snapshot command#RevertSnapshotCommand#27#29#3#1#1#1#2#2#0#8#1
^{ super(); }#revert snapshot command#RevertSnapshotCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return this.path; }#get path#getPath#82#84#3#0#0#0#0#1#0#6#1
^{ return this.uuid; }#get uuid#getUuid#87#88#2#0#0#0#0#1#0#5#1
^{ return id; }#get id#getId#91#93#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#96#97#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#100#101#2#0#0#0#0#1#0#3#1
^{ return accountId; }#get account id#getAccountId#104#105#2#0#0#0#0#1#0#3#1
^{ return checksum; }#get checksum#getChecksum#108#109#2#0#0#0#0#1#0#3#1
^{ return hvm; }#is requires hvm#isRequiresHvm#112#113#2#0#0#0#0#1#0#3#1
^{ this.hvm = hvm; }#set requires hvm#setRequiresHvm#116#117#2#1#0#1#1#1#0#8#1
^{ return displayText; }#get description#getDescription#120#121#2#0#0#0#0#1#0#3#1
^{ this.displayText = desc; }#set description#setDescription#124#125#2#1#0#1#1#1#0#8#1
^{ return DataObjectType.TEMPLATE; }#get object type#getObjectType#128#130#3#0#0#0#0#1#0#6#1
^{ return this.imageDataStore; }#get data store#getDataStore#133#135#3#0#0#0#0#1#0#6#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#138#139#2#1#0#1#1#1#0#10#1
^{ return this.hypervisorType; }#get hypervisor type#getHypervisorType#142#144#3#0#0#0#0#1#0#8#1
^{ this.imageDataStore = store; }#set data store#setDataStore#147#148#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#154#155#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#158#159#2#1#0#1#1#1#0#8#1
^{ this.uuid = uuid; }#set uuid#setUuid#162#163#2#1#0#1#1#1#0#8#1
^{ this.name = name; }#set name#setName#166#167#2#1#0#1#1#1#0#8#1
^{ return origUrl; }#get orig url#getOrigUrl#170#171#2#0#0#0#0#1#0#3#1
^{ this.origUrl = origUrl; }#set orig url#setOrigUrl#174#175#2#1#0#1#1#1#0#8#1
^{ this.format = format; }#set format#setFormat#178#179#2#1#0#1#1#1#0#8#1
^{ this.accountId = accountId; }#set account id#setAccountId#182#183#2#1#0#1#1#1#0#8#1
^{ this.checksum = checksum; }#set checksum#setChecksum#186#187#2#1#0#1#1#1#0#8#1
^{ this.imageDataStore = imageDataStore; }#set image data store#setImageDataStore#190#191#2#1#0#1#1#1#0#8#1
^{ return guestOsType; }#get guest os type#getGuestOsType#194#195#2#0#0#0#0#1#0#3#1
^{ this.guestOsType = guestOsType; }#set guest os type#setGuestOsType#198#199#2#1#0#1#1#1#0#8#1
^{ return size; }#get size#getSize#202#203#2#0#0#0#0#1#0#3#1
^{ this.size = size; }#set size#setSize#206#207#2#1#0#1#1#1#0#8#1
^{ return physicalSize; }#get physical size#getPhysicalSize#210#211#2#0#0#0#0#1#0#3#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#214#215#2#1#0#1#1#1#0#8#1
^{ return new StringBuilder("TemplateTO[id=").append(id).append("|origUrl=").append(origUrl).append("|name").append(name).append("]").toString(); }#to string#toString#218#220#3#0#8#0#0#8#0#14#1
^{ this.uuid = template.getUuid(); this.id = template.getId(); this.origUrl = template.getUrl(); this.displayText = template.getDisplayText(); this.checksum = template.getChecksum(); this.hvm = template.isRequiresHvm(); this.accountId = template.getAccountId(); this.name = template.getUniqueName(); this.format = template.getFormat(); this.hypervisorType = template.getHypervisorType(); }#template object to#TemplateObjectTO#52#62#11#1#10#1#10#10#0#63#1
^{ this.path = template.getInstallPath(); this.uuid = template.getUuid(); this.id = template.getId(); this.origUrl = template.getUrl(); this.displayText = template.getDisplayText(); this.checksum = template.getChecksum(); this.hvm = template.isRequiresHvm(); this.accountId = template.getAccountId(); this.name = template.getUniqueName(); this.format = template.getFormat(); if (template.getDataStore() != null) { this.imageDataStore = template.getDataStore().getTO(); } this.hypervisorType = template.getHypervisorType(); }#template object to#TemplateObjectTO#65#79#15#1#14#1#12#13#0#79#2
^{ return DataObjectType.SNAPSHOT; }#get object type#getObjectType#78#80#3#0#0#0#0#1#0#6#1
^{ return this.dataStore; }#get data store#getDataStore#83#85#3#0#0#0#0#1#0#6#1
^{ this.dataStore = store; }#set data store#setDataStore#88#89#2#1#0#1#1#1#0#8#1
^{ return this.path; }#get path#getPath#92#94#3#0#0#0#0#1#0#6#1
^{ this.path = path; }#set path#setPath#97#98#2#1#0#1#1#1#0#8#1
^{ return this.physicalSize; }#get physical size#getPhysicalSize#101#102#2#0#0#0#0#1#0#5#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#105#106#2#1#0#1#1#1#0#8#1
^{ return volume; }#get volume#getVolume#109#110#2#0#0#0#0#1#0#3#1
^{ this.volume = volume; }#set volume#setVolume#113#114#2#1#0#1#1#1#0#8#1
^{ return parentSnapshotPath; }#get parent snapshot path#getParentSnapshotPath#117#118#2#0#0#0#0#1#0#3#1
^{ this.parentSnapshotPath = parentSnapshotPath; }#set parent snapshot path#setParentSnapshotPath#121#122#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#125#126#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#129#130#2#1#0#1#1#1#0#8#1
^{ return id; }#get id#getId#133#135#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#138#139#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#142#143#2#0#0#0#0#1#0#3#1
^{ this.name = name; }#set name#setName#146#147#2#1#0#1#1#1#0#8#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#150#152#3#0#0#0#0#1#0#4#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#155#156#2#1#0#1#1#1#0#8#1
^{ return this.quiescevm; }#getquiescevm#getquiescevm#159#160#2#0#0#0#0#1#0#5#1
^{ this.quiescevm = quiescevm; }#set quiescevm#setQuiescevm#163#164#2#1#0#1#1#1#0#8#1
^{ return parents; }#get parents#getParents#167#168#2#0#0#0#0#1#0#3#1
^{ return new StringBuilder("SnapshotTO[datastore=").append(dataStore).append("|volume=").append(volume).append("|path").append(path).append("]").toString(); }#to string#toString#171#173#3#0#8#0#0#8#0#14#1
^{ this.path = snapshot.getPath(); this.setId(snapshot.getId()); VolumeInfo vol = snapshot.getBaseVolume(); if (vol != null) { this.volume = (VolumeObjectTO)vol.getTO(); this.setVmName(vol.getAttachedVmName()); } SnapshotInfo parentSnapshot = snapshot.getParent(); ArrayList<String> parentsArry = new ArrayList<String>(); if (parentSnapshot != null) { this.parentSnapshotPath = parentSnapshot.getPath(); while(parentSnapshot != null) { parentsArry.add(parentSnapshot.getPath()); parentSnapshot = parentSnapshot.getParent(); } parents = parentsArry.toArray(new String[parentsArry.size()]); ArrayUtils.reverse(parents); } this.dataStore = snapshot.getDataStore().getTO(); this.setName(snapshot.getName()); this.hypervisorType = snapshot.getHypervisorType(); this.quiescevm = false; }#snapshot object to#SnapshotObjectTO#51#75#25#1#21#4#13#26#0#99#4
^{ return this.type; }#get protocol#getProtocol#46#47#2#0#0#0#0#1#0#5#1
^{ return this.uri; }#get uri#getUri#50#51#2#0#0#0#0#1#0#5#1
^{ return providerName; }#get provider name#getProviderName#54#55#2#0#0#0#0#1#0#3#1
^{ this.type = type; }#set type#setType#58#59#2#1#0#1#1#1#0#8#1
^{ this.uri = uri; }#set uri#setUri#62#63#2#1#0#1#1#1#0#8#1
^{ this.providerName = providerName; }#set provider name#setProviderName#66#67#2#1#0#1#1#1#0#8#1
^{ this.role = role; }#set role#setRole#70#71#2#1#0#1#1#1#0#8#1
^{ return this.role; }#get role#getRole#74#76#3#0#0#0#0#1#0#6#1
^{ return new StringBuilder("ImageStoreTO[type=").append(type).append("|provider=").append(providerName).append("|role=").append(role).append("|uri=").append(uri).append("]").toString(); }#to string#toString#79#89#11#0#10#0#0#10#0#17#1
^{ return uuid; }#get uuid#getUuid#92#94#3#0#0#0#0#1#0#4#1
^{ return getUri(); }#get url#getUrl#97#99#3#0#1#0#0#1#0#4#1
^{ this.uuid = uuid; }#set uuid#setUuid#102#103#2#1#0#1#1#1#0#8#1
^{ return pathSeparator; }#get path separator#getPathSeparator#106#108#3#0#0#0#0#1#0#4#1
^{ this.type = dataStore.getType(); this.uri = dataStore.getUri(); this.providerName = null; this.role = dataStore.getRole(); }#image store to#ImageStoreTO#39#43#5#1#3#1#4#4#0#24#1
^{ return this.id; }#get id#getId#69#70#2#0#0#0#0#1#0#5#1
^{ return this.uuid; }#get uuid#getUuid#73#75#3#0#0#0#0#1#0#6#1
^{ return this.url; }#get url#getUrl#78#80#3#0#0#0#0#1#0#6#1
^{ return this.details; }#get details#getDetails#83#84#2#0#0#0#0#1#0#8#1
^{ return this.name; }#get name#getName#87#88#2#0#0#0#0#1#0#5#1
^{ return this.type; }#get type#getType#91#92#2#0#0#0#0#1#0#5#1
^{ return DataStoreRole.Primary; }#get role#getRole#95#97#3#0#0#0#0#1#0#6#1
^{ return poolType; }#get pool type#getPoolType#100#101#2#0#0#0#0#1#0#3#1
^{ this.poolType = poolType; }#set pool type#setPoolType#104#105#2#1#0#1#1#1#0#8#1
^{ return host; }#get host#getHost#108#109#2#0#0#0#0#1#0#3#1
^{ this.host = host; }#set host#setHost#112#113#2#1#0#1#1#1#0#8#1
^{ return path; }#get path#getPath#116#117#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#120#121#2#1#0#1#1#1#0#8#1
^{ return port; }#get port#getPort#124#125#2#0#0#0#0#1#0#3#1
^{ this.port = port; }#set port#setPort#128#129#2#1#0#1#1#1#0#8#1
^{ return pathSeparator; }#get path separator#getPathSeparator#132#134#3#0#0#0#0#1#0#4#1
^{ return new StringBuilder("PrimaryDataStoreTO[uuid=").append(uuid).append("|name=").append(name).append("|id=").append(id).append("|pooltype=").append(poolType).append("]").toString(); }#to string#toString#137#147#11#0#10#0#0#10#0#17#1
^{ return fullCloneFlag; }#is full clone flag#isFullCloneFlag#150#151#2#0#0#0#0#1#0#3#1
^{ this.fullCloneFlag = fullCloneFlag; }#set full clone flag#setFullCloneFlag#154#155#2#1#0#1#1#1#0#8#1
^{ return isManaged; }#is managed#isManaged#158#159#2#0#0#0#0#1#0#3#1
^{ this.uuid = dataStore.getUuid(); this.name = dataStore.getName(); this.id = dataStore.getId(); this.setPoolType(dataStore.getPoolType()); this.setHost(dataStore.getHostAddress()); this.setPath(dataStore.getPath()); this.setPort(dataStore.getPort()); this.url = dataStore.getUri(); this.details = dataStore.getDetails(); this.isManaged = dataStore.isManaged(); }#primary data store to#PrimaryDataStoreTO#56#66#11#1#14#1#10#14#0#63#1
^{ return uuid; }#get uuid#getUuid#86#87#2#0#0#0#0#1#0#3#1
^{ return path; }#get path#getPath#90#92#3#0#0#0#0#1#0#4#1
^{ return volumeType; }#get volume type#getVolumeType#95#96#2#0#0#0#0#1#0#5#1
^{ return dataStore; }#get data store#getDataStore#99#101#3#0#0#0#0#1#0#4#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#104#106#3#0#0#0#0#1#0#6#1
^{ dataStore = store; }#set data store#setDataStore#109#110#2#1#0#1#1#1#0#6#1
^{ this.dataStore = dataStore; }#set data store#setDataStore#113#114#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#117#118#2#0#0#0#0#1#0#3#1
^{ return size; }#get size#getSize#121#122#2#0#0#0#0#1#0#3#1
^{ return DataObjectType.VOLUME; }#get object type#getObjectType#125#127#3#0#0#0#0#1#0#6#1
^{ this.uuid = uuid; }#set uuid#setUuid#130#131#2#1#0#1#1#1#0#8#1
^{ this.name = name; }#set name#setName#134#135#2#1#0#1#1#1#0#8#1
^{ this.size = size; }#set size#setSize#138#139#2#1#0#1#1#1#0#8#1
^{ this.path = path; }#set path#setPath#142#143#2#1#0#1#1#1#0#8#1
^{ return volumeId; }#get volume id#getVolumeId#146#147#2#0#0#0#0#1#0#3#1
^{ this.volumeId = volumeId; }#set volume id#setVolumeId#150#151#2#1#0#1#1#1#0#8#1
^{ return accountId; }#get account id#getAccountId#154#155#2#0#0#0#0#1#0#3#1
^{ this.accountId = accountId; }#set account id#setAccountId#158#159#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#162#163#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#166#167#2#1#0#1#1#1#0#8#1
^{ return chainInfo; }#get chain info#getChainInfo#170#171#2#0#0#0#0#1#0#3#1
^{ this.chainInfo = chainInfo; }#set chain info#setChainInfo#174#175#2#1#0#1#1#1#0#8#1
^{ return id; }#get id#getId#178#180#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#183#184#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#187#188#2#0#0#0#0#1#0#5#1
^{ this.format = format; }#set format#setFormat#191#192#2#1#0#1#1#1#0#10#1
^{ return provisioningType; }#get provisioning type#getProvisioningType#195#196#2#0#0#0#0#1#0#5#1
^{ this.provisioningType = provisioningType; }#set provisioning type#setProvisioningType#199#200#2#1#0#1#1#1#0#10#1
^{ return new StringBuilder("volumeTO[uuid=").append(uuid).append("|path=").append(path).append("|datastore=").append(dataStore).append("]").toString(); }#to string#toString#203#205#3#0#8#0#0#8#0#14#1
^{ this.bytesReadRate = bytesReadRate; }#set bytes read rate#setBytesReadRate#208#209#2#1#0#1#1#1#0#8#1
^{ return bytesReadRate; }#get bytes read rate#getBytesReadRate#212#213#2#0#0#0#0#1#0#3#1
^{ this.bytesWriteRate = bytesWriteRate; }#set bytes write rate#setBytesWriteRate#216#217#2#1#0#1#1#1#0#8#1
^{ return bytesWriteRate; }#get bytes write rate#getBytesWriteRate#220#221#2#0#0#0#0#1#0#3#1
^{ this.iopsReadRate = iopsReadRate; }#set iops read rate#setIopsReadRate#224#225#2#1#0#1#1#1#0#8#1
^{ return iopsReadRate; }#get iops read rate#getIopsReadRate#228#229#2#0#0#0#0#1#0#3#1
^{ this.iopsWriteRate = iopsWriteRate; }#set iops write rate#setIopsWriteRate#232#233#2#1#0#1#1#1#0#8#1
^{ return iopsWriteRate; }#get iops write rate#getIopsWriteRate#236#237#2#0#0#0#0#1#0#3#1
^{ return deviceId; }#get device id#getDeviceId#240#241#2#0#0#0#0#1#0#3#1
^{ this.deviceId = deviceId; }#set device id#setDeviceId#244#245#2#1#0#1#1#1#0#8#1
^{ this.cacheMode = cacheMode; }#set cache mode#setCacheMode#248#249#2#1#0#1#1#1#0#8#1
^{ return cacheMode; }#get cache mode#getCacheMode#252#253#2#0#0#0#0#1#0#3#1
^{ uuid = volume.getUuid(); path = volume.getPath(); accountId = volume.getAccountId(); if (volume.getDataStore() != null) { dataStore = volume.getDataStore().getTO(); } else { dataStore = null; } vmName = volume.getAttachedVmName(); size = volume.getSize(); setVolumeId(volume.getId()); chainInfo = volume.getChainInfo(); volumeType = volume.getVolumeType(); name = volume.getName(); setId(volume.getId()); format = volume.getFormat(); provisioningType = volume.getProvisioningType(); bytesReadRate = volume.getBytesReadRate(); bytesWriteRate = volume.getBytesWriteRate(); iopsReadRate = volume.getIopsReadRate(); iopsWriteRate = volume.getIopsWriteRate(); cacheMode = volume.getCacheMode(); hypervisorType = volume.getHypervisorType(); setDeviceId(volume.getDeviceId()); }#volume object to#VolumeObjectTO#59#83#25#1#25#1#21#25#0#88#2
^{ if (result != null) { Class<?> clz = result.getClass(); Gson gson = GsonHelper.getGson(); return clz.getName() + token + gson.toJson(result); } return null; }#to serialized string old#toSerializedStringOld#44#50#7#1#4#3#0#6#0#25#2
^{ try { if (result != null && !result.isEmpty()) { String serializedParts = result.split(token); if (serializedParts.length < 2) { return null; } String clzName = serializedParts[0]; String nameField = null; String content = null; if (serializedParts.length == 2) { content = serializedParts[1]; } else { nameField = serializedParts[1]; int index = result.indexOf(token + nameField + token); content = result.substring(index + nameField.length() + 2); } Class<?> clz; try { clz = Class.forName(clzName); } catch (ClassNotFoundException e) { return null; } Gson gson = GsonHelper.getGson(); Object obj = gson.fromJson(content, clz); return obj; } return null; } catch (RuntimeException e) { s_logger.error("Caught runtime exception when doing GSON deserialization on: " + result); throw e; } }#from serialized string#fromSerializedString#53#87#35#1#9#11#5#30#0#81#4
^{ List<Pair<String, Object>> l = new ArrayList<Pair<String, Object>>(); return appendPairList(l, o, name); }#to pair list#toPairList#91#93#3#2#2#3#0#5#0#28#1
^{ if (o != null) { Class<?> clz = o.getClass(); if (clz.isPrimitive() || clz.getSuperclass() == Number.class || clz == String.class || clz == Date.class) { l.add(new Pair<String, Object>(name, o.toString())); return l; } for (Field f : clz.getDeclaredFields()) { if ((f.getModifiers() & Modifier.STATIC) != 0) { continue; } Param param = f.getAnnotation(Param.class); if (param == null) { continue; } String propName = f.getName(); if (!param.propName().isEmpty()) { propName = param.propName(); } String paramName = param.name(); if (paramName.isEmpty()) { paramName = propName; } Method method = getGetMethod(o, propName); if (method != null) { try { Object fieldValue = method.invoke(o); if (fieldValue != null) { if (f.getType() == Date.class) { l.add(new Pair<String, Object>(paramName, DateUtil.getOutputString((Date)fieldValue))); } else { l.add(new Pair<String, Object>(paramName, fieldValue.toString())); } } //else // l.add(new Pair<String, Object>(paramName, "")); } catch (IllegalArgumentException e) { s_logger.error("Illegal argument exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (IllegalAccessException e) { s_logger.error("Illegal access exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (InvocationTargetException e) { s_logger.error("Invocation target exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } } } } return l; }#append pair list#appendPairList#96#149#54#3#33#13#8#43#2#172#11
^{ Method method = null; String methodName = getGetMethodName("get", propName); try { method = o.getClass().getMethod(methodName); } catch (SecurityException e1) { s_logger.error("Security exception in getting POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (NoSuchMethodException e1) { if (s_logger.isTraceEnabled()) { s_logger.trace("POJO " + o.getClass().getName() + " does not have " + methodName + "() method for property: " + propName + ", will check is-prefixed method to see if it is boolean property"); } } if (method != null) { return method; } methodName = getGetMethodName("is", propName); try { method = o.getClass().getMethod(methodName); } catch (SecurityException e1) { s_logger.error("Security exception in getting POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (NoSuchMethodException e1) { s_logger.warn("POJO " + o.getClass().getName() + " does not have " + methodName + "() method for property: " + propName); } return method; }#get get method#getGetMethod#152#178#27#2#19#8#7#23#0#75#3
^{ StringBuffer sb = new StringBuffer(prefix); if (fieldName.length() >= prefix.length() && fieldName.substring(0, prefix.length()).equals(prefix)) { return fieldName; } else { sb.append(fieldName.substring(0, 1).toUpperCase()); sb.append(fieldName.substring(1)); } return sb.toString(); }#get get method name#getGetMethodName#181#191#11#2#12#3#2#15#0#41#2
^{ return s_gson; }#get gson#getGson#80#81#2#0#0#0#0#1#0#3#1
^{ return s_gogger; }#get gson logger#getGsonLogger#84#85#2#0#0#0#0#1#0#3#1
^{ return s_logger; }#get logger#getLogger#88#89#2#0#0#0#0#1#0#3#1
^{ // Group the rules by publicip:publicport final Map<String, List<PortForwardingRuleTO>> pools = new HashMap<String, List<PortForwardingRuleTO>>(); for (final PortForwardingRuleTO rule : fwRules) { final StringBuilder sb = new StringBuilder(); final String poolName = sb.append(rule.getSrcIp().replace(".", "_")).append('-').append(rule.getSrcPortRange()[0]).toString(); if (!rule.revoked()) { List<PortForwardingRuleTO> fwList = pools.get(poolName); if (fwList == null) { fwList = new ArrayList<PortForwardingRuleTO>(); pools.put(poolName, fwList); } fwList.add(rule); } } final List<String> result = new ArrayList<String>(); result.addAll(Arrays.asList(globalSection)); result.add(blankLine); result.addAll(Arrays.asList(defaultsSection)); result.add(blankLine); if (pools.isEmpty()) { // haproxy cannot handle empty listen / frontend or backend, so add // a dummy listener // on port 9 result.addAll(Arrays.asList(defaultListen)); } result.add(blankLine); for (final Map.Entry<String, List<PortForwardingRuleTO>> e : pools.entrySet()) { final List<String> poolRules = getRulesForPool(e.getKey(), e.getValue()); result.addAll(poolRules); } return result.toArray(new String[result.size()]); }#generate configuration#generateConfiguration#53#91#39#1#32#9#10#46#4#144#6
^{ final PortForwardingRuleTO firstRule = fwRules.get(0); final String publicIP = firstRule.getSrcIp(); final String publicPort = Integer.toString(firstRule.getSrcPortRange()[0]); // FIXEME: String algorithm = firstRule.getAlgorithm(); final List<String> result = new ArrayList<String>(); // add line like this: "listen 65_37_141_30-80 65.37.141.30:80" StringBuilder sb = new StringBuilder(); sb.append("listen ").append(poolName).append(" ").append(publicIP).append(":").append(publicPort); result.add(sb.toString()); sb = new StringBuilder(); // FIXME sb.append("\t").append("balance ").append(algorithm); result.add(sb.toString()); if (publicPort.equals(NetUtils.HTTP_PORT) // && global option httpclose set (or maybe not in this spot???) ) { sb = new StringBuilder(); sb.append("\t").append("mode http"); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("option httpclose"); result.add(sb.toString()); } int i = 0; for (final PortForwardingRuleTO rule : fwRules) { // add line like this: "server 65_37_141_30-80_3 10.1.1.4:80 check" if (rule.revoked()) { continue; } sb = new StringBuilder(); sb.append("\t").append("server ").append(poolName).append("_").append(Integer.toString(i++)).append(" ").append(rule.getDstIp()).append(":").append(rule.getDstPortRange()[0]).append(" check"); result.add(sb.toString()); } result.add(blankLine); return result; }#get rules for pool#getRulesForPool#94#138#45#2#46#9#14#56#5#137#4
^{ int i = 0; if (lbTO.getStickinessPolicies() == null) { return null; } final StringBuilder sb = new StringBuilder(); for (final StickinessPolicyTO stickinessPolicy : lbTO.getStickinessPolicies()) { if (stickinessPolicy == null) { continue; } final List<Pair<String, String>> paramsList = stickinessPolicy.getParams(); i++; /* * cookie <name> [ rewrite | insert | prefix ] [ indirect ] [ nocache ] [ postonly ] [ domain <domain> ]* */ if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* Default Values */ String cookieName = null; // optional String mode = "insert "; // optional Boolean indirect = false; // optional Boolean nocache = false; // optional Boolean postonly = false; // optional StringBuilder domainSb = null; // optional for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("cookie-name".equalsIgnoreCase(key)) { cookieName = value; } if ("mode".equalsIgnoreCase(key)) { mode = value; } if ("domain".equalsIgnoreCase(key)) { if (domainSb == null) { domainSb = new StringBuilder(); } domainSb = domainSb.append("domain "); domainSb.append(value).append(" "); } if ("indirect".equalsIgnoreCase(key)) { indirect = true; } if ("nocache".equalsIgnoreCase(key)) { nocache = true; } if ("postonly".equalsIgnoreCase(key)) { postonly = true; } } if (cookieName == null) {// re-check all haproxy mandatory params final StringBuilder tempSb = new StringBuilder(); String srcip = lbTO.getSrcIp(); if (srcip == null) { srcip = "TESTCOOKIE"; } tempSb.append("lbcooki_").append(srcip.hashCode()).append("_").append(lbTO.getSrcPort()); cookieName = tempSb.toString(); } sb.append("\t").append("cookie ").append(cookieName).append(" ").append(mode).append(" "); if (indirect) { sb.append("indirect "); } if (nocache) { sb.append("nocache "); } if (postonly) { sb.append("postonly "); } if (domainSb != null) { sb.append(domainSb).append(" "); } } else if (StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* Default Values */ String tablesize = "200k"; // optional String expire = "30m"; // optional /* overwrite default values with the stick parameters */ for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("tablesize".equalsIgnoreCase(key)) { tablesize = value; } if ("expire".equalsIgnoreCase(key)) { expire = value; } } sb.append("\t").append("stick-table type ip size ").append(tablesize).append(" expire ").append(expire); sb.append("\n\t").append("stick on src"); } else if (StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* * FORMAT : appsession <cookie> len <length> timeout <holdtime> * [request-learn] [prefix] [mode * <path-parameters|query-string>] */ /* example: appsession JSESSIONID len 52 timeout 3h */ String cookieName = null; // optional String length = "52"; // optional String holdtime = "3h"; // optional String mode = null; // optional Boolean requestlearn = false; // optional Boolean prefix = false; // optional for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("cookie-name".equalsIgnoreCase(key)) { cookieName = value; } if ("length".equalsIgnoreCase(key)) { length = value; } if ("holdtime".equalsIgnoreCase(key)) { holdtime = value; } if ("mode".equalsIgnoreCase(key)) { mode = value; } if ("request-learn".equalsIgnoreCase(key)) { requestlearn = true; } if ("prefix".equalsIgnoreCase(key)) { prefix = true; } } if (cookieName == null) {// re-check all haproxy mandatory params final StringBuilder tempSb = new StringBuilder(); String srcip = lbTO.getSrcIp(); if (srcip == null) { srcip = "TESTCOOKIE"; } tempSb.append("appcookie_").append(srcip.hashCode()).append("_").append(lbTO.getSrcPort()); cookieName = tempSb.toString(); } sb.append("\t").append("appsession ").append(cookieName).append(" len ").append(length).append(" timeout ").append(holdtime).append(" "); if (prefix) { sb.append("prefix "); } if (requestlearn) { sb.append("request-learn").append(" "); } if (mode != null) { sb.append("mode ").append(mode).append(" "); } } else { /* * Error is silently swallowed. * Not supposed to reach here, validation of methods are * done at the higher layer */ s_logger.warn("Haproxy stickiness policy for lb rule: " + lbTO.getSrcIp() + ":" + lbTO.getSrcPort() + ": Not Applied, cause:invalid method "); return null; } } if (i == 0) { return null; } return sb.toString(); }#get lb sub rule for stickiness#getLbSubRuleForStickiness#302#466#165#1#91#32#35#163#23#327#37
^{ StringBuilder sb = new StringBuilder(); final String poolName = sb.append(lbTO.getSrcIp().replace(".", "_")).append('-').append(lbTO.getSrcPort()).toString(); final String publicIP = lbTO.getSrcIp(); final String publicPort = Integer.toString(lbTO.getSrcPort()); final String algorithm = lbTO.getAlgorithm(); final List<String> result = new ArrayList<String>(); // add line like this: "listen 65_37_141_30-80 65.37.141.30:80" sb = new StringBuilder(); sb.append("listen ").append(poolName).append(" ").append(publicIP).append(":").append(publicPort); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("balance ").append(algorithm); result.add(sb.toString()); int i = 0; Boolean destsAvailable = false; final String stickinessSubRule = getLbSubRuleForStickiness(lbTO); final List<String> dstSubRule = new ArrayList<String>(); final List<String> dstWithCookieSubRule = new ArrayList<String>(); for (final DestinationTO dest : lbTO.getDestinations()) { // add line like this: "server 65_37_141_30-80_3 10.1.1.4:80 check" if (dest.isRevoked()) { continue; } sb = new StringBuilder(); sb.append("\t").append("server ").append(poolName).append("_").append(Integer.toString(i++)).append(" ").append(dest.getDestIp()).append(":").append(dest.getDestPort()).append(" check"); if(lbTO.getLbProtocol() != null && lbTO.getLbProtocol().equals("tcp-proxy")) { sb.append(" send-proxy"); } dstSubRule.add(sb.toString()); if (stickinessSubRule != null) { sb.append(" cookie ").append(dest.getDestIp().replace(".", "_")).append('-').append(dest.getDestPort()).toString(); dstWithCookieSubRule.add(sb.toString()); } destsAvailable = true; } Boolean httpbasedStickiness = false; /* attach stickiness sub rule only if the destinations are available */ if (stickinessSubRule != null && destsAvailable == true) { for (final StickinessPolicyTO stickinessPolicy : lbTO.getStickinessPolicies()) { if (stickinessPolicy == null) { continue; } if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName()) || StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { httpbasedStickiness = true; } } if (httpbasedStickiness) { result.addAll(dstWithCookieSubRule); } else { result.addAll(dstSubRule); } result.add(stickinessSubRule); } else { result.addAll(dstSubRule); } if (stickinessSubRule != null && !destsAvailable) { s_logger.warn("Haproxy stickiness policy for lb rule: " + lbTO.getSrcIp() + ":" + lbTO.getSrcPort() + ": Not Applied, cause: backends are unavailable"); } if (publicPort.equals(NetUtils.HTTP_PORT) && !keepAliveEnabled || httpbasedStickiness) { sb = new StringBuilder(); sb.append("\t").append("mode http"); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("option httpclose"); result.add(sb.toString()); } result.add(blankLine); return result; }#get rules for pool#getRulesForPool#469#551#83#2#89#16#26#104#3#269#12
^{ final StringBuilder rule = new StringBuilder("\nlisten ").append(ruleName).append(" ").append(statsIp).append(":").append(lbCmd.lbStatsPort); // TODO DH: write test for this in both cases if (!lbCmd.keepAliveEnabled) { s_logger.info("Haproxy mode http enabled"); rule.append("\n\tmode http\n\toption httpclose"); } rule.append("\n\tstats enable\n\tstats uri ").append(lbCmd.lbStatsUri).append("\n\tstats realm Haproxy\\ Statistics\n\tstats auth ").append(lbCmd.lbStatsAuth); rule.append("\n"); final String result = rule.toString(); if (s_logger.isDebugEnabled()) { s_logger.debug("Haproxystats rule: " + result); } return result; }#generate stats rule#generateStatsRule#554#570#17#3#16#5#5#24#1#58#3
^{ final List<String> result = new ArrayList<String>(); final List<String> gSection = Arrays.asList(globalSection); // note that this is overwritten on the String in the static ArrayList<String> gSection.set(2, "\tmaxconn " + lbCmd.maxconn); // TODO DH: write test for this function final String pipesLine = "\tmaxpipes " + Long.toString(Long.parseLong(lbCmd.maxconn) / 4); gSection.set(3, pipesLine); if (s_logger.isDebugEnabled()) { for (final String s : gSection) { s_logger.debug("global section: " + s); } } result.addAll(gSection); // TODO decide under what circumstances these options are needed // result.add("\tnokqueue"); // result.add("\tnopoll"); result.add(blankLine); final List<String> dSection = Arrays.asList(defaultsSection); if (lbCmd.keepAliveEnabled) { dSection.set(7, "\tno option forceclose"); } if (s_logger.isDebugEnabled()) { for (final String s : dSection) { s_logger.debug("default section: " + s); } } result.addAll(dSection); if (!lbCmd.lbStatsVisibility.equals("disabled")) { /* new rule : listen admin_page guestip/link-local:8081 */ if (lbCmd.lbStatsVisibility.equals("global")) { result.add(generateStatsRule(lbCmd, "stats_on_public", lbCmd.lbStatsPublicIP)); } else if (lbCmd.lbStatsVisibility.equals("guest-network")) { result.add(generateStatsRule(lbCmd, "stats_on_guest", lbCmd.lbStatsGuestIP)); } else if (lbCmd.lbStatsVisibility.equals("link-local")) { result.add(generateStatsRule(lbCmd, "stats_on_private", lbCmd.lbStatsPrivateIP)); } else if (lbCmd.lbStatsVisibility.equals("all")) { result.add(generateStatsRule(lbCmd, "stats_on_public", lbCmd.lbStatsPublicIP)); result.add(generateStatsRule(lbCmd, "stats_on_guest", lbCmd.lbStatsGuestIP)); result.add(generateStatsRule(lbCmd, "stats_on_private", lbCmd.lbStatsPrivateIP)); } else { /* * stats will be available on the default http serving port, no * special stats port */ final StringBuilder subRule = new StringBuilder("\tstats enable\n\tstats uri ").append(lbCmd.lbStatsUri).append("\n\tstats realm Haproxy\\ Statistics\n\tstats auth ").append(lbCmd.lbStatsAuth); result.add(subRule.toString()); } } result.add(blankLine); boolean has_listener = false; for (final LoadBalancerTO lbTO : lbCmd.getLoadBalancers()) { if (lbTO.isRevoked()) { continue; } final List<String> poolRules = getRulesForPool(lbTO, lbCmd.keepAliveEnabled); result.addAll(poolRules); has_listener = true; } result.add(blankLine); if (!has_listener) { // haproxy cannot handle empty listen / frontend or backend, so add // a dummy listener // on port 9 result.addAll(Arrays.asList(defaultListen)); } return result.toArray(new String[result.size()]); }#generate configuration#generateConfiguration#573#646#74#1#48#11#20#99#10#221#14
^{ final String result = new String[3]; final Set<String> toAdd = new HashSet<String>(); final Set<String> toRemove = new HashSet<String>(); final Set<String> toStats = new HashSet<String>(); for (final LoadBalancerTO lbTO : lbCmd.getLoadBalancers()) { final StringBuilder sb = new StringBuilder(); sb.append(lbTO.getSrcIp()).append(":"); sb.append(lbTO.getSrcPort()).append(":"); final String lbRuleEntry = sb.toString(); if (!lbTO.isRevoked()) { toAdd.add(lbRuleEntry); } else { toRemove.add(lbRuleEntry); } } StringBuilder sb = new StringBuilder(""); if (lbCmd.lbStatsVisibility.equals("guest-network")) { sb = new StringBuilder(lbCmd.lbStatsGuestIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("link-local")) { sb = new StringBuilder(lbCmd.lbStatsPrivateIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("global")) { sb = new StringBuilder(lbCmd.lbStatsPublicIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("all")) { sb = new StringBuilder("0.0.0.0/0").append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } toStats.add(sb.toString()); toRemove.removeAll(toAdd); result[ADD] = toAdd.toArray(new String[toAdd.size()]); result[REMOVE] = toRemove.toArray(new String[toRemove.size()]); result[STATS] = toStats.toArray(new String[toStats.size()]); return result; }#generate fw rules#generateFwRules#649#685#37#1#53#9#13#74#0#192#7
^{ return deviceName; }#get device name#getDeviceName#48#49#2#0#0#0#0#1#0#3#1
^{ return providerName; }#get provider name#getProviderName#52#53#2#0#0#0#0#1#0#3#1
^{ return serverResource; }#get server resource#getServerResource#56#57#2#0#0#0#0#1#0#3#1
^{ return username; }#get username#getUsername#60#61#2#0#0#0#0#1#0#3#1
^{ return password; }#get password#getPassword#64#65#2#0#0#0#0#1#0#3#1
^{ return publicInterface; }#get public interface#getPublicInterface#68#69#2#0#0#0#0#1#0#3#1
^{ return privateInterface; }#get private interface#getPrivateInterface#72#73#2#0#0#0#0#1#0#3#1
^{ this.deviceName = deviceName; this.providerName = providerName; this.serverResource = serverResource; this.result = success; this.details = details; this.username = username; this.password = password; this.publicInterface = publicInterface; this.privateInterface = privateInterface; }#create load balancer appliance answer#CreateLoadBalancerApplianceAnswer#35#45#11#10#0#10#9#9#0#57#1
^{ this.result = success; this.details = details; }#destroy load balancer appliance answer#DestroyLoadBalancerApplianceAnswer#26#28#3#3#0#3#2#2#0#15#1
^{ try { _name = name; _zoneId = (String)params.get("zone"); if (_zoneId == null) { throw new ConfigurationException("Unable to find zone"); } _ip = (String)params.get("ipaddress"); if (_ip == null) { throw new ConfigurationException("Unable to find IP"); } _guid = (String)params.get("guid"); if (_guid == null) { throw new ConfigurationException("Unable to find the guid"); } _url = (String)params.get("url"); if (_url == null) { throw new ConfigurationException("Unable to find url"); } _inclZones = (String)params.get("inclZones"); _exclZones = (String)params.get("exclZones"); return true; } catch (Exception e) { throw new ConfigurationException(e.getMessage()); } }#configure#configure#69#100#32#2#12#3#7#29#0#57#5
^{ StartupTrafficMonitorCommand cmd = new StartupTrafficMonitorCommand(); cmd.setName(_name); cmd.setDataCenter(_zoneId); cmd.setPod(""); cmd.setPrivateIpAddress(_ip); cmd.setStorageIpAddress(""); cmd.setVersion(TrafficSentinelResource.class.getPackage().getImplementationVersion()); cmd.setGuid(_guid); return new StartupCommand {cmd}; }#initialize#initialize#105#115#11#0#10#1#7#17#0#40#1
^{ return Host.Type.TrafficMonitor; }#get type#getType#118#120#3#0#0#0#0#1#0#9#1
^{ return _name; }#get name#getName#123#125#3#0#0#0#0#1#0#4#1
^{ return new PingCommand(Host.Type.TrafficMonitor, id); }#get current status#getCurrentStatus#128#130#3#1#1#1#0#3#0#11#1
^{ return true; }#start#start#133#135#3#0#0#0#0#1#0#3#1
^{ return true; }#stop#stop#138#140#3#0#0#0#0#1#0#3#1
^{ return; }#disconnected#disconnected#143#145#3#0#0#0#0#0#0#3#1
^{ return null; }#get agent control#getAgentControl#148#150#3#0#0#0#0#1#0#3#1
^{ return; }#set agent control#setAgentControl#153#155#3#1#0#1#0#0#0#5#1
^{ if (cmd instanceof ReadyCommand) { return execute((ReadyCommand)cmd); } else if (cmd instanceof MaintainCommand) { return execute((MaintainCommand)cmd); } else if (cmd instanceof DirectNetworkUsageCommand) { return execute((DirectNetworkUsageCommand)cmd); } else if (cmd instanceof RecurringNetworkUsageCommand) { return execute((RecurringNetworkUsageCommand)cmd); } else { return Answer.createUnsupportedCommandAnswer(cmd); } }#execute request#executeRequest#158#169#12#1#5#1#0#14#0#29#5
^{ return new ReadyAnswer(cmd); }#execute#execute#173#174#2#1#1#1#0#2#0#6#1
^{ return new RecurringNetworkUsageAnswer(cmd); }#execute#execute#177#178#2#1#1#1#0#2#0#6#1
^{ try { return getPublicIpBytesSentAndReceived(cmd); } catch (ExecutionException e) { return new DirectNetworkUsageAnswer(cmd, e); } }#execute#execute#181#185#5#1#2#2#0#5#0#11#1
^{ return new MaintainAnswer(cmd); }#execute#execute#189#190#2#1#1#1#0#2#0#6#1
^{ DirectNetworkUsageAnswer answer = new DirectNetworkUsageAnswer(cmd); try { //Direct Network Usage URL trafficSentinel; //Use Global include/exclude zones if there are no per TS zones if (_inclZones == null) { _inclZones = cmd.getIncludeZones(); } if (_exclZones == null) { _exclZones = cmd.getExcludeZones(); } try { //Query traffic Sentinel trafficSentinel = new URL(_url + "/inmsf/Query?script=" + URLEncoder.encode(getScript(cmd.getPublicIps(), cmd.getStart(), cmd.getEnd()), "UTF-8") + "&authenticate=basic&resultFormat=txt"); BufferedReader in = new BufferedReader(new InputStreamReader(trafficSentinel.openStream())); String inputLine; while ((inputLine = in.readLine()) != null) { //Parse the script output StringTokenizer st = new StringTokenizer(inputLine, ","); if (st.countTokens() == 3) { String publicIp = st.nextToken(); Long bytesSent = new Long(st.nextToken()); Long bytesRcvd = new Long(st.nextToken()); long bytesSentAndReceived = new long[2]; bytesSentAndReceived[0] = bytesSent; bytesSentAndReceived[1] = bytesRcvd; answer.put(publicIp, bytesSentAndReceived); } } in.close(); } catch (MalformedURLException e1) { s_logger.info("Invalid Traffic Sentinel URL", e1); throw new ExecutionException(e1.getMessage()); } catch (IOException e) { s_logger.debug("Error in direct network usage accounting", e); throw new ExecutionException(e.getMessage()); } } catch (Exception e) { s_logger.debug(e); throw new ExecutionException(e.getMessage()); } return answer; }#get public ip bytes sent and received#getPublicIpBytesSentAndReceived#193#243#51#1#31#13#10#52#4#123#5
^{ String IpAddresses = ""; for (int i = 0; i < ips.size(); i++) { IpAddresses += ips.get(i); if (i != (ips.size() - 1)) { // Append comma for all Ips except the last Ip IpAddresses += ","; } } String destZoneCondition = ""; if (_inclZones != null && !_inclZones.isEmpty()) { destZoneCondition = " & destinationzone = " + _inclZones; } if (_exclZones != null && !_exclZones.isEmpty()) { destZoneCondition += " & destinationzone != " + _exclZones; } String srcZoneCondition = ""; if (_inclZones != null && !_inclZones.isEmpty()) { srcZoneCondition = " & sourcezone = " + _inclZones; } if (_exclZones != null && !_exclZones.isEmpty()) { srcZoneCondition += " & sourcezone != " + _exclZones; } String startDate = getDateString(start); String endtDate = getDateString(end); StringBuffer sb = new StringBuffer(); sb.append("var q = Query.topN(\"historytrmx\","); sb.append(" \"ipsource,bytes\","); sb.append(" \"ipsource = " + IpAddresses + destZoneCondition + "\","); sb.append(" \"" + startDate + ", " + endtDate + "\","); sb.append(" \"bytes\","); sb.append(" 100000);"); sb.append("var totalsSent = {};"); sb.append("var t = q.run("); sb.append(" function(row,table) {"); sb.append(" if(row[0]) { "); sb.append(" totalsSent[row[0]] = row[1];"); sb.append(" }"); sb.append(" });"); sb.append("var q = Query.topN(\"historytrmx\","); sb.append(" \"ipdestination,bytes\","); sb.append(" \"ipdestination = " + IpAddresses + srcZoneCondition + "\","); sb.append(" \"" + startDate + ", " + endtDate + "\","); sb.append(" \"bytes\","); sb.append(" 100000);"); sb.append("var totalsRcvd = {};"); sb.append("var t = q.run("); sb.append(" function(row,table) {"); sb.append(" if(row[0]) {"); sb.append(" totalsRcvd[row[0]] = row[1];"); sb.append(" }"); sb.append(" });"); sb.append("for (var addr in totalsSent) {"); sb.append(" var TS = 0;"); sb.append(" var TR = 0;"); sb.append(" if(totalsSent[addr]) TS = totalsSent[addr];"); sb.append(" if(totalsRcvd[addr]) TR = totalsRcvd[addr];"); sb.append(" println(addr + \",\" + TS + \",\" + TR);"); sb.append("}"); return sb.toString(); }#get script#getScript#246#307#62#3#44#10#39#90#1#178#7
^{ DateFormat dfDate = new SimpleDateFormat("yyyyMMdd HH:mm:ss"); return dfDate.format(date); }#get date string#getDateString#310#312#3#1#2#2#0#4#0#11#1
^{ // TODO Auto-generated method stub }#set name#setName#315#317#3#1#0#1#0#0#1#5#1
^{ // TODO Auto-generated method stub }#set config params#setConfigParams#321#323#3#1#0#1#0#0#1#8#1
^{ // TODO Auto-generated method stub return null; }#get config params#getConfigParams#327#330#4#0#0#0#0#1#1#6#1
^{ // TODO Auto-generated method stub return 0; }#get run level#getRunLevel#333#336#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub }#set run level#setRunLevel#339#341#3#1#0#1#0#0#1#5#1
^{ _gson = gson; }#init gson#initGson#43#44#2#1#0#1#1#1#0#6#1
^{ JsonObject obj = new JsonObject(); obj.add(src.getClass().getName(), _gson.toJsonTree(src)); return obj; }#serialize#serialize#47#51#5#3#5#4#1#6#0#24#1
^{ JsonObject element = (JsonObject)json; Map.Entry<String, JsonElement> entry = element.entrySet().iterator().next(); String name = entry.getKey(); Class<?> clazz; try { clazz = Class.forName(name); } catch (ClassNotFoundException e) { throw new CloudRuntimeException("can't find " + name); } return (T)_gson.fromJson(entry.getValue(), clazz); }#deserialize#deserialize#54#66#13#3#8#8#1#12#0#53#1
^{ Answer answers = getAnswers(); return answers[0]; }#get answer#getAnswer#54#56#3#0#1#1#0#3#0#7#1
^{ if (_cmds == null) { _cmds = s_gson.fromJson(_content, Answer.class); } return (Answer)_cmds; }#get answers#getAnswers#59#63#5#0#1#0#1#5#0#13#2
^{ return "Ans: "; }#get type#getType#66#68#3#0#0#0#0#1#0#3#1
^{ return (Response)Request.parse(bytes); }#parse#parse#71#72#2#1#1#1#0#4#0#12#1
^{ this(request, new Answer {answer}); }#response#Response#32#33#2#2#1#2#1#4#0#10#1
^{ this(request, new Answer {answer}, mgmtId, agentId); }#response#Response#36#37#2#4#1#4#1#6#0#16#1
^{ super(request, answers); }#response#Response#40#41#2#2#1#2#1#3#0#9#1
^{ super(request, answers); _mgmtId = mgmtId; _via = agentId; }#response#Response#44#47#4#4#1#4#3#5#0#17#1
^{ super(ver, seq, agentId, mgmtId, via, flags, ans); }#response#Response#50#51#2#7#1#7#1#8#0#23#1
^{ _gson = gson; }#init gson#initGson#47#48#2#1#0#1#1#1#0#6#1
^{ JsonArray array = new JsonArray(); for (T cmd : src) { JsonObject obj = new JsonObject(); obj.add(cmd.getClass().getName(), _gson.toJsonTree(cmd)); array.add(obj); } return array; }#serialize#serialize#51#60#10#3#7#6#2#10#0#35#2
^{ JsonArray array = json.getAsJsonArray(); Iterator<JsonElement> it = array.iterator(); ArrayList<T> cmds = new ArrayList<T>(); while (it.hasNext()) { JsonObject element = (JsonObject)it.next(); Map.Entry<String, JsonElement> entry = element.entrySet().iterator().next(); String name = entry.getKey(); Class<?> clazz; try { clazz = Class.forName(name); } catch (ClassNotFoundException e) { throw new CloudRuntimeException("can't find " + name); } T cmd = (T)_gson.fromJson(entry.getValue(), clazz); cmds.add(cmd); } Class<?> type = ((Class<?>)typeOfT).getComponentType(); T ts = (T)Array.newInstance(type, cmds.size()); return cmds.toArray(ts); }#deserialize#deserialize#63#85#23#3#18#14#2#24#0#107#2
^{ for (final Version version : Version.values()) { if (ver == version.ordinal()) { return version; } } throw new UnsupportedVersionException("Can't lookup version: " + ver, UnsupportedVersionException.UnknownVersion); }#get#get#88#94#7#1#3#2#0#7#0#20#3
^{ _seq = seq; }#set sequence#setSequence#155#156#2#1#0#1#1#1#0#6#1
^{ if (cmds == null) { return; } for (Command cmd : cmds) { if (cmd.executeInSequence()) { setInSequence(true); break; } } }#set in sequence#setInSequence#159#166#8#1#2#2#1#5#0#13#4
^{ _flags |= (stopOnError ? FLAG_STOP_ON_ERROR : 0); }#set stop on error#setStopOnError#184#185#2#1#0#1#1#1#0#7#1
^{ _agentName = agentName; }#set agent name#setAgentName#188#189#2#1#0#1#1#1#0#6#1
^{ _flags |= (inSequence ? FLAG_IN_SEQUENCE : 0); }#set in sequence#setInSequence#192#193#2#1#0#1#1#1#0#7#1
^{ return (_flags & FLAG_CONTROL) > 0; }#is control#isControl#196#197#2#0#0#0#0#1#0#4#1
^{ _flags |= (control ? FLAG_CONTROL : 0); }#set control#setControl#200#201#2#1#0#1#1#1#0#7#1
^{ _flags |= (fromServer ? FLAG_FROM_SERVER : 0); }#set from server#setFromServer#204#205#2#1#0#1#1#1#0#7#1
^{ return _mgmtId; }#get management server id#getManagementServerId#208#209#2#0#0#0#0#1#0#3#1
^{ return (_flags & FLAG_FROM_SERVER) > 0; }#is from server#isFromServer#212#213#2#0#0#0#0#1#0#4#1
^{ return _ver; }#get version#getVersion#216#217#2#0#0#0#0#1#0#3#1
^{ _agentId = agentId; }#set agent id#setAgentId#220#221#2#1#0#1#1#1#0#6#1
^{ _via = viaId; }#set via#setVia#224#225#2#1#0#1#1#1#0#6#1
^{ return (_flags & FLAG_IN_SEQUENCE) > 0; }#execute in sequence#executeInSequence#228#229#2#0#0#0#0#1#0#4#1
^{ return _seq; }#get sequence#getSequence#232#233#2#0#0#0#0#1#0#3#1
^{ return (_flags & FLAG_STOP_ON_ERROR) > 0; }#stop on error#stopOnError#236#237#2#0#0#0#0#1#0#4#1
^{ getCommands(); return _cmds[0]; }#get command#getCommand#240#242#3#0#1#0#1#3#0#5#1
^{ if (_cmds == null) { try { StringReader reader = new StringReader(_content); JsonReader jsonReader = new JsonReader(reader); jsonReader.setLenient(true); _cmds = s_gson.fromJson(jsonReader, (Type)Command.class); } catch (RuntimeException e) { s_logger.error("Caught problem with " + _content, e); throw e; } } return _cmds; }#get commands#getCommands#245#257#13#0#5#3#3#15#0#31#2
^{ return "Cmd "; }#get type#getType#260#261#2#0#0#0#0#1#0#2#1
^{ final ByteBuffer buffer = ByteBuffer.allocate(40); buffer.put(getVersionInByte()); buffer.put((byte)0); buffer.putShort(getFlags()); buffer.putLong(_seq); // The size here is uncompressed size, if the data is compressed. buffer.putInt(contentSize); buffer.putLong(_mgmtId); buffer.putLong(_agentId); buffer.putLong(_via); buffer.flip(); return buffer; }#serialize header#serializeHeader#264#277#14#1#12#2#9#20#1#45#1
^{ byte byteArrayIn = new byte[1024]; ByteArrayInputStream byteIn; if (buffer.hasArray()) { byteIn = new ByteArrayInputStream(buffer.array(), buffer.position() + buffer.arrayOffset(), buffer.remaining()); } else { byte array = new byte[buffer.limit() - buffer.position()]; buffer.get(array); byteIn = new ByteArrayInputStream(array); } ByteBuffer retBuff = ByteBuffer.allocate(length); int len = 0; try { GZIPInputStream in = new GZIPInputStream(byteIn); while ((len = in.read(byteArrayIn)) > 0) { retBuff.put(byteArrayIn, 0, len); } in.close(); } catch (IOException e) { s_logger.error("Fail to decompress the request!", e); } retBuff.flip(); return retBuff; }#do decompress#doDecompress#280#302#23#2#17#9#7#30#0#81#3
^{ ByteArrayOutputStream byteOut = new ByteArrayOutputStream(length); byte array; if (buffer.hasArray()) { array = buffer.array(); } else { array = new byte[buffer.capacity()]; buffer.get(array); } try { GZIPOutputStream out = new GZIPOutputStream(byteOut, length); out.write(array); out.finish(); out.close(); } catch (IOException e) { s_logger.error("Fail to compress the request!", e); } return ByteBuffer.wrap(byteOut.toByteArray()); }#do compress#doCompress#305#322#18#2#12#6#7#20#0#56#2
^{ final ByteBuffer buffers = new ByteBuffer[2]; ByteBuffer tmp; if (_content == null) { _content = s_gson.toJson(_cmds, _cmds.getClass()); } tmp = ByteBuffer.wrap(_content.getBytes()); int capacity = tmp.capacity(); /* Check if we need to compress the data */ if (capacity >= 8192) { tmp = doCompress(tmp, capacity); _flags |= FLAG_COMPRESSED; } buffers[1] = tmp; buffers[0] = serializeHeader(capacity); return buffers; }#to bytes#toBytes#325#342#18#0#7#3#6#20#1#44#3
^{ final ByteBuffer buffers = toBytes(); final int len1 = buffers[0].remaining(); final int len2 = buffers[1].remaining(); final byte bytes = new byte[len1 + len2]; buffers[0].get(bytes, 0, len1); buffers[1].get(bytes, len1, len2); return bytes; }#get bytes#getBytes#345#352#8#0#5#4#2#18#0#33#1
^{ return (byte)_ver.ordinal(); }#get version in byte#getVersionInByte#355#356#2#0#1#0#0#1#0#6#1
^{ return (short)(((this instanceof Response) ? FLAG_RESPONSE : FLAG_REQUEST) | _flags); }#get flags#getFlags#359#360#2#0#1#0#0#2#0#8#1
^{ logD(msg, true); }#log d#logD#363#364#2#1#1#1#1#3#0#6#1
^{ if (s_logger.isDebugEnabled()) { String log = log(msg, logContent, Level.DEBUG); if (log != null) { s_logger.debug(log); } } }#log d#logD#367#371#5#2#3#3#1#8#0#22#3
^{ if (s_logger.isTraceEnabled()) { String log = log(msg, true, Level.TRACE); if (log != null) { s_logger.trace(log); } } else if (logD && s_logger.isDebugEnabled()) { String log = log(msg, false, Level.DEBUG); if (log != null) { s_logger.debug(log); } } }#log t#logT#376#385#10#2#6#4#2#16#0#37#5
^{ return log("", true, Level.DEBUG); }#to string#toString#390#392#3#0#1#0#0#4#0#7#1
^{ StringBuilder content = new StringBuilder(); if (logContent) { if (_cmds == null) { try { _cmds = s_gson.fromJson(_content, this instanceof Response ? Answer.class : Command.class); } catch (RuntimeException e) { s_logger.error("Unable to deserialize from json: " + _content); throw e; } } try { s_gogger.toJson(_cmds, content); } catch (Throwable e) { StringBuilder buff = new StringBuilder(); for (Command cmd : _cmds) { buff.append(cmd.getClass().getSimpleName()).append("/"); } s_logger.error("Gson serialization error " + buff.toString(), e); assert false : "More gson errors on " + buff.toString(); return ""; } if (content.length() <= (1 + _cmds.length * 3)) { return null; } } else { if (_cmds == null) { _cmds = s_gson.fromJson(_content, this instanceof Response ? Answer.class : Command.class); } content.append("{ "); for (Command cmd : _cmds) { content.append(cmd.getClass().getSimpleName()).append(", "); } content.replace(content.length() - 2, content.length(), " }"); } StringBuilder buf = new StringBuilder("Seq "); buf.append(_agentId).append("-").append(_seq).append(": "); buf.append(msg); buf.append(" { ").append(getType()); if (_agentName != null) { buf.append(", MgmtId: ").append(_mgmtId).append(", via: ").append(_via).append("(" + _agentName + ")"); } else { buf.append(", MgmtId: ").append(_mgmtId).append(", via: ").append(_via); } buf.append(", Ver: ").append(_ver.toString()); buf.append(", Flags: ").append(Integer.toBinaryString(getFlags())).append(", "); String cleanContent = content.toString(); if(cleanContent.contains("password")) { buf.append(cleanPassword(cleanContent)); } else { buf.append(content); } buf.append(" }"); return buf.toString(); }#log#log#395#452#58#3#55#11#19#81#0#181#9
^{ String cleanLogString = null; if (logString != null) { cleanLogString = logString; String temp = logString.split(","); int i = 0; if (temp != null) { while (i < temp.length) { temp[i] = StringUtils.cleanString(temp[i]); i++; } List<String> stringList = new ArrayList<String>(); Collections.addAll(stringList, temp); cleanLogString = StringUtils.join(stringList, ","); } } return cleanLogString; }#clean password#cleanPassword#455#471#17#1#5#5#5#21#0#49#4
^{ ByteBuffer buff = ByteBuffer.wrap(bytes); final byte ver = buff.get(); final Version version = Version.get(ver); if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) { throw new UnsupportedVersionException("This version is no longer supported: " + version.toString(), UnsupportedVersionException.IncompatibleVersion); } buff.get(); final short flags = buff.getShort(); final boolean isRequest = (flags & FLAG_REQUEST) > 0; final long seq = buff.getLong(); // The size here is uncompressed size, if the data is compressed. final int size = buff.getInt(); final long mgmtId = buff.getLong(); final long agentId = buff.getLong(); long via; if (version.ordinal() == Version.v1.ordinal()) { via = buff.getLong(); } else { via = agentId; } if ((flags & FLAG_COMPRESSED) != 0) { buff = doDecompress(buff, size); } byte command = null; int offset = 0; if (buff.hasArray()) { command = buff.array(); offset = buff.arrayOffset() + buff.position(); } else { command = new byte[buff.remaining()]; buff.get(command); offset = 0; } final String content = new String(command, offset, command.length - offset); if (isRequest) { return new Request(version, seq, agentId, mgmtId, via, flags, content); } else { return new Response(Version.get(ver), seq, agentId, mgmtId, via, flags, content); } }#parse#parse#485#529#45#1#29#14#9#57#1#156#6
^{ return _agentId; }#get agent id#getAgentId#533#534#2#0#0#0#0#1#0#3#1
^{ return _via; }#get via agent id#getViaAgentId#537#538#2#0#0#0#0#1#0#3#1
^{ return (bytes[3] & FLAG_IN_SEQUENCE) > 0; }#requires sequential execution#requiresSequentialExecution#541#542#2#1#0#1#0#2#0#8#1
^{ try { return Version.get(bytes[0]); } catch (UnsupportedVersionException e) { throw new CloudRuntimeException("Unsupported version: " + bytes[0]); } }#get version#getVersion#545#549#5#1#2#2#0#7#0#16#1
^{ return NumbersUtil.bytesToLong(bytes, 16); }#get management server id#getManagementServerId#553#554#2#1#1#1#0#3#0#9#1
^{ return NumbersUtil.bytesToLong(bytes, 24); }#get agent id#getAgentId#557#558#2#1#1#1#0#3#0#9#1
^{ return NumbersUtil.bytesToLong(bytes, 32); }#get via agent id#getViaAgentId#561#562#2#1#1#1#0#3#0#9#1
^{ return (bytes[3] & FLAG_FROM_SERVER) > 0; }#from server#fromServer#565#566#2#1#0#1#0#2#0#8#1
^{ return (bytes[3] & FLAG_REQUEST) > 0; }#is request#isRequest#569#570#2#1#0#1#0#2#0#8#1
^{ return NumbersUtil.bytesToLong(bytes, 4); }#get sequence#getSequence#573#574#2#1#1#1#0#3#0#9#1
^{ return (bytes[3] & FLAG_CONTROL) > 0; }#is control#isControl#577#578#2#1#0#1#0#2#0#8#1
^{ JsonArray array = new JsonArray(); if (src.first() != null) { array.add(s_gson.toJsonTree(src.first())); } else { array.add(new JsonNull()); } if (src.second() != null) { array.add(s_gson.toJsonTree(src.second())); } else { array.add(new JsonNull()); } return array; }#serialize#serialize#586#601#16#3#13#4#4#14#0#52#3
^{ Pair<Long, Long> pairs = new Pair<Long, Long>(null, null); JsonArray array = json.getAsJsonArray(); if (array.size() != 2) { return pairs; } JsonElement element = array.get(0); if (!element.isJsonNull()) { pairs.first(element.getAsLong()); } element = array.get(1); if (!element.isJsonNull()) { pairs.second(element.getAsLong()); } return pairs; }#deserialize#deserialize#604#621#18#3#11#6#3#18#0#63#4
^{ if (src.size() == 0) { return new JsonNull(); } JsonArray array = new JsonArray(); for (PortConfig pc : src) { array.add(s_gson.toJsonTree(pc)); } return array; }#serialize#serialize#631#641#11#3#5#5#1#8#0#29#3
^{ if (json.isJsonNull()) { return new ArrayList<PortConfig>(); } List<PortConfig> pcs = new ArrayList<PortConfig>(); JsonArray array = json.getAsJsonArray(); Iterator<JsonElement> it = array.iterator(); while (it.hasNext()) { JsonElement element = it.next(); pcs.add(s_gson.fromJson(element, PortConfig.class)); } return pcs; }#deserialize#deserialize#644#656#13#3#9#7#1#13#0#56#3
^{ _ver = ver; _cmds = cmds; _flags = flags; _seq = seq; _via = via; _agentId = agentId; _mgmtId = mgmtId; setInSequence(cmds); }#request#Request#120#128#9#7#1#7#8#9#0#32#1
^{ this(ver, seq, agentId, mgmtId, agentId, flags, cmds); }#request#Request#131#132#2#6#1#6#1#8#0#22#1
^{ this(ver, seq, agentId, mgmtId, via, flags, (Command)null); _content = content; }#request#Request#135#137#3#7#1#7#2#9#0#26#1
^{ this(agentId, mgmtId, new Command {command}, true, fromServer); }#request#Request#140#141#2#4#1#4#1#7#0#16#1
^{ this(Version.v1, -1l, agentId, mgmtId, (short)0, cmds); setStopOnError(stopOnError); setFromServer(fromServer); }#request#Request#144#147#4#5#3#5#3#11#0#24#1
^{ this(agentId, mgmtId, cmds, stopOnError, fromServer); setAgentName(agentName); }#request#Request#150#152#3#6#2#6#2#8#0#22#1
^{ _ver = that._ver; _seq = that._seq; setInSequence(that.executeInSequence()); setStopOnError(that.stopOnError()); _cmds = cmds; _mgmtId = that._mgmtId; _via = that._via; _agentId = that._agentId; _agentName = that._agentName; setFromServer(!that.isFromServer()); }#request#Request#171#181#11#2#6#2#10#13#0#44#1
^{ if (clazz.isArray() || !Command.class.isAssignableFrom(clazz)) { return false; } Log4jLevel log4jLevel = null; LogLevel level = clazz.getAnnotation(LogLevel.class); if (level == null) { log4jLevel = LogLevel.Log4jLevel.Debug; } else { log4jLevel = level.value(); } return !log4jLevel.enabled(_logger); }#should skip class#shouldSkipClass#34#47#14#1#5#3#2#11#0#40#3
^{ LogLevel level = field.getAnnotation(LogLevel.class); return level != null && !level.value().enabled(_logger); }#should skip field#shouldSkipField#50#53#4#1#3#2#0#4#0#19#1
^{ _logger = logger; }#logging exclusion strategy#LoggingExclusionStrategy#56#57#2#1#0#1#1#1#0#5#1
^{ return primaryStoragePoolNameLabel; }#get primary storage pool name label#getPrimaryStoragePoolNameLabel#49#50#2#0#0#0#0#1#0#3#1
^{ return volumeUuid; }#get volume uuid#getVolumeUuid#56#57#2#0#0#0#0#1#0#3#1
^{ return firstBackupUuid; }#get first backup uuid#getFirstBackupUuid#63#64#2#0#0#0#0#1#0#3#1
^{ return previousSnapshotUuid; }#get previous snapshot uuid#getPreviousSnapshotUuid#67#68#2#0#0#0#0#1#0#3#1
^{ return templateUuid; }#get template uuid#getTemplateUuid#74#75#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#78#80#3#0#0#0#0#1#0#3#1
^{ this.primaryStoragePoolNameLabel = primaryStoragePoolNameLabel; this.volumeUuid = volumeUuid; this.firstBackupUuid = firstBackupUuid; this.previousSnapshotUuid = previousSnapshotUuid; this.templateUuid = templateUuid; }#validate snapshot command#ValidateSnapshotCommand#41#46#6#5#0#5#5#5#0#31#1
^{ return _pubKey; }#get pub key#getPubKey#39#40#2#0#0#0#0#1#0#3#1
^{ return _prvKey; }#get prv key#getPrvKey#43#44#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#47#49#3#0#0#0#0#1#0#3#1
^{ _pubKey = pubKey; _prvKey = prvKey; }#modify ssh keys command#ModifySshKeysCommand#34#36#3#2#0#2#2#2#0#9#1
^{ return false; }#execute in sequence#executeInSequence#38#40#3#0#0#0#0#1#0#3#1
^{ return vmName; }#get vm name#getVmName#43#44#2#0#0#0#0#1#0#3#1
^{ return vmData; }#get vm data#getVmData#47#48#2#0#0#0#0#1#0#5#1
^{ return isAttach; }#is attach#isAttach#51#52#2#0#0#0#0#1#0#3#1
^{ return configDriveLabel; }#get config drive label#getConfigDriveLabel#55#56#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.vmData = vmData; this.configDriveLabel = label; this.isAttach = attach; }#attach or dettach config drive command#AttachOrDettachConfigDriveCommand#31#35#5#4#0#4#4#4#0#28#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#41#42#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#45#46#2#1#0#1#1#1#0#10#1
^{ super(cmd, result, message); }#delete vm snapshot answer#DeleteVMSnapshotAnswer#32#33#2#3#1#3#1#4#0#11#1
^{ super(cmd, true, ""); this.volumeTOs = volumeTOs; }#delete vm snapshot answer#DeleteVMSnapshotAnswer#36#38#3#2#1#2#2#5#0#13#1
^{ super(Host.Type.ExternalFirewall); }#startup external firewall command#StartupExternalFirewallCommand#26#27#2#0#1#0#1#2#0#6#1
^{ return volumeTos; }#get volume tos#getVolumeTos#39#40#2#0#0#0#0#1#0#5#1
^{ super(cmd, ex); volumeTos = null; }#migrate with storage complete answer#MigrateWithStorageCompleteAnswer#29#31#3#2#1#2#2#4#0#9#1
^{ super(cmd, true, null); this.volumeTos = volumeTos; }#migrate with storage complete answer#MigrateWithStorageCompleteAnswer#34#36#3#2#1#2#2#5#0#13#1
^{ return address; }#get address#getAddress#44#45#2#0#0#0#0#1#0#3#1
^{ return port; }#get port#getPort#48#49#2#0#0#0#0#1#0#3#1
^{ super(cmd, true, null); this.port = port; }#get vnc port answer#GetVncPortAnswer#29#31#3#2#1#2#2#5#0#11#1
^{ super(cmd, true, null); this.address = address; this.port = port; }#get vnc port answer#GetVncPortAnswer#34#37#4#3#1#3#3#6#0#17#1
^{ super(cmd, false, details); }#get vnc port answer#GetVncPortAnswer#40#41#2#2#1#2#1#4#0#8#1
^{ return _proxyVmId; }#get proxy vm id#getProxyVmId#35#36#2#0#0#0#0#1#0#3#1
^{ return _loadInfo; }#get load info#getLoadInfo#39#40#2#0#0#0#0#1#0#3#1
^{ _proxyVmId = proxyVmId; _loadInfo = loadInfo; }#console proxy load report command#ConsoleProxyLoadReportCommand#30#32#3#2#0#2#2#2#0#9#1
^{ inSeq = inseq; }#set seq#setSeq#44#45#2#1#0#1#1#1#0#6#1
^{ return vmName; }#get vm name#getVmName#48#49#2#0#0#0#0#1#0#3#1
^{ return hostGuid; }#get host guid#getHostGuid#52#53#2#0#0#0#0#1#0#3#1
^{ return hostIp; }#get host ip#getHostIp#56#57#2#0#0#0#0#1#0#3#1
^{ return inSeq; }#execute in sequence#executeInSequence#60#62#3#0#0#0#0#1#0#4#1
^{ super(); }#fence command#FenceCommand#27#28#2#0#1#0#1#1#0#2#1
^{ super(); vmName = vm.getInstanceName(); hostGuid = host.getGuid(); hostIp = host.getPrivateIpAddress(); inSeq = false; }#fence command#FenceCommand#36#41#6#2#4#2#5#5#0#19#1
^{ return false; }#execute in sequence#executeInSequence#37#39#3#0#0#0#0#1#0#3#1
^{ return params; }#get params#getParams#42#43#2#0#0#0#0#1#0#6#1
^{ this.params = params; }#set params#setParams#46#47#2#1#0#1#1#1#0#11#1
^{ setWait(wait); this.params = params; }#performance monitor command#PerformanceMonitorCommand#32#34#3#2#1#2#2#3#0#14#1
^{ return vm; }#get virtual machine#getVirtualMachine#64#65#2#0#0#0#0#1#0#3#1
^{ return volumeToFiler; }#get volume to filer#getVolumeToFiler#68#69#2#0#0#0#0#1#0#6#1
^{ return volumeToFilerAsList; }#get volume to filer as list#getVolumeToFilerAsList#72#73#2#0#0#0#0#1#0#8#1
^{ return tgtHost; }#get target host#getTargetHost#76#77#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#80#82#3#0#0#0#0#1#0#3#1
^{ this.vm = vm; this.volumeToFiler = volumeToFiler; this.volumeToFilerAsList = null; this.tgtHost = null; }#migrate with storage command#MigrateWithStorageCommand#36#40#5#2#0#2#4#4#0#22#1
^{ this.vm = vm; this.volumeToFiler = null; this.volumeToFilerAsList = volumeToFilerAsList; this.tgtHost = null; }#migrate with storage command#MigrateWithStorageCommand#43#47#5#2#0#2#4#4#0#24#1
^{ this.vm = vm; this.volumeToFiler = volumeToFiler; this.volumeToFilerAsList = null; this.tgtHost = tgtHost; }#migrate with storage command#MigrateWithStorageCommand#50#54#5#3#0#3#4#4#0#25#1
^{ this.vm = vm; this.volumeToFiler = null; this.volumeToFilerAsList = volumeToFilerAsList; this.tgtHost = tgtHost; }#migrate with storage command#MigrateWithStorageCommand#57#61#5#3#0#3#4#4#0#27#1
^{ return _command; }#get command#getCommand#33#34#2#0#0#0#0#1#0#3#1
^{ super(cmd); _command = cmd; }#ping answer#PingAnswer#28#30#3#1#1#1#2#3#0#7#1
^{ return _success; }#succeeded#succeeded#44#45#2#0#0#0#0#1#0#3#1
^{ _success = value; }#set success#setSuccess#48#49#2#1#0#1#1#1#0#6#1
^{ return _isReauthenticating; }#is reauthenticating#isReauthenticating#52#53#2#0#0#0#0#1#0#3#1
^{ _isReauthenticating = value; }#set reauthenticating#setReauthenticating#56#57#2#1#0#1#1#1#0#6#1
^{ return _host; }#get host#getHost#60#61#2#0#0#0#0#1#0#3#1
^{ _host = host; }#set host#setHost#64#65#2#1#0#1#1#1#0#6#1
^{ return _port; }#get port#getPort#68#69#2#0#0#0#0#1#0#3#1
^{ _port = port; }#set port#setPort#72#73#2#1#0#1#1#1#0#6#1
^{ return _tunnelUrl; }#get tunnel url#getTunnelUrl#76#77#2#0#0#0#0#1#0#3#1
^{ _tunnelUrl = tunnelUrl; }#set tunnel url#setTunnelUrl#80#81#2#1#0#1#1#1#0#6#1
^{ return _tunnelSession; }#get tunnel session#getTunnelSession#84#85#2#0#0#0#0#1#0#3#1
^{ _tunnelSession = tunnelSession; }#set tunnel session#setTunnelSession#88#89#2#1#0#1#1#1#0#6#1
^{ _success = false; _isReauthenticating = false; _port = 0; }#console access authentication answer#ConsoleAccessAuthenticationAnswer#33#36#4#0#0#0#3#3#0#4#1
^{ super(cmd); _success = success; }#console access authentication answer#ConsoleAccessAuthenticationAnswer#39#41#3#2#1#2#2#3#0#9#1
^{ return vm; }#get virtual machine#getVirtualMachine#43#44#2#0#0#0#0#1#0#3#1
^{ return volumeToSr; }#get volume to sr#getVolumeToSr#47#48#2#0#0#0#0#1#0#8#1
^{ return nicToNetwork; }#get nic to network#getNicToNetwork#51#52#2#0#0#0#0#1#0#8#1
^{ return token; }#get token#getToken#55#56#2#0#0#0#0#1#0#6#1
^{ return true; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#3#1
^{ this.vm = vm; this.volumeToSr = volumeToSr; this.nicToNetwork = nicToNetwork; this.token = token; }#migrate with storage send command#MigrateWithStorageSendCommand#36#40#5#4#0#4#4#4#0#38#1
^{ super(); }#fence answer#FenceAnswer#23#24#2#0#1#0#1#1#0#2#1
^{ super(cmd, true, null); }#fence answer#FenceAnswer#27#28#2#1#1#1#1#4#0#5#1
^{ super(cmd, true, details); }#fence answer#FenceAnswer#31#32#2#2#1#2#1#4#0#8#1
^{ super(cmd, result, details); }#fence answer#FenceAnswer#35#36#2#3#1#3#1#4#0#11#1
^{ return states; }#get states#getStates#42#43#2#0#0#0#0#1#0#8#1
^{ super(); }#ping routing with ovs command#PingRoutingWithOvsCommand#31#32#2#0#1#0#1#1#0#2#1
^{ super(type, id, hostVmStateReport); this.states = ovsStates; }#ping routing with ovs command#PingRoutingWithOvsCommand#35#39#5#4#1#4#2#5#0#27#1
^{ _details = details; }#set details#setDetails#42#43#2#1#0#1#1#1#0#6#1
^{ return _details; }#get details#getDetails#46#47#2#0#0#0#0#1#0#3#1
^{ return dcId; }#get data center id#getDataCenterId#50#51#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#54#56#3#0#0#0#0#1#0#3#1
^{ return hostId; }#get host id#getHostId#59#60#2#0#0#0#0#1#0#3#1
^{ super(); }#ready command#ReadyCommand#25#26#2#0#1#0#1#1#0#2#1
^{ super(); this.dcId = dcId; }#ready command#ReadyCommand#32#34#3#1#1#1#2#2#0#8#1
^{ this(dcId); this.hostId = hostId; }#ready command#ReadyCommand#37#39#3#2#1#2#2#3#0#11#1
^{ return newPassword; }#get new password#getNewPassword#47#48#2#0#0#0#0#1#0#3#1
^{ return username; }#get username#getUsername#51#52#2#0#0#0#0#1#0#3#1
^{ return hostIp; }#get host ip#getHostIp#55#56#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#3#1
^{ this(username, newPassword, null); }#update host password command#UpdateHostPasswordCommand#37#38#2#2#1#2#1#4#0#8#1
^{ this.username = username; this.newPassword = newPassword; this.hostIp = hostIp; }#update host password command#UpdateHostPasswordCommand#41#44#4#3#0#3#3#3#0#19#1
^{ return false; // standalone command and can be executed independent of other commands }#execute in sequence#executeInSequence#31#33#3#0#0#0#0#1#1#3#1
^{ return cpuSockets; }#get cpu sockets#getCpuSockets#80#81#2#0#0#0#0#1#0#3#1
^{ return cpus; }#get cpus#getCpus#84#85#2#0#0#0#0#1#0#3#1
^{ return caps; }#get capabilities#getCapabilities#88#89#2#0#0#0#0#1#0#3#1
^{ return speed; }#get speed#getSpeed#92#93#2#0#0#0#0#1#0#3#1
^{ return memory; }#get memory#getMemory#96#97#2#0#0#0#0#1#0#3#1
^{ return dom0MinMemory; }#get dom 0 min memory#getDom0MinMemory#100#101#2#0#0#0#0#1#0#3#1
^{ this.speed = speed; }#set speed#setSpeed#104#105#2#1#0#1#1#1#0#8#1
^{ this.cpuSockets = cpuSockets; }#set cpu sockets#setCpuSockets#108#109#2#1#0#1#1#1#0#8#1
^{ this.cpus = cpus; }#set cpus#setCpus#112#113#2#1#0#1#1#1#0#8#1
^{ this.memory = memory; }#set memory#setMemory#116#117#2#1#0#1#1#1#0#8#1
^{ this.dom0MinMemory = dom0MinMemory; }#set dom 0 min memory#setDom0MinMemory#120#121#2#1#0#1#1#1#0#8#1
^{ this.caps = caps; }#set caps#setCaps#124#125#2#1#0#1#1#1#0#8#1
^{ return pool; }#get pool#getPool#128#129#2#0#0#0#0#1#0#3#1
^{ this.pool = pool; }#set pool#setPool#132#133#2#1#0#1#1#1#0#8#1
^{ return poolSync; }#is pool sync#isPoolSync#136#137#2#0#0#0#0#1#0#3#1
^{ this.poolSync = poolSync; }#set pool sync#setPoolSync#140#141#2#1#0#1#1#1#0#8#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#144#145#2#0#0#0#0#1#0#3#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#148#149#2#1#0#1#1#1#0#8#1
^{ return hostDetails; }#get host details#getHostDetails#152#153#2#0#0#0#0#1#0#6#1
^{ this.hostDetails = hostDetails; }#set host details#setHostDetails#156#157#2#1#0#1#1#1#0#11#1
^{ return hypervisorVersion; }#get hypervisor version#getHypervisorVersion#160#161#2#0#0#0#0#1#0#3#1
^{ this.hypervisorVersion = hypervisorVersion; }#set hypervisor version#setHypervisorVersion#164#165#2#1#0#1#1#1#0#8#1
^{ return hostTags; }#get host tags#getHostTags#168#169#2#0#0#0#0#1#0#5#1
^{ this.hostTags.add(hostTag); }#set host tags#setHostTags#172#173#2#1#1#1#1#2#0#9#1
^{ return groupDetails; }#get gpu group details#getGpuGroupDetails#176#177#2#0#0#0#0#1#0#9#1
^{ this.groupDetails = groupDetails; }#set gpu group details#setGpuGroupDetails#180#181#2#1#0#1#1#1#0#14#1
^{ return supportsClonedVolumes; }#get supports cloned volumes#getSupportsClonedVolumes#184#185#2#0#0#0#0#1#0#3#1
^{ this.supportsClonedVolumes = supportsClonedVolumes; }#set supports cloned volumes#setSupportsClonedVolumes#188#189#2#1#0#1#1#1#0#8#1
^{ super(Host.Type.Routing); hostDetails = new HashMap<String, String>(); getHostDetails().put(RouterPrivateIpStrategy.class.getCanonicalName(), RouterPrivateIpStrategy.DcGlobal.toString()); }#startup routing command#StartupRoutingCommand#48#51#4#0#6#0#3#6#0#22#1
^{ super(Host.Type.Routing); this.cpus = cpus; this.speed = speed; this.memory = memory; this.dom0MinMemory = dom0MinMemory; this.hypervisorType = hypervisorType; this.hostDetails = hostDetails; this.caps = caps; this.poolSync = false; }#startup routing command#StartupRoutingCommand#55#65#11#7#1#7#9#10#0#54#1
^{ this(cpus, speed, memory, dom0MinMemory, caps, hypervisorType); getHostDetails().put(RouterPrivateIpStrategy.class.getCanonicalName(), privIpStrategy.toString()); }#startup routing command#StartupRoutingCommand#68#71#4#7#5#7#2#10#0#32#1
^{ this(cpus2, speed2, memory2, dom0MinMemory2, caps2, hypervisorType2, new HashMap<String, String>()); }#startup routing command#StartupRoutingCommand#75#76#2#6#2#6#1#8#0#24#1
^{ super(cmd, false, detail); }#prepare for migration answer#PrepareForMigrationAnswer#26#27#2#2#1#2#1#4#0#8#1
^{ super(cmd, ex); }#prepare for migration answer#PrepareForMigrationAnswer#30#31#2#2#1#2#1#3#0#8#1
^{ super(cmd, true, null); }#prepare for migration answer#PrepareForMigrationAnswer#34#35#2#1#1#1#1#4#0#5#1
^{ return reason; }#get reason#getReason#47#48#2#0#0#0#0#1#0#3#1
^{ return detail; }#get detail#getDetail#51#52#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#55#57#3#0#0#0#0#1#0#3#1
^{ super(); }#shutdown command#ShutdownCommand#34#35#2#0#1#0#1#1#0#2#1
^{ super(); this.reason = reason; this.detail = detail; }#shutdown command#ShutdownCommand#38#41#4#2#1#2#3#3#0#14#1
^{ return vmName; }#get vm name#getVmName#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#modify vm nic config answer#ModifyVmNicConfigAnswer#27#28#2#1#0#1#1#1#0#7#1
^{ return logSequenceNumber; }#get log sequence number#getLogSequenceNumber#54#55#2#0#0#0#0#1#0#3#1
^{ return vmId; }#get vm id#getVmId#58#59#2#0#0#0#0#1#0#3#1
^{ return reason; }#get reason#getReason#62#63#2#0#0#0#0#1#0#3#1
^{ this.reason = reason; }#set reason#setReason#66#67#2#1#0#1#1#1#0#8#1
^{ super(cmd); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); }#security group rule answer#SecurityGroupRuleAnswer#34#37#4#1#3#1#3#4#0#17#1
^{ super(cmd, result, detail); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); reason = FailureReason.PROGRAMMING_FAILED; }#security group rule answer#SecurityGroupRuleAnswer#40#44#5#3#3#3#4#7#0#27#1
^{ super(cmd, result, detail); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); reason = r; }#security group rule answer#SecurityGroupRuleAnswer#47#51#5#4#3#4#4#7#0#27#1
^{ return vmName; }#get vm name#getVmName#35#36#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#39#41#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; setWait(20); }#check virtual machine command#CheckVirtualMachineCommand#30#32#3#1#1#1#2#3#0#8#1
^{ return vmName; }#get vm name#getVmName#48#49#2#0#0#0#0#1#0#3#1
^{ return type; }#get type#getType#52#53#2#0#0#0#0#1#0#5#1
^{ return vmSecIp; }#get vm sec ip#getVmSecIp#56#57#2#0#0#0#0#1#0#3#1
^{ return vmMac; }#get vm mac#getVmMac#60#61#2#0#0#0#0#1#0#3#1
^{ return action; }#get action#getAction#64#65#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#68#70#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.type = type; }#network rules vm secondary ip command#NetworkRulesVmSecondaryIpCommand#32#34#3#2#0#2#2#2#0#15#1
^{ this.vmName = vmName; this.vmMac = vmMac; this.vmSecIp = secondaryIp; if (action) { this.action = "-A"; } else { this.action = "-D"; } }#network rules vm secondary ip command#NetworkRulesVmSecondaryIpCommand#37#44#8#4#0#4#5#6#0#28#2
^{ this.add = add; }#set add#setAdd#37#38#2#1#0#1#1#1#0#8#1
^{ return add; }#get add#getAdd#41#42#2#0#0#0#0#1#0#3#1
^{ this.targets = targets; }#set targets#setTargets#45#46#2#1#0#1#1#1#0#13#1
^{ return targets; }#get targets#getTargets#49#50#2#0#0#0#0#1#0#8#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ return hostType; }#get host type#getHostType#36#37#2#0#0#0#0#1#0#5#1
^{ return hostId; }#get host id#getHostId#40#41#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#44#46#3#0#0#0#0#1#0#3#1
^{ if (this == o) return true; if (!(o instanceof PingCommand)) return false; if (!super.equals(o)) return false; PingCommand that = (PingCommand) o; if (hostId != that.hostId) return false; if (hostType != that.hostType) return false; return true; }#equals#equals#49#60#12#1#1#2#0#13#0#25#6
^{ int result = super.hashCode(); result = 31 * result + (hostType != null ? hostType.hashCode() : 0); result = 31 * result + (int) (hostId ^ (hostId >>> 32)); return result; }#hash code#hashCode#63#68#6#0#3#1#2#5#0#20#1
^{ hostType = type; hostId = id; }#ping command#PingCommand#31#33#3#2#0#2#2#2#0#11#1
^{ return vm; }#get virtual machine#getVirtualMachine#33#34#2#0#0#0#0#1#0#3#1
^{ //VR start doesn't go through queue if (vm.getName() != null && vm.getName().startsWith("r-")) { return false; } return executeInSequence; }#execute in sequence#executeInSequence#37#43#7#0#3#0#0#4#1#11#2
^{ return this.hostIp; }#get host ip#getHostIp#56#57#2#0#0#0#0#1#0#5#1
^{ return this.secondaryStorage; }#get secondary storage#getSecondaryStorage#60#61#2#0#0#0#0#1#0#5#1
^{ this.secondaryStorage = secondary; }#set secondary storage#setSecondaryStorage#64#65#2#1#0#1#1#1#0#8#1
^{ this.vm = vm; this.hostIp = host.getPrivateIpAddress(); this.executeInSequence = executeInSequence; this.secondaryStorage = null; }#start command#StartCommand#49#53#5#3#1#3#4#4#0#24#1
^{ return vmNames; }#get vm names#getVmNames#41#42#2#0#0#0#0#1#0#5#1
^{ return this.hostGuid; }#get host guid#getHostGuid#45#46#2#0#0#0#0#1#0#5#1
^{ return this.hostName; }#get host name#getHostName#49#50#2#0#0#0#0#1#0#5#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ this.vmNames = vmNames; this.hostGuid = hostGuid; this.hostName = hostName; }#get vm disk stats command#GetVmDiskStatsCommand#35#38#4#3#0#3#3#3#0#21#1
^{ return privateIP; }#get private ip#getPrivateIP#69#70#2#0#0#0#0#1#0#3#1
^{ return domRName; }#get dom r name#getDomRName#73#74#2#0#0#0#0#1#0#3#1
^{ return option; }#get option#getOption#77#78#2#0#0#0#0#1#0#3#1
^{ return forVpc; }#is for vpc#isForVpc#81#82#2#0#0#0#0#1#0#3#1
^{ return vpcCIDR; }#get vpc cidr#getVpcCIDR#85#86#2#0#0#0#0#1#0#3#1
^{ return gatewayIP; }#get gateway ip#getGatewayIP#89#90#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#93#95#3#0#0#0#0#1#0#3#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = "get"; }#network usage command#NetworkUsageCommand#37#42#6#4#0#4#5#5#0#28#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.option = option; this.forVpc = forVpc; }#network usage command#NetworkUsageCommand#45#49#5#4#0#4#4#4#0#25#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = "create"; this.vpcCIDR = vpcCIDR; }#network usage command#NetworkUsageCommand#52#58#7#5#0#5#6#6#0#34#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = option; }#network usage command#NetworkUsageCommand#61#66#6#5#0#5#5#5#0#31#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#42#43#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#46#47#2#0#0#0#0#1#0#3#1
^{ return proxyManagementIp; }#get proxy management ip#getProxyManagementIp#50#51#2#0#0#0#0#1#0#3#1
^{ return proxyCmdPort; }#get proxy cmd port#getProxyCmdPort#54#55#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#58#60#3#0#0#0#0#1#0#3#1
^{ this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; this.proxyManagementIp = proxyManagementIp; this.proxyCmdPort = proxyCmdPort; }#check console proxy load command#CheckConsoleProxyLoadCommand#35#39#5#4#0#4#4#4#0#25#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#40#41#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#44#45#2#0#0#0#0#1#0#3#1
^{ super(command, success, details); this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; }#console proxy load answer#ConsoleProxyLoadAnswer#33#37#5#5#1#5#3#6#0#23#1
^{ super(); }#proxy command#ProxyCommand#25#26#2#0#1#0#1#1#0#2#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#43#44#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#47#48#2#0#0#0#0#1#0#3#1
^{ return proxyManagementIp; }#get proxy management ip#getProxyManagementIp#51#52#2#0#0#0#0#1#0#3#1
^{ return proxyCmdPort; }#get proxy cmd port#getProxyCmdPort#55#56#2#0#0#0#0#1#0#3#1
^{ return interval; }#get interval#getInterval#59#61#3#0#0#0#0#1#0#4#1
^{ return false; }#execute in sequence#executeInSequence#64#66#3#0#0#0#0#1#0#3#1
^{ this.interval = interval; this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; this.proxyManagementIp = proxyManagementIp; this.proxyCmdPort = proxyCmdPort; }#watch console proxy load command#WatchConsoleProxyLoadCommand#32#37#6#5#0#5#5#5#0#31#1
^{ return true; }#execute in sequence#executeInSequence#43#45#3#0#0#0#0#1#0#3#1
^{ return keystoreBits; }#get keystore bits#getKeystoreBits#48#49#2#0#0#0#0#1#0#3#1
^{ this.keystoreBits = keystoreBits; }#set keystore bits#setKeystoreBits#52#53#2#1#0#1#1#1#0#9#1
^{ return keystorePassword; }#get keystore password#getKeystorePassword#56#57#2#0#0#0#0#1#0#3#1
^{ this.keystorePassword = keystorePassword; }#set keystore password#setKeystorePassword#60#61#2#1#0#1#1#1#0#8#1
^{ return encryptorPassword; }#get encryptor password#getEncryptorPassword#64#65#2#0#0#0#0#1#0#3#1
^{ this.encryptorPassword = encryptorPassword; }#set encryptor password#setEncryptorPassword#68#69#2#1#0#1#1#1#0#8#1
^{ super(); }#start console proxy agent http handler command#StartConsoleProxyAgentHttpHandlerCommand#34#35#2#0#1#0#1#1#0#2#1
^{ this.keystoreBits = ksBits; this.keystorePassword = ksPassword; }#start console proxy agent http handler command#StartConsoleProxyAgentHttpHandlerCommand#38#40#3#2#0#2#2#2#0#14#1
^{ super(cmd, result, details); }#performance monitor answer#PerformanceMonitorAnswer#26#28#3#3#1#3#1#4#0#11#1
^{ return platform; }#get platform#getPlatform#44#45#2#0#0#0#0#1#0#3#1
^{ super(cmd, details, success); this.platform = platform; }#stop answer#StopAnswer#29#31#3#4#1#4#2#5#0#17#1
^{ super(cmd, details, success); this.platform = null; }#stop answer#StopAnswer#34#36#3#3#1#3#2#5#0#14#1
^{ super(cmd, e); this.platform = null; }#stop answer#StopAnswer#39#41#3#2#1#2#2#4#0#11#1
^{ return parent; }#get parent#getParent#63#64#2#0#0#0#0#1#0#3#1
^{ this.parent = parent; }#set parent#setParent#67#68#2#1#0#1#1#1#0#8#1
^{ this.nfsShare = nfsShare; }#set nfs share#setNfsShare#71#72#2#1#0#1#1#1#0#8#1
^{ return nfsShare; }#get nfs share#getNfsShare#75#76#2#0#0#0#0#1#0#3#1
^{ return totalSize; }#get total size#getTotalSize#79#80#2#0#0#0#0#1#0#3#1
^{ return templateInfo; }#get template info#getTemplateInfo#83#84#2#0#0#0#0#1#0#6#1
^{ this.templateInfo = templateInfo; }#set template info#setTemplateInfo#87#88#2#1#0#1#1#1#0#11#1
^{ return poolInfo; }#get pool info#getPoolInfo#91#92#2#0#0#0#0#1#0#3#1
^{ this.poolInfo = poolInfo; }#set pool info#setPoolInfo#95#96#2#1#0#1#1#1#0#8#1
^{ return resourceType; }#get resource type#getResourceType#99#100#2#0#0#0#0#1#0#5#1
^{ this.resourceType = resourceType; }#set resource type#setResourceType#103#104#2#1#0#1#1#1#0#10#1
^{ return hostDetails; }#get host details#getHostDetails#108#109#2#0#0#0#0#1#0#6#1
^{ super(Host.Type.Storage); }#startup storage command#StartupStorageCommand#41#42#2#0#1#0#1#2#0#6#1
^{ super(Host.Type.Storage); this.parent = parent; this.totalSize = totalSize; this.templateInfo = info; this.poolInfo = null; this.fsType = fsType; }#startup storage command#StartupStorageCommand#45#51#7#4#1#4#6#7#0#36#1
^{ super(Host.Type.Storage); this.parent = parent; this.templateInfo = templateInfo; this.totalSize = poolInfo.capacityBytes; this.poolInfo = poolInfo; this.fsType = fsType; }#startup storage command#StartupStorageCommand#54#60#7#4#1#4#6#7#0#39#1
^{ return volumeToSet; }#get volume to set#getVolumeToSet#40#41#2#0#0#0#0#1#0#5#1
^{ super(cmd, ex); volumeToSet = null; }#migrate with storage send answer#MigrateWithStorageSendAnswer#30#32#3#2#1#2#2#4#0#9#1
^{ super(cmd, true, null); this.volumeToSet = volumeToSet; }#migrate with storage send answer#MigrateWithStorageSendAnswer#35#37#3#2#1#2#2#5#0#13#1
^{ return true; }#execute in sequence#executeInSequence#31#33#3#0#0#0#0#1#0#3#1
^{ return allowedInternalSites; }#get allowed internal sites#getAllowedInternalSites#36#37#2#0#0#0#0#1#0#3#1
^{ this.allowedInternalSites = allowedInternalSites; }#set allowed internal sites#setAllowedInternalSites#40#41#2#1#0#1#1#1#0#9#1
^{ return copyUserName; }#get copy user name#getCopyUserName#44#45#2#0#0#0#0#1#0#3#1
^{ this.copyUserName = copyUserName; }#set copy user name#setCopyUserName#48#49#2#1#0#1#1#1#0#8#1
^{ return copyPassword; }#get copy password#getCopyPassword#52#53#2#0#0#0#0#1#0#3#1
^{ this.copyPassword = copyPassword; }#set copy password#setCopyPassword#56#57#2#1#0#1#1#1#0#8#1
^{ super(); }#sec storage vm setup command#SecStorageVMSetupCommand#27#28#2#0#1#0#1#1#0#2#1
^{ return _host; }#get host#getHost#44#45#2#0#0#0#0#1#0#3#1
^{ return _port; }#get port#getPort#48#49#2#0#0#0#0#1#0#3#1
^{ return _vmId; }#get vm id#getVmId#52#53#2#0#0#0#0#1#0#3#1
^{ return _sid; }#get sid#getSid#56#57#2#0#0#0#0#1#0#3#1
^{ return _ticket; }#get ticket#getTicket#60#61#2#0#0#0#0#1#0#3#1
^{ return _isReauthenticating; }#is reauthenticating#isReauthenticating#64#65#2#0#0#0#0#1#0#3#1
^{ _isReauthenticating = value; }#set reauthenticating#setReauthenticating#68#69#2#1#0#1#1#1#0#6#1
^{ _isReauthenticating = false; }#console access authentication command#ConsoleAccessAuthenticationCommand#32#33#2#0#0#0#1#1#0#2#1
^{ _host = host; _port = port; _vmId = vmId; _sid = sid; _ticket = ticket; }#console access authentication command#ConsoleAccessAuthenticationCommand#36#41#6#5#0#5#5#5#0#21#1
^{ return vmName; }#get vm name#getVmName#37#38#2#0#0#0#0#1#0#3#1
^{ this.nics = nics; }#set nics#setNics#41#42#2#1#0#1#1#1#0#10#1
^{ return false; }#execute in sequence#executeInSequence#45#47#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#get vm config command#GetVmConfigCommand#33#34#2#1#0#1#1#1#0#7#1
^{ return host; }#get host#getHost#36#37#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#40#42#3#0#0#0#0#1#0#3#1
^{ this.host = new HostTO(host); setWait(20); }#check on host command#CheckOnHostCommand#31#33#3#1#2#1#2#4#0#9#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#31#32#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#35#36#2#1#0#1#1#1#0#10#1
^{ return vmSnapshotTo; }#get vm snapshot to#getVmSnapshotTo#39#40#2#0#0#0#0#1#0#3#1
^{ this.vmSnapshotTo = vmSnapshotTo; }#set vm snapshot to#setVmSnapshotTo#43#44#2#1#0#1#1#1#0#8#1
^{ super(cmd, success, result); }#create vm snapshot answer#CreateVMSnapshotAnswer#51#52#2#3#1#3#1#4#0#11#1
^{ super(cmd, true, ""); this.vmSnapshotTo = vmSnapshotTo; this.volumeTOs = volumeTOs; }#create vm snapshot answer#CreateVMSnapshotAnswer#55#58#4#3#1#3#3#6#0#19#1
^{ return true; }#execute in sequence#executeInSequence#29#31#3#0#0#0#0#1#0#3#1
^{ return vpnIps; }#get vpn ips#getVpnIps#39#40#2#0#0#0#0#1#0#5#1
^{ return true; }#is query#isQuery#43#45#3#0#0#0#0#1#0#3#1
^{ super(); this.vpnIps = vpnIps; }#check s 2 s vpn connections command#CheckS2SVpnConnectionsCommand#34#36#3#1#1#1#2#2#0#10#1
^{ return _reconnect; }#need reconnect#needReconnect#38#39#2#0#0#0#0#1#0#3#1
^{ super(cmd, result, details); _reconnect = reconnect; }#check network answer#CheckNetworkAnswer#29#31#3#4#1#4#2#5#0#15#1
^{ this(cmd, result, details, false); }#check network answer#CheckNetworkAnswer#34#35#2#3#1#3#1#5#0#11#1
^{ return privateIp; }#get private ip address#getPrivateIpAddress#34#35#2#0#0#0#0#1#0#3#1
^{ super(vmName, true); this.privateIp = privateIp; }#reboot router command#RebootRouterCommand#29#31#3#2#1#2#2#4#0#11#1
^{ return add; }#is add#isAdd#44#45#2#0#0#0#0#1#0#3#1
^{ return sourceIp; }#get source ip#getSourceIp#48#49#2#0#0#0#0#1#0#3#1
^{ return port; }#get port#getPort#52#53#2#0#0#0#0#1#0#3#1
^{ return intf; }#get intf#getIntf#56#57#2#0#0#0#0#1#0#3#1
^{ PortConfig pc = new PortConfig(sourceIp, port, add, intf); this.portConfigs.add(pc); }#add port config#addPortConfig#72#74#3#4#2#5#1#7#0#22#1
^{ return isAppendAIp; }#get is append a ip#getIsAppendAIp#78#79#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#82#84#3#0#0#0#0#1#0#3#1
^{ return portConfigs; }#get port configs#getPortConfigs#87#88#2#0#0#0#0#1#0#5#1
^{ this.add = add; this.sourceIp = sourceIp; this.port = port; this.intf = intf; }#port config#PortConfig#33#37#5#4#0#4#4#4#0#25#1
^{ this.isAppendAIp = isAppend; }#sec storage firewall cfg command#SecStorageFirewallCfgCommand#68#69#2#1#0#1#1#1#0#7#1
^{ return diskProfile; }#get dskch#getDskch#35#36#2#0#0#0#0#1#0#3#1
^{ return path; }#get path#getPath#39#40#2#0#0#0#0#1#0#3#1
^{ return volumeId; }#get volume id#getVolumeId#43#44#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#69#71#3#0#0#0#0#1#0#3#1
^{ return name; }#get name#getName#74#75#2#0#0#0#0#1#0#3#1
^{ return fullClone; }#get full clone#getFullClone#78#79#2#0#0#0#0#1#0#3#1
^{ return storagePoolUuid; }#get storage pool uuid#getStoragePoolUuid#82#83#2#0#0#0#0#1#0#3#1
^{ return pool; }#get pool#getPool#86#87#2#0#0#0#0#1#0#3#1
^{ this.path = path; this.name = name; this.fullClone = fullClone; this.storagePoolUuid = storagePoolUuid; }#create volume from vm snapshot command#CreateVolumeFromVMSnapshotCommand#51#55#5#4#0#4#4#4#0#25#1
^{ this.path = path; this.name = name; this.fullClone = fullClone; this.storagePoolUuid = storagePoolUuid; this.pool = pool; this.diskProfile = diskProfile; this.volumeId = volumeId; }#create volume from vm snapshot command#CreateVolumeFromVMSnapshotCommand#58#66#9#7#0#7#7#7#0#43#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ return _primaryPool; }#get pool#getPool#58#60#3#0#0#0#0#1#0#4#1
^{ return _secondaryStorageUrl; }#get secondary storage url#getSecondaryStorageUrl#63#65#3#0#0#0#0#1#0#4#1
^{ return _userSpecifiedName; }#get template name#getTemplateName#68#69#2#0#0#0#0#1#0#3#1
^{ return _uniqueName; }#get unique name#getUniqueName#72#73#2#0#0#0#0#1#0#3#1
^{ return _templateId; }#get template id#getTemplateId#76#77#2#0#0#0#0#1#0#3#1
^{ return _vmName; }#get vm name#getVmName#80#81#2#0#0#0#0#1#0#3#1
^{ this._volumePath = volumePath; }#set volume path#setVolumePath#84#86#3#1#0#1#1#1#0#9#1
^{ return _volumePath; }#get volume path#getVolumePath#89#91#3#0#0#0#0#1#0#4#1
^{ return _accountId; }#get account id#getAccountId#94#96#3#0#0#0#0#1#0#4#1
^{ _templateId = templateId; }#set template id#setTemplateId#99#100#2#1#0#1#1#1#0#6#1
^{ _secondaryStorageUrl = secondaryStorageUrl; _templateId = templateId; _accountId = accountId; _userSpecifiedName = userSpecifiedName; _uniqueName = uniqueName; _volumePath = volumePath; _vmName = vmName; primaryStoragePoolNameLabel = pool.getUuid(); _primaryPool = new StorageFilerTO(pool); setWait(wait); }#create private template from volume command#CreatePrivateTemplateFromVolumeCommand#39#50#12#9#3#9#10#12#0#42#1
^{ return _dir; }#get dir#get_dir#33#34#2#0#0#0#0#1#0#3#1
^{ super(null, true, "success"); this._dir = dir; }#sec storage setup answer#SecStorageSetupAnswer#28#30#3#1#1#1#2#5#0#8#1
^{ return true; }#execute in sequence#executeInSequence#41#43#3#0#0#0#0#1#0#3#1
^{ return store; }#get data store#getDataStore#46#47#2#0#0#0#0#1#0#3#1
^{ return directory; }#get directory#getDirectory#50#51#2#0#0#0#0#1#0#3#1
^{ this.store = store; this.directory = dir; }#delete snapshots dir command#DeleteSnapshotsDirCommand#36#38#3#2#0#2#2#2#0#13#1
^{ return vmState; }#get vm state#getVmState#47#48#2#0#0#0#0#1#0#5#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#51#52#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#55#56#2#1#0#1#1#1#0#10#1
^{ this.vmState = vmState; }#set vm state#setVmState#59#60#2#1#0#1#1#1#0#10#1
^{ super(cmd, result, message); }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#33#34#2#3#1#3#1#4#0#11#1
^{ super(); }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#37#38#2#0#1#0#1#1#0#2#1
^{ super(cmd, true, ""); this.volumeTOs = volumeTOs; this.vmState = vmState; }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#41#44#4#3#1#3#3#6#0#21#1
^{ return vmName; }#get vm name#getVmName#38#39#2#0#0#0#0#1#0#3#1
^{ return type; }#get type#getType#42#43#2#0#0#0#0#1#0#5#1
^{ return false; }#execute in sequence#executeInSequence#46#48#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.type = type; }#network rules system vm command#NetworkRulesSystemVmCommand#33#35#3#2#0#2#2#2#0#15#1
^{ return isWindows; }#is windows#isWindows#43#44#2#0#0#0#0#1#0#3#1
^{ return vmTO; }#get virtual machine#getVirtualMachine#47#48#2#0#0#0#0#1#0#3#1
^{ return destIp; }#get destination ip#getDestinationIp#51#52#2#0#0#0#0#1#0#3#1
^{ return vmName; }#get vm name#getVmName#55#56#2#0#0#0#0#1#0#3#1
^{ this.hostGuid = guid; }#set host guid#setHostGuid#59#60#2#1#0#1#1#1#0#8#1
^{ return this.hostGuid; }#get host guid#getHostGuid#63#64#2#0#0#0#0#1#0#5#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#67#69#3#0#0#0#0#1#0#4#1
^{ this.vmName = vmName; this.destIp = destIp; this.isWindows = isWindows; this.vmTO = vmTO; this.executeInSequence = executeInSequence; }#migrate command#MigrateCommand#35#40#6#5#0#5#5#5#0#31#1
^{ super(command); }#recurring network usage answer#RecurringNetworkUsageAnswer#27#28#2#1#1#1#1#2#0#5#1
^{ super(command, e); }#recurring network usage answer#RecurringNetworkUsageAnswer#31#32#2#2#1#2#1#3#0#8#1
^{ this.vmName = vmName; }#set vm name#setVmName#45#46#2#1#0#1#1#1#0#8#1
^{ try { if (action.equals("testSaveLocationExists")) { boolean b = DirectoryManager.testSaveLocationExists(); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("getFreeDiskSpace")) { long l = DirectoryManager.getFreeDiskSpace(false); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, l)); } else if (action.equals("testFileExists")) { boolean b = DirectoryManager.testFileExists(args.getString(0)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("testDirectoryExists")) { boolean b = DirectoryManager.testFileExists(args.getString(0)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, b)); } else if (action.equals("readAsText")) { String encoding = args.getString(1); int start = args.getInt(2); int end = args.getInt(3); this.readFileAs(args.getString(0), start, end, callbackContext, encoding, PluginResult.MESSAGE_TYPE_STRING); } else if (action.equals("readAsDataURL")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, -1); } else if (action.equals("readAsArrayBuffer")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, PluginResult.MESSAGE_TYPE_ARRAYBUFFER); } else if (action.equals("readAsBinaryString")) { int start = args.getInt(1); int end = args.getInt(2); this.readFileAs(args.getString(0), start, end, callbackContext, null, PluginResult.MESSAGE_TYPE_BINARYSTRING); } else if (action.equals("write")) { long fileSize = this.write(args.getString(0), args.getString(1), args.getInt(2)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, fileSize)); } else if (action.equals("truncate")) { long fileSize = this.truncateFile(args.getString(0), args.getLong(1)); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, fileSize)); } else if (action.equals("requestFileSystem")) { long size = args.optLong(1); if (size != 0 && size > (DirectoryManager.getFreeDiskSpace(true) * 1024)) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.ERROR, FileUtils.QUOTA_EXCEEDED_ERR)); } else { JSONObject obj = requestFileSystem(args.getInt(0)); callbackContext.success(obj); } } else if (action.equals("resolveLocalFileSystemURI")) { JSONObject obj = resolveLocalFileSystemURI(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getMetadata")) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.OK, getMetadata(args.getString(0)))); } else if (action.equals("getFileMetadata")) { JSONObject obj = getFileMetadata(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getParent")) { JSONObject obj = getParent(args.getString(0)); callbackContext.success(obj); } else if (action.equals("getDirectory")) { JSONObject obj = getFile(args.getString(0), args.getString(1), args.optJSONObject(2), true); callbackContext.success(obj); } else if (action.equals("getFile")) { JSONObject obj = getFile(args.getString(0), args.getString(1), args.optJSONObject(2), false); callbackContext.success(obj); } else if (action.equals("remove")) { boolean success; success = remove(args.getString(0)); if (success) { notifyDelete(args.getString(0)); callbackContext.success(); } else { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } } else if (action.equals("removeRecursively")) { boolean success = removeRecursively(args.getString(0)); if (success) { callbackContext.success(); } else { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } } else if (action.equals("moveTo")) { JSONObject entry = transferTo(args.getString(0), args.getString(1), args.getString(2), true); callbackContext.success(entry); } else if (action.equals("copyTo")) { JSONObject entry = transferTo(args.getString(0), args.getString(1), args.getString(2), false); callbackContext.success(entry); } else if (action.equals("readEntries")) { JSONArray entries = readEntries(args.getString(0)); callbackContext.success(entries); } else { return false; } } catch (FileNotFoundException e) { callbackContext.error(FileUtils.NOT_FOUND_ERR); } catch (FileExistsException e) { callbackContext.error(FileUtils.PATH_EXISTS_ERR); } catch (NoModificationAllowedException e) { callbackContext.error(FileUtils.NO_MODIFICATION_ALLOWED_ERR); } catch (InvalidModificationException e) { callbackContext.error(FileUtils.INVALID_MODIFICATION_ERR); } catch (MalformedURLException e) { callbackContext.error(FileUtils.ENCODING_ERR); } catch (IOException e) { callbackContext.error(FileUtils.INVALID_MODIFICATION_ERR); } catch (EncodingException e) { callbackContext.error(FileUtils.ENCODING_ERR); } catch (TypeMismatchException e) { callbackContext.error(FileUtils.TYPE_MISMATCH_ERR); } return true; }#execute#execute#94#229#136#3#125#38#35#254#0#519#26
^{ String newFilePath = FileHelper.getRealPath(filePath, cordova); try { this.cordova.getActivity().getContentResolver().delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, MediaStore.Images.Media.DATA + " = ?", new String { newFilePath }); } catch (UnsupportedOperationException t) { // Was seeing this on the File mobile-spec tests on 4.0.3 x86 emulator. // The ContentResolver applies only when the file was registered in the // first case, which is generally only the case with images. } }#notify delete#notifyDelete#237#246#10#1#4#3#1#8#3#32#1
^{ String decoded = URLDecoder.decode(url, "UTF-8"); File fp = null; // Handle the special case where you get an Android content:// uri. if (decoded.startsWith("content:")) { Cursor cursor = this.cordova.getActivity().managedQuery(Uri.parse(decoded), new String { MediaStore.Images.Media.DATA }, null, null, null); // Note: MediaStore.Images/Audio/Video.Media.DATA is always "_data" int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA); cursor.moveToFirst(); fp = new File(cursor.getString(column_index)); } else { // Test to see if this is a valid URL first @SuppressWarnings("unused") URL testUrl = new URL(decoded); if (decoded.startsWith("file://")) { int questionMark = decoded.indexOf("?"); if (questionMark < 0) { fp = new File(decoded.substring(7, decoded.length())); } else { fp = new File(decoded.substring(7, questionMark)); } } else { fp = new File(decoded); } } if (!fp.exists()) { throw new FileNotFoundException(); } if (!fp.canRead()) { throw new IOException(); } return getEntry(fp); }#resolve local file system uri#resolveLocalFileSystemURI#260#296#37#1#23#7#5#47#3#96#6
^{ File fp = createFileObject(fileName); if (!fp.exists()) { // The directory we are listing doesn't exist so we should fail. throw new FileNotFoundException(); } JSONArray entries = new JSONArray(); if (fp.isDirectory()) { File files = fp.listFiles(); for (int i = 0; i < files.length; i++) { if (files[i].canRead()) { entries.put(getEntry(files[i])); } } } return entries; }#read entries#readEntries#307#326#20#1#9#5#1#19#1#44#5
^{ String newFileName = FileHelper.getRealPath(fileName, cordova); newParent = FileHelper.getRealPath(newParent, cordova); // Check for invalid file name if (newName != null && newName.contains(":")) { throw new EncodingException("Bad file name"); } File source = new File(newFileName); if (!source.exists()) { // The file/directory we are copying doesn't exist so we should fail. throw new FileNotFoundException("The source does not exist"); } File destinationDir = new File(newParent); if (!destinationDir.exists()) { // The destination does not exist so we should fail. throw new FileNotFoundException("The source does not exist"); } // Figure out where we should be copying to File destination = createDestination(newName, source, destinationDir); //Log.d(LOG_TAG, "Source: " + source.getAbsolutePath()); //Log.d(LOG_TAG, "Destin: " + destination.getAbsolutePath()); // Check to see if source and destination are the same file if (source.getAbsolutePath().equals(destination.getAbsolutePath())) { throw new InvalidModificationException("Can't copy a file onto itself"); } if (source.isDirectory()) { if (move) { return moveDirectory(source, destination); } else { return copyDirectory(source, destination); } } else { if (move) { JSONObject newFileEntry = moveFile(source, destination); // If we've moved a file given its content URI, we need to clean up. if (fileName.startsWith("content://")) { notifyDelete(fileName); } return newFileEntry; } else { return copyFile(source, destination); } } }#transfer to#transferTo#344#394#51#4#22#9#2#54#8#89#9
^{ File destFile = null; // I know this looks weird but it is to work around a JSON bug. if ("null".equals(newName) || "".equals(newName)) { newName = null; } if (newName != null) { destFile = new File(destination.getAbsolutePath() + File.separator + newName); } else { destFile = new File(destination.getAbsolutePath() + File.separator + fp.getName()); } return destFile; }#create destination#createDestination#407#420#14#3#7#4#3#11#1#37#3
^{ // Renaming a file to an existing directory should fail if (destFile.exists() && destFile.isDirectory()) { throw new InvalidModificationException("Can't rename a file to a directory"); } copyAction(srcFile, destFile); return getEntry(destFile); }#copy file#copyFile#433#441#9#2#5#2#1#11#1#21#2
^{ FileInputStream istream = new FileInputStream(srcFile); FileOutputStream ostream = new FileOutputStream(destFile); FileChannel input = istream.getChannel(); FileChannel output = ostream.getChannel(); try { input.transferTo(0, input.size(), output); } finally { istream.close(); ostream.close(); input.close(); output.close(); } }#copy action#copyAction#447#460#14#2#10#6#5#16#0#45#1
^{ // Renaming a file to an existing directory should fail if (destinationDir.exists() && destinationDir.isFile()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Check to make sure we are not copying the directory into itself if (isCopyOnItself(srcDir.getAbsolutePath(), destinationDir.getAbsolutePath())) { throw new InvalidModificationException("Can't copy itself into itself"); } // See if the destination directory exists. If not create it. if (!destinationDir.exists()) { if (!destinationDir.mkdir()) { // If we can't create the directory then fail throw new NoModificationAllowedException("Couldn't create the destination directory"); } } for (File file : srcDir.listFiles()) { if (file.isDirectory()) { copyDirectory(file, destinationDir); } else { File destination = new File(destinationDir.getAbsoluteFile() + File.separator + file.getName()); copyFile(file, destination); } } return getEntry(destinationDir); }#copy directory#copyDirectory#475#503#29#2#18#4#2#28#4#60#7
^{ // This weird test is to determine if we are copying or moving a directory into itself. // Copy /sdcard/myDir to /sdcard/myDir-backup is okay but // Copy /sdcard/myDir to /sdcard/myDir/backup should throw an INVALID_MODIFICATION_ERR if (dest.startsWith(src) && dest.indexOf(File.separator, src.length() - 1) != -1) { return true; } return false; }#is copy on itself#isCopyOnItself#514#523#10#2#3#2#0#6#3#19#2
^{ // Renaming a file to an existing directory should fail if (destFile.exists() && destFile.isDirectory()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Try to rename the file if (!srcFile.renameTo(destFile)) { // Trying to rename the file failed. Possibly because we moved across file system on the device. // Now we have to do things the hard way // 1) Copy all the old file // 2) delete the src file copyAction(srcFile, destFile); if (destFile.exists()) { srcFile.delete(); } else { throw new IOException("moved failed"); } } return getEntry(destFile); }#move file#moveFile#536#556#21#2#9#2#2#17#6#32#4
^{ // Renaming a file to an existing directory should fail if (destinationDir.exists() && destinationDir.isFile()) { throw new InvalidModificationException("Can't rename a file to a directory"); } // Check to make sure we are not copying the directory into itself if (isCopyOnItself(srcDir.getAbsolutePath(), destinationDir.getAbsolutePath())) { throw new InvalidModificationException("Can't move itself into itself"); } // If the destination directory already exists and is empty then delete it. This is according to spec. if (destinationDir.exists()) { if (destinationDir.list().length > 0) { throw new InvalidModificationException("directory is not empty"); } } // Try to rename the directory if (!srcDir.renameTo(destinationDir)) { // Trying to rename the directory failed. Possibly because we moved across file system on the device. // Now we have to do things the hard way // 1) Copy all the old files // 2) delete the src directory copyDirectory(srcDir, destinationDir); if (destinationDir.exists()) { removeDirRecursively(srcDir); } else { throw new IOException("moved failed"); } } return getEntry(destinationDir); }#move directory#moveDirectory#571#603#33#2#16#2#2#29#8#49#7
^{ File fp = createFileObject(filePath); // You can't delete the root directory. if (atRootDirectory(filePath)) { return false; } return removeDirRecursively(fp); }#remove recursively#removeRecursively#616#624#9#1#3#2#0#8#1#13#2
^{ if (directory.isDirectory()) { for (File file : directory.listFiles()) { removeDirRecursively(file); } } if (!directory.delete()) { throw new FileExistsException("could not delete: " + directory.getName()); } else { return true; } }#remove dir recursively#removeDirRecursively#634#644#11#1#6#2#1#9#0#22#4
^{ File fp = createFileObject(filePath); // You can't delete the root directory. if (atRootDirectory(filePath)) { throw new NoModificationAllowedException("You can't delete the root directory"); } // You can't delete a directory that is not empty if (fp.isDirectory() && fp.list().length > 0) { throw new InvalidModificationException("You can't delete a directory that is not empty."); } return fp.delete(); }#remove#remove#657#670#14#1#7#2#0#12#2#24#3
^{ boolean create = false; boolean exclusive = false; if (options != null) { create = options.optBoolean("create"); if (create) { exclusive = options.optBoolean("exclusive"); } } // Check for a ":" character in the file to line up with BB and iOS if (fileName.contains(":")) { throw new EncodingException("This file has a : in it's name"); } File fp = createFileObject(dirPath, fileName); if (create) { if (exclusive && fp.exists()) { throw new FileExistsException("create/exclusive fails"); } if (directory) { fp.mkdir(); } else { fp.createNewFile(); } if (!fp.exists()) { throw new FileExistsException("create fails"); } } else { if (!fp.exists()) { throw new FileNotFoundException("path does not exist"); } if (directory) { if (fp.isFile()) { throw new TypeMismatchException("path doesn't exist or is file"); } } else { if (fp.isDirectory()) { throw new TypeMismatchException("path doesn't exist or is directory"); } } } // Return the directory return getEntry(fp); }#get file#getFile#687#733#47#4#18#7#4#42#2#70#12
^{ File fp = null; if (fileName.startsWith("/")) { fp = new File(fileName); } else { dirPath = FileHelper.getRealPath(dirPath, cordova); fp = new File(dirPath + File.separator + fileName); } return fp; }#create file object#createFileObject#744#752#9#2#4#3#3#11#0#28#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); if (atRootDirectory(filePath)) { return getEntry(filePath); } return getEntry(new File(filePath).getParent()); }#get parent#getParent#763#769#7#1#6#1#1#11#0#19#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); if (filePath.equals(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache") || filePath.equals(Environment.getExternalStorageDirectory().getAbsolutePath()) || filePath.equals("/data/data/" + cordova.getActivity().getPackageName())) { return true; } return false; }#at root directory#atRootDirectory#779#787#9#1#12#1#1#9#0#35#2
^{ filePath = FileHelper.getRealPath(filePath, cordova); File file = new File(filePath); return file; }#create file object#createFileObject#796#800#5#1#2#2#1#6#0#15#1
^{ File file = createFileObject(filePath); if (!file.exists()) { throw new FileNotFoundException("Failed to find file in getMetadata"); } return file.lastModified(); }#get metadata#getMetadata#810#817#8#1#4#2#0#7#0#16#2
^{ File file = createFileObject(filePath); if (!file.exists()) { throw new FileNotFoundException("File: " + filePath + " does not exist."); } JSONObject metadata = new JSONObject(); metadata.put("size", file.length()); metadata.put("type", FileHelper.getMimeType(filePath, cordova)); metadata.put("name", file.getName()); metadata.put("fullPath", filePath); metadata.put("lastModifiedDate", file.lastModified()); return metadata; }#get file metadata#getFileMetadata#828#842#15#1#13#3#5#26#0#49#2
^{ JSONObject fs = new JSONObject(); if (type == TEMPORARY) { File fp; fs.put("name", "temporary"); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { fp = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache/"); // Create the cache dir if it doesn't exist. fp.mkdirs(); fs.put("root", getEntry(Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/" + cordova.getActivity().getPackageName() + "/cache/")); } else { fp = new File("/data/data/" + cordova.getActivity().getPackageName() + "/cache/"); // Create the cache dir if it doesn't exist. fp.mkdirs(); fs.put("root", getEntry("/data/data/" + cordova.getActivity().getPackageName() + "/cache/")); } } else if (type == PERSISTENT) { fs.put("name", "persistent"); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { fs.put("root", getEntry(Environment.getExternalStorageDirectory())); } else { fs.put("root", getEntry("/data/data/" + cordova.getActivity().getPackageName())); } } else { throw new IOException("No filesystem of type requested"); } return fs; }#request file system#requestFileSystem#853#884#32#1#35#3#10#40#2#94#5
^{ JSONObject entry = new JSONObject(); entry.put("isFile", file.isFile()); entry.put("isDirectory", file.isDirectory()); entry.put("name", file.getName()); entry.put("fullPath", "file://" + file.getAbsolutePath()); // The file system can't be specified, as it would lead to an infinite loop. // entry.put("filesystem", null); return entry; }#get entry#getEntry#894#904#11#1#9#2#4#15#2#33#1
^{ return getEntry(new File(path)); }#get entry#getEntry#914#915#2#1#2#1#0#4#0#8#1
^{ this.cordova.getThreadPool().execute(new Runnable() { public void run() { try { byte bytes = readAsBinaryHelper(filename, start, end); PluginResult result; switch (resultType) { case PluginResult.MESSAGE_TYPE_STRING: result = new PluginResult(PluginResult.Status.OK, new String(bytes, encoding)); break; case PluginResult.MESSAGE_TYPE_ARRAYBUFFER: result = new PluginResult(PluginResult.Status.OK, bytes); break; case PluginResult.MESSAGE_TYPE_BINARYSTRING: result = new PluginResult(PluginResult.Status.OK, bytes, true); break; default: // Base64. String contentType = FileHelper.getMimeType(filename, cordova); byte base64 = Base64.encodeBase64(bytes); String s = "data:" + contentType + ";base64," + new String(base64, "US-ASCII"); result = new PluginResult(PluginResult.Status.OK, s); } callbackContext.sendPluginResult(result); } catch (FileNotFoundException e) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_FOUND_ERR)); } catch (IOException e) { Log.d(LOG_TAG, e.getLocalizedMessage()); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_READABLE_ERR)); } } }); }#read file as#readFileAs#935#964#30#6#18#13#9#46#1#121#5
^{ try { byte bytes = readAsBinaryHelper(filename, start, end); PluginResult result; switch (resultType) { case PluginResult.MESSAGE_TYPE_STRING: result = new PluginResult(PluginResult.Status.OK, new String(bytes, encoding)); break; case PluginResult.MESSAGE_TYPE_ARRAYBUFFER: result = new PluginResult(PluginResult.Status.OK, bytes); break; case PluginResult.MESSAGE_TYPE_BINARYSTRING: result = new PluginResult(PluginResult.Status.OK, bytes, true); break; default: // Base64. String contentType = FileHelper.getMimeType(filename, cordova); byte base64 = Base64.encodeBase64(bytes); String s = "data:" + contentType + ";base64," + new String(base64, "US-ASCII"); result = new PluginResult(PluginResult.Status.OK, s); } callbackContext.sendPluginResult(result); } catch (FileNotFoundException e) { callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_FOUND_ERR)); } catch (IOException e) { Log.d(LOG_TAG, e.getLocalizedMessage()); callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.IO_EXCEPTION, NOT_READABLE_ERR)); } }#run#run#937#964#28#0#16#7#8#44#1#101#5
^{ int numBytesToRead = end - start; byte bytes = new byte[numBytesToRead]; InputStream inputStream = FileHelper.getInputStreamFromUriString(filename, cordova); int numBytesRead = 0; if (start > 0) { inputStream.skip(start); } while (numBytesToRead > 0 && (numBytesRead = inputStream.read(bytes, numBytesRead, numBytesToRead)) >= 0) { numBytesToRead -= numBytesRead; } return bytes; }#read as binary helper#readAsBinaryHelper#980#994#15#3#3#7#2#17#0#43#3
^{ if (filename.startsWith("content://")) { throw new NoModificationAllowedException("Couldn't write to file given its content URI"); } filename = FileHelper.getRealPath(filename, cordova); boolean append = false; if (offset > 0) { this.truncateFile(filename, offset); append = true; } byte rawData = data.getBytes(); ByteArrayInputStream in = new ByteArrayInputStream(rawData); FileOutputStream out = new FileOutputStream(filename, append); byte buff = new byte[rawData.length]; in.read(buff, 0, buff.length); out.write(buff, 0, rawData.length); out.flush(); out.close(); return rawData.length; }#write#write#1007#1029#23#3#11#8#7#35#0#75#3
^{ if (filename.startsWith("content://")) { throw new NoModificationAllowedException("Couldn't truncate file given its content URI"); } filename = FileHelper.getRealPath(filename, cordova); RandomAccessFile raf = new RandomAccessFile(filename, "rw"); try { if (raf.length() >= size) { FileChannel channel = raf.getChannel(); channel.truncate(size); return size; } return raf.length(); } finally { raf.close(); } }#truncate file#truncateFile#1040#1057#18#2#9#4#3#20#0#43#3
^{ TransformerFactory factory = TransformerFactory.newInstance(); Source xslt = new StreamSource(new File(args[0])); Transformer transformer = factory.newTransformer(xslt); Source text = new StreamSource(new File(args[1])); transformer.transform(text, new StreamResult(new File(args[2]))); }#main#main#28#34#7#1#9#5#1#20#0#39#1
^{ XmlToHtmlConverter x = new XmlToHtmlConverter(); x.populateForApi(); x.generateToc(); x.generateIndividualCommandPages(); }#main#main#24#28#5#1#4#2#3#4#0#17#1
^{ try { TransformerFactory tFactory = TransformerFactory.newInstance(); // Generate the TOC for root administrator role Transformer transformer1 = tFactory.newTransformer(new javax.xml.transform.stream.StreamSource("generatetoc.xsl")); // Modify this path to match your own setup. transformer1.transform(new javax.xml.transform.stream.StreamSource("apis/apiSummarySorted.xml"), // Modify this path to your own desired output location. new javax.xml.transform.stream.StreamResult(new FileOutputStream("html/index.html"))); } catch (Exception e) { e.printStackTrace(); } }#generate toc#generateToc#31#41#11#0#8#3#2#11#3#39#1
^{ for (String commandName : allCommandNames) { try { TransformerFactory tFactory = TransformerFactory.newInstance(); Transformer transformer = tFactory.newTransformer(new javax.xml.transform.stream.StreamSource("generatecommands.xsl")); transformer.transform // Modify this path to the location of the input files on your system. (new javax.xml.transform.stream.StreamSource("apis/" + commandName + ".xml"), // Modify this path with the desired output location. new javax.xml.transform.stream.StreamResult(new FileOutputStream("html/apis/" + commandName + ".html"))); } catch (Exception e) { e.printStackTrace(); } } }#generate individual command pages#generateIndividualCommandPages#46#60#15#0#8#4#2#12#2#44#2
^{ try { CommandLine commandLine = new CommandLine("heat"); if(dir != null && !dir.trim().isEmpty()) { commandLine.addArgument("dir"); commandLine.addArgument(dir); } commandLine.addArgument("-gg"); commandLine.addArgument("-cg"); commandLine.addArgument(componentGroup); commandLine.addArgument("-ke"); commandLine.addArgument("-sfrag"); if(template == null || template.trim().isEmpty()) { commandLine.addArgument("-template"); commandLine.addArgument("fragment"); } else { commandLine.addArgument("-template"); commandLine.addArgument(template); } if (outputFile != null) { commandLine.addArgument("-out"); commandLine.addArgument(outputFile.getAbsolutePath()); } if (directoryName != null) { commandLine.addArgument("-dr"); commandLine.addArgument(directoryName); } if (vars != null) { commandLine.addArguments(vars, false); } DefaultExecutor executor = new DefaultExecutor(); getLog().debug("working directory " + commandLine.toString()); executor.setWorkingDirectory(getWorkingDirectory(workingDirectory)); int exitValue = executor.execute(commandLine); if (exitValue != 0) { throw new MojoExecutionException( "Problem executing heat, return code " + exitValue); } } catch (ExecuteException e) { throw new MojoExecutionException("Problem executing heat", e); } catch (IOException e) { throw new MojoExecutionException("Problem executing heat", e); } }#execute#execute#89#140#52#0#32#5#18#59#0#107#7
^{ cnc = Mockito.mock(CheckNetworkCommand.class); cna = new CheckNetworkAnswer(cnc, true, "details", true); }#set up#setUp#47#50#4#0#2#0#2#7#0#13#1
^{ return 1L; }#get id#getId#80#82#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#85#87#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#90#92#3#0#0#0#0#1#0#3#1
^{ return Storage.StoragePoolType.Filesystem; }#get pool type#getPoolType#95#97#3#0#0#0#0#1#0#9#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#100#108#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#111#113#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#116#118#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#121#123#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#126#128#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#131#133#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#136#138#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#141#143#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#146#148#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#151#153#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#156#158#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#161#163#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#166#168#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#171#173#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#176#177#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#179#181#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#184#187#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#190#193#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#196#198#3#0#0#0#0#1#1#5#1
^{ return 1L; }#get id#getId#42#44#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#47#49#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#52#54#3#0#0#0#0#1#0#3#1
^{ return StoragePoolType.Filesystem; }#get pool type#getPoolType#57#59#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#62#70#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#73#75#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#78#80#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#83#85#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#88#90#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#93#95#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#98#100#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#103#105#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#108#110#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#113#115#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#118#120#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#123#125#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#128#130#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#133#135#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#138#139#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#141#143#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#146#149#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#152#155#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#158#160#3#0#0#0#0#1#1#5#1
^{ ssc1 = new SnapshotCommand(pool, "secondaryStorageUrl", "snapshotUuid", "snapshotName", 101L, 102L, 103L); }#set up#setUp#170#172#3#0#1#0#1#8#0#6#1
^{ return 1L; }#get id#getId#41#43#3#0#0#0#0#1#0#3#1
^{ return "name"; }#get name#getName#46#48#3#0#0#0#0#1#0#3#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get uuid#getUuid#51#53#3#0#0#0#0#1#0#3#1
^{ return StoragePoolType.Filesystem; }#get pool type#getPoolType#56#58#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#61#69#9#0#3#2#2#6#0#14#1
^{ return new Date(); }#get update time#getUpdateTime#72#74#3#0#1#0#0#1#0#4#1
^{ return 0L; }#get data center id#getDataCenterId#77#79#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity bytes#getCapacityBytes#82#84#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get used bytes#getUsedBytes#87#89#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get capacity iops#getCapacityIops#92#94#3#0#0#0#0#1#0#3#1
^{ return 0L; }#get cluster id#getClusterId#97#99#3#0#0#0#0#1#0#3#1
^{ return "hostAddress"; }#get host address#getHostAddress#102#104#3#0#0#0#0#1#0#3#1
^{ return "path"; }#get path#getPath#107#109#3#0#0#0#0#1#0#3#1
^{ return "userInfo"; }#get user info#getUserInfo#112#114#3#0#0#0#0#1#0#3#1
^{ return false; }#is shared#isShared#117#119#3#0#0#0#0#1#0#3#1
^{ return false; }#is local#isLocal#122#124#3#0#0#0#0#1#0#3#1
^{ return StoragePoolStatus.Up; }#get status#getStatus#127#129#3#0#0#0#0#1#0#6#1
^{ return 25; }#get port#getPort#132#134#3#0#0#0#0#1#0#3#1
^{ return false; }#is managed#isManaged#137#138#2#0#0#0#0#1#0#3#1
^{ return 0L; }#get pod id#getPodId#140#142#3#0#0#0#0#1#0#3#1
^{ // TODO Auto-generated method stub return null; }#get storage provider name#getStorageProviderName#145#148#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub return false; }#is in maintenance#isInMaintenance#151#154#4#0#0#0#0#1#1#3#1
^{ return null; //To change body of implemented methods use File | Settings | File Templates. }#get hypervisor#getHypervisor#157#159#3#0#0#0#0#1#1#5#1
^{ StoragePool pool = Mockito.mock(StoragePool.class); bsc = new BackupSnapshotCommand("secondaryStoragePoolURL", 101L, 102L, 103L, 104L, 105L, "volumePath", pool, "snapshotUuid", "snapshotName", "prevSnapshotUuid", "prevBackupUuid", false, "vmName", 5); bsa = new BackupSnapshotAnswer(bsc, true, "results", "bussname", false); }#set up#setUp#37#45#9#0#3#1#2#24#0#17#1
^{ @SuppressWarnings("unchecked") List<PhysicalNetworkSetupInfo> net = Mockito.mock(List.class); cnc = new CheckNetworkCommand(net); }#set up#setUp#37#41#5#0#2#1#1#5#0#17#1
^{ return Status.Up; }#get state#getState#41#43#3#0#0#0#0#1#0#6#1
^{ return 101L; }#get id#getId#46#48#3#0#0#0#0#1#0#3#1
^{ return "101"; }#get uuid#getUuid#51#53#3#0#0#0#0#1#0#3#1
^{ return "hostName"; }#get name#getName#56#58#3#0#0#0#0#1#0#3#1
^{ return Host.Type.Storage; }#get type#getType#61#63#3#0#0#0#0#1#0#7#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/1970 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get created#getCreated#66#74#9#0#3#2#2#6#0#14#1
^{ return Status.Up; }#get status#getStatus#77#79#3#0#0#0#0#1#0#6#1
^{ return "10.1.1.1"; }#get private ip address#getPrivateIpAddress#82#84#3#0#0#0#0#1#0#3#1
^{ return null; }#get storage url#getStorageUrl#87#88#2#0#0#0#0#1#0#2#1
^{ return "10.1.1.2"; }#get storage ip address#getStorageIpAddress#91#92#2#0#0#0#0#1#0#2#1
^{ return "bed9f83e-cac3-11e1-ac8a-0050568b007e"; }#get guid#getGuid#95#97#3#0#0#0#0#1#0#3#1
^{ return 100000000000L; }#get total memory#getTotalMemory#100#102#3#0#0#0#0#1#0#3#1
^{ return 1; }#get cpu sockets#getCpuSockets#105#107#3#0#0#0#0#1#0#3#1
^{ return 16; }#get cpus#getCpus#110#112#3#0#0#0#0#1#0#3#1
^{ return 2000000000L; }#get speed#getSpeed#115#117#3#0#0#0#0#1#0#3#1
^{ return 22; }#get proxy port#getProxyPort#120#122#3#0#0#0#0#1#0#3#1
^{ return 16L; }#get pod id#getPodId#125#127#3#0#0#0#0#1#0#3#1
^{ return 17L; }#get data center id#getDataCenterId#130#132#3#0#0#0#0#1#0#3#1
^{ return "parent"; }#get parent#getParent#135#137#3#0#0#0#0#1#0#3#1
^{ return "10.1.1.3"; }#get storage ip address deux#getStorageIpAddressDeux#140#142#3#0#0#0#0#1#0#3#1
^{ return HypervisorType.XenServer; }#get hypervisor type#getHypervisorType#145#147#3#0#0#0#0#1#0#6#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("01/01/2012 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get disconnected on#getDisconnectedOn#150#158#9#0#3#2#2#6#0#14#1
^{ return "4.0.1"; }#get version#getVersion#161#163#3#0#0#0#0#1#0#3#1
^{ return 100000000000L; }#get total size#getTotalSize#166#168#3#0#0#0#0#1#0#3#1
^{ return "capabilities"; }#get capabilities#getCapabilities#171#173#3#0#0#0#0#1#0#3#1
^{ return 1L; }#get last pinged#getLastPinged#176#178#3#0#0#0#0#1#0#3#1
^{ return 2L; }#get management server id#getManagementServerId#181#183#3#0#0#0#0#1#0#3#1
^{ Date date = null; try { date = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse("02/01/2012 12:12:12"); } catch (ParseException e) { e.printStackTrace(); } return date; }#get removed#getRemoved#186#194#9#0#3#2#2#6#0#14#1
^{ return 3L; }#get cluster id#getClusterId#197#199#3#0#0#0#0#1#0#3#1
^{ return "10.1.1.4"; }#get public ip address#getPublicIpAddress#202#204#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.8"; }#get public netmask#getPublicNetmask#207#209#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.16"; }#get private netmask#getPrivateNetmask#212#214#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.24"; }#get storage netmask#getStorageNetmask#217#219#3#0#0#0#0#1#0#3#1
^{ return "01:f4:17:38:0e:26"; }#get storage mac address#getStorageMacAddress#222#224#3#0#0#0#0#1#0#3#1
^{ return "02:f4:17:38:0e:26"; }#get public mac address#getPublicMacAddress#227#229#3#0#0#0#0#1#0#3#1
^{ return "03:f4:17:38:0e:26"; }#get private mac address#getPrivateMacAddress#232#234#3#0#0#0#0#1#0#3#1
^{ return "255.255.255.25"; }#get storage netmask deux#getStorageNetmaskDeux#237#239#3#0#0#0#0#1#0#3#1
^{ return "01:f4:17:38:0e:27"; }#get storage mac address deux#getStorageMacAddressDeux#242#244#3#0#0#0#0#1#0#3#1
^{ return "1.2.3.0"; }#get hypervisor version#getHypervisorVersion#247#249#3#0#0#0#0#1#0#3#1
^{ return false; }#is in maintenance states#isInMaintenanceStates#252#254#3#0#0#0#0#1#0#3#1
^{ return ResourceState.Enabled; }#get resource state#getResourceState#257#259#3#0#0#0#0#1#0#6#1
^{ String sa = hpg.generateConfiguration(cmd); StringBuilder sb = new StringBuilder(); for (String s : sa) { sb.append(s).append('\n'); } return sb.toString(); }#gen config#genConfig#112#118#7#2#5#5#1#8#0#26#2
^{ assert req1.getSequence() == req2.getSequence(); assert req1.getAgentId() == req2.getAgentId(); assert req1.getManagementServerId() == req2.getManagementServerId(); assert req1.isControl() == req2.isControl(); assert req1.isFromServer() == req2.isFromServer(); assert req1.executeInSequence() == req2.executeInSequence(); assert req1.stopOnError() == req2.stopOnError(); assert req1.getVersion().equals(req2.getVersion()); assert req1.getViaAgentId() == req2.getViaAgentId(); Command cmd1 = req1.getCommands(); Command cmd2 = req2.getCommands(); for (int i = 0; i < cmd1.length; i++) { assert cmd1[i].getClass().equals(cmd2[i].getClass()); } }#compare request#compareRequest#236#249#14#2#24#5#0#19#0#87#2
^{ final String guestIp = "10.10.10.10"; final String guestMac = "aa:aa:aa:aa:aa:aa"; final String vmName = "vm"; final Long vmId = 1L; final String signature = "sig"; final Long seqNum = 0L; final String proto = "abc"; final int startPort = 1; final int endPort = 2; final String allowedCidrs = new String {"1.2.3.4/5","6.7.8.9/0"}; final IpPortAndProto ingressRuleSet = new IpPortAndProto{new IpPortAndProto(proto, startPort, endPort, allowedCidrs)}; final IpPortAndProto egressRuleSet = new IpPortAndProto{new IpPortAndProto(proto, startPort, endPort, allowedCidrs)}; final List<String> secIps = new Vector<String>(); securityGroupRulesCmd = new SecurityGroupRulesCmd(guestIp, guestMac, vmName, vmId, signature, seqNum, ingressRuleSet, egressRuleSet, secIps); }#set up#setUp#45#60#16#0#4#13#1#36#0#62#1
^{ return executeInVR(routerIp, script, args, Duration.standardSeconds(60L)); }#execute in vr#executeInVR#99#101#3#3#2#3#0#6#0#16#1
^{ assertEquals(routerIp, ROUTERIP); verifyCommand(_currentCmd, script, args); return new ExecutionResult(true, null); }#execute in vr#executeInVR#104#108#5#4#3#4#2#10#0#19#1
^{ assertEquals(routerIp, ROUTERIP); verifyFile(_currentCmd, path, filename, content); return new ExecutionResult(true, null); }#create file in vr#createFileInVR#111#115#5#4#3#4#2#11#0#20#1
^{ cmd.setRouterAccessIp(ROUTERIP); _currentCmd = cmd; if (cmd instanceof IpAssocVpcCommand) { return prepareNetworkElementCommand((IpAssocVpcCommand)cmd); } else if (cmd instanceof IpAssocCommand) { return prepareNetworkElementCommand((IpAssocCommand)cmd); } else if (cmd instanceof SetupGuestNetworkCommand) { return prepareNetworkElementCommand((SetupGuestNetworkCommand)cmd); } else if (cmd instanceof SetSourceNatCommand) { return prepareNetworkElementCommand((SetSourceNatCommand)cmd); } else if (cmd instanceof SetNetworkACLCommand) { return prepareNetworkElementCommand((SetNetworkACLCommand)cmd); } return new ExecutionResult(true, null); }#prepare command#prepareCommand#118#133#16#1#7#1#2#21#0#37#6
^{ return new ExecutionResult(true, null); }#cleanup command#cleanupCommand#136#138#3#1#1#1#0#3#0#6#1
^{ _resource = new VirtualRoutingResource(this); try { _resource.configure("VRResource", new HashMap<String, Object>()); } catch (final ConfigurationException e) { e.printStackTrace(); } }#setup#setup#141#147#7#0#4#1#3#6#0#18#1
^{ if (cmd instanceof AggregationControlCommand) { verifyFile(cmd, path, filename, content); } else if (cmd instanceof LoadBalancerConfigCommand) { verifyFile((LoadBalancerConfigCommand)cmd, path, filename, content); } }#verify file#verifyFile#151#155#5#4#2#4#2#12#0#25#3
^{ if (cmd instanceof SetStaticRouteCommand) { verifyArgs((SetStaticRouteCommand) cmd, script, args); } else if (cmd instanceof SetStaticNatRulesCommand) { verifyArgs((SetStaticNatRulesCommand) cmd, script, args); } else if (cmd instanceof LoadBalancerConfigCommand) { verifyArgs((LoadBalancerConfigCommand) cmd, script, args); } else if (cmd instanceof SavePasswordCommand) { verifyArgs((SavePasswordCommand)cmd, script, args); } else if (cmd instanceof DhcpEntryCommand) { verifyArgs((DhcpEntryCommand)cmd, script, args); } else if (cmd instanceof DnsMasqConfigCommand) { verifyArgs((DnsMasqConfigCommand)cmd, script, args); } else if (cmd instanceof VmDataCommand) { verifyArgs((VmDataCommand)cmd, script, args); } else if (cmd instanceof RemoteAccessVpnCfgCommand) { verifyArgs((RemoteAccessVpnCfgCommand)cmd, script, args); } else if (cmd instanceof VpnUsersCfgCommand) { verifyArgs((VpnUsersCfgCommand)cmd, script, args); } else if (cmd instanceof Site2SiteVpnCfgCommand) { verifyArgs((Site2SiteVpnCfgCommand)cmd, script, args); } else if (cmd instanceof SetMonitorServiceCommand) { verifyArgs((SetMonitorServiceCommand)cmd, script, args); } else if (cmd instanceof SetupGuestNetworkCommand) { verifyArgs((SetupGuestNetworkCommand)cmd, script, args); } else if (cmd instanceof SetNetworkACLCommand) { verifyArgs((SetNetworkACLCommand)cmd, script, args); } else if (cmd instanceof SetSourceNatCommand) { verifyArgs((SetSourceNatCommand)cmd, script, args); } else if (cmd instanceof IpAssocCommand) { verifyArgs((IpAssocCommand)cmd, script, args); } if (cmd instanceof AggregationControlCommand) { verifyArgs((AggregationControlCommand)cmd, script, args); } }#verify command#verifyCommand#159#193#35#3#16#3#16#80#0#120#17
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#197#198#2#3#0#3#0#0#1#8#1
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#201#202#2#3#0#3#0#0#1#8#1
^{ //To change body of created methods use File | Settings | File Templates. }#verify args#verifyArgs#205#206#2#3#0#3#0#0#1#8#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesVpcCommand cmd = new SetPortForwardingRulesVpcCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules vpc command#generateSetPortForwardingRulesVpcCommand#229#236#8#0#9#2#4#34#0#32#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesCommand cmd = new SetPortForwardingRulesCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules command#generateSetPortForwardingRulesCommand#251#258#8#0#9#2#4#34#0#32#1
^{ final IpAddressTO ips = cmd.getIpAddresses(); for (final IpAddressTO ip : ips) { ip.setNicDevId(2); } return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#273#278#6#1#3#3#1#7#0#16#2
^{ final List<IpAddressTO> ips = new ArrayList<>(); ips.add(new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(2, "64.1.1.11", false, false, false, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false)); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocCommand cmd = new IpAssocCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 3); return cmd; }#generate ip assoc command#generateIpAssocCommand#281#291#11#0#13#3#5#52#0#46#1
^{ final IpAddressTO ips = cmd.getIpAddresses(); for (final IpAddressTO ip : ips) { ip.setNicDevId(2); } return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#306#311#6#1#3#3#1#7#0#16#2
^{ final List<IpAddressTO> ips = new ArrayList<IpAddressTO>(); ips.add(new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(2, "64.1.1.11", false, false, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false)); ips.add(new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false)); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(6, cmd.getAnswersCount()); // AnswersCount is clearly wrong as it doesn't know enough to tell return cmd; }#generate ip assoc vpc command#generateIpAssocVpcCommand#314#324#11#0#13#3#5#52#1#47#1
^{ if (cmd instanceof IpAssocVpcCommand) { _count ++; switch (_count) { case 1: assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; default: fail("Failed to recongize the match!"); } } else { assertEquals(script, VRScripts.UPDATE_CONFIG); _count ++; switch (_count) { case 1: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; case 2: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; case 3: assertEquals(VRScripts.IP_ASSOCIATION_CONFIG, args); break; default: fail("Failed to recongize the match!"); } } }#verify args#verifyArgs#327#352#26#3#8#3#10#31#0#46#8
^{ final IpAddressTO ip = cmd.getIpAddress(); ip.setNicDevId(1); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#364#367#4#1#3#2#1#6#0#13#1
^{ final IpAddressTO ip = new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); final SetSourceNatCommand cmd = new SetSourceNatCommand(ip, true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set source nat command#generateSetSourceNatCommand#370#374#5#0#3#2#1#19#0#17#1
^{ assertEquals(script, VRScripts.VPC_SOURCE_NAT); assertEquals(args, "-A -l 64.1.1.10 -c eth1"); }#verify args#verifyArgs#377#379#3#3#2#3#2#6#0#15#1
^{ final List<NetworkACLTO> acls = new ArrayList<>(); final List<String> cidrs = new ArrayList<>(); cidrs.add("192.168.0.1/24"); cidrs.add("192.168.0.2/24"); acls.add(new NetworkACLTO(1, "64", "TCP", 20, 80, false, false, cidrs, 0, 0, TrafficType.Ingress, true, 1)); acls.add(new NetworkACLTO(2, "64", "ICMP", 0, 0, false, false, cidrs, -1, -1, TrafficType.Ingress, false, 2)); acls.add(new NetworkACLTO(3, "65", "ALL", 0, 0, false, false, cidrs, -1, -1, TrafficType.Egress, true, 3)); final NicTO nic = new NicTO(); nic.setMac("01:23:45:67:89:AB"); nic.setIp("192.168.1.1"); nic.setNetmask("255.255.255.0"); final SetNetworkACLCommand cmd = new SetNetworkACLCommand(acls, nic); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set network acl command#generateSetNetworkACLCommand#395#410#16#0#16#4#9#65#0#69#1
^{ _count ++; switch (_count) { case 1: // FIXME Check the json content assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.NETWORK_ACL_CONFIG, args); // assertEquals(args, " -d eth3 -M 01:23:45:67:89:AB -i 192.168.1.1 -m 24 -a Egress:ALL:0:0:192.168.0.1/24-192.168.0.2/24:ACCEPT:," + // "Ingress:ICMP:0:0:192.168.0.1/24-192.168.0.2/24:DROP:,Ingress:TCP:20:80:192.168.0.1/24-192.168.0.2/24:ACCEPT:,"); break; case 2: assertEquals(VRScripts.UPDATE_CONFIG, script); assertEquals(VRScripts.NETWORK_ACL_CONFIG, args); break; default: fail(); } }#verify args#verifyArgs#413#428#16#3#5#3#6#17#3#31#4
^{ final NicTO nic = cmd.getNic(); nic.setDeviceId(3); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#432#435#4#1#3#2#1#6#0#13#1
^{ final NicTO nic = cmd.getNic(); nic.setDeviceId(4); return new ExecutionResult(true, null); }#prepare network element command#prepareNetworkElementCommand#445#448#4#1#3#2#1#6#0#13#1
^{ final NicTO nic = new NicTO(); nic.setMac("01:23:45:67:89:AB"); nic.setIp("10.1.1.1"); nic.setNetmask("255.255.255.0"); final SetupGuestNetworkCommand cmd = new SetupGuestNetworkCommand("10.1.1.10-10.1.1.20", "cloud.test", false, "8.8.8.8", "8.8.4.4", true, nic); cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, "10.1.1.2"); cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY, "10.1.1.1"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate setup guest network command#generateSetupGuestNetworkCommand#451#462#12#0#8#2#6#25#0#38#1
^{ // TODO Check the contents of the json file //assertEquals(script, VRScripts.VPC_GUEST_NETWORK); //assertEquals(args, " -C -M 01:23:45:67:89:AB -d eth4 -i 10.1.1.2 -g 10.1.1.1 -m 24 -n 10.1.1.0 -s 8.8.8.8,8.8.4.4 -e cloud.test"); }#verify args#verifyArgs#465#468#4#3#0#3#0#0#3#8#1
^{ final List<MonitorServiceTO> services = new ArrayList<>(); services.add(new MonitorServiceTO("service", "process", "name", "path", "file", true)); services.add(new MonitorServiceTO("service_2", "process_2", "name_2", "path_2", "file_2", false)); final SetMonitorServiceCommand cmd = new SetMonitorServiceCommand(services); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set monitor service command#generateSetMonitorServiceCommand#478#486#9#0#7#2#3#23#0#28#1
^{ assertEquals(script, VRScripts.MONITOR_SERVICE); assertEquals(args, " -c [service]:processname=process:servicename=name:pidfile=file:,[service_2]:processname=process_2:servicename=name_2:pidfile=file_2:,"); }#verify args#verifyArgs#489#491#3#3#2#3#2#6#0#15#1
^{ _count ++; assertEquals(script, VRScripts.S2SVPN_IPSEC); switch (_count) { case 1: assertEquals(args, "-A -l 64.10.1.10 -n 192.168.1.1/16 -g 64.10.1.1 -r 124.10.1.10 -N 192.168.100.1/24 -e \"3des-sha1,aes128-md5\" -i \"3des-sha1,aes128-sha1;modp1536\" -t 1800 -T 1800 -s \"psk\" -d 1"); break; case 2: assertEquals(args, "-A -l 64.10.1.10 -n 192.168.1.1/16 -g 64.10.1.1 -r 124.10.1.10 -N 192.168.100.1/24 -e \"3des-sha1,aes128-md5\" -i \"3des-sha1,aes128-sha1;modp1536\" -t 1800 -T 1800 -s \"psk\" -d 0 -p "); break; case 3: assertEquals(args, "-D -r 124.10.1.10 -n 192.168.1.1/16 -N 192.168.100.1/24"); break; default: fail(); } }#verify args#verifyArgs#514#529#16#3#5#3#6#18#0#22#5
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(true, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 1#generateRemoteAccessVpnCfgCommand1#547#551#5#0#3#1#2#13#0#16#1
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(false, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 2#generateRemoteAccessVpnCfgCommand2#554#558#5#0#3#1#2#13#0#16#1
^{ final RemoteAccessVpnCfgCommand cmd = new RemoteAccessVpnCfgCommand(true, "124.10.10.10", "10.10.1.1", "10.10.1.10-10.10.1.20", "sharedkey", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setLocalCidr("10.1.1.1/24"); return cmd; }#generate remote access vpn cfg command 3#generateRemoteAccessVpnCfgCommand3#561#565#5#0#3#1#2#13#0#16#1
^{ _count ++; assertEquals(script, VRScripts.VPN_L2TP); switch (_count) { case 1: assertEquals(args, "-r 10.10.1.10-10.10.1.20 -p sharedkey -s 124.10.10.10 -l 10.10.1.1 -c -C 10.1.1.1/24 -i eth2"); break; case 2: assertEquals(args, "-d -s 124.10.10.10 -C 10.1.1.1/24 -i eth2"); break; case 3: assertEquals(args, "-r 10.10.1.10-10.10.1.20 -p sharedkey -s 124.10.10.10 -l 10.10.1.1 -c -C 10.1.1.1/24 -i eth1"); break; default: fail(); } }#verify args#verifyArgs#568#583#16#3#5#3#6#18#0#22#5
^{ final List<FirewallRuleTO> rules = new ArrayList<>(); final List<String> sourceCidrs = new ArrayList<>(); sourceCidrs.add("10.10.1.1/24"); sourceCidrs.add("10.10.1.2/24"); rules.add(new FirewallRuleTO(1, "64.10.10.10", "TCP", 22, 80, false, false, Purpose.Firewall, sourceCidrs, 0, 0)); rules.add(new FirewallRuleTO(2, "64.10.10.10", "ICMP", 0, 0, false, false, Purpose.Firewall, sourceCidrs, -1, -1)); rules.add(new FirewallRuleTO(3, "64.10.10.10", "ICMP", 0, 0, true, true, Purpose.Firewall, sourceCidrs, -1, -1)); final SetFirewallRulesCommand cmd = new SetFirewallRulesCommand(rules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate set firewall rules command#generateSetFirewallRulesCommand#598#609#12#0#12#3#6#51#0#56#1
^{ final VmDataCommand cmd = new VmDataCommand("10.1.10.4", "i-4-VM", true); // if you add new metadata files, also edit systemvm/patches/debian/config/var/www/html/latest/.htaccess cmd.addVmData("userdata", "user-data", "user-data"); cmd.addVmData("metadata", "service-offering", "serviceOffering"); cmd.addVmData("metadata", "availability-zone", "zoneName"); cmd.addVmData("metadata", "local-ipv4", "10.1.10.4"); cmd.addVmData("metadata", "local-hostname", "test-vm"); cmd.addVmData("metadata", "public-ipv4", "110.1.10.4"); cmd.addVmData("metadata", "public-hostname", "hostname"); cmd.addVmData("metadata", "instance-id", "i-4-VM"); cmd.addVmData("metadata", "vm-id", "4"); cmd.addVmData("metadata", "public-keys", "publickey"); cmd.addVmData("metadata", "cloud-identifier", "CloudStack-{test}"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate vm data command#generateVmDataCommand#618#635#18#0#13#1#12#52#1#46#1
^{ assertEquals(script, VRScripts.UPDATE_CONFIG); assertEquals(args, VRScripts.VM_METADATA_CONFIG); }#verify args#verifyArgs#638#640#3#3#2#3#2#6#0#18#1
^{ final SavePasswordCommand cmd = new SavePasswordCommand("123pass", "10.1.10.4", "i-4-VM", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate save password command#generateSavePasswordCommand#649#652#4#0#2#1#1#9#0#13#1
^{ assertEquals(script, VRScripts.PASSWORD); assertEquals(args, "-v 10.1.10.4 -p 123pass"); }#verify args#verifyArgs#655#657#3#3#2#3#2#6#0#15#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", "10.1.10.2", "vm1", null, true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dhcp entry command 1#generateDhcpEntryCommand1#674#677#4#0#2#1#1#10#0#13#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", null, "vm1", "2001:db8:0:0:0:ff00:42:8329", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac())); return cmd; }#generate dhcp entry command 2#generateDhcpEntryCommand2#680#684#5#0#5#1#2#13#0#22#1
^{ final DhcpEntryCommand cmd = new DhcpEntryCommand("12:34:56:78:90:AB", "10.1.10.2", "vm1", "2001:db8:0:0:0:ff00:42:8329", true); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); cmd.setDuid(NetUtils.getDuidLL(cmd.getVmMac())); return cmd; }#generate dhcp entry command 3#generateDhcpEntryCommand3#687#691#5#0#5#1#2#13#0#22#1
^{ _count ++; assertEquals(script, VRScripts.DHCP); switch (_count) { case 1: assertEquals(args, " -m 12:34:56:78:90:AB -4 10.1.10.2 -h vm1"); break; case 2: assertEquals(args, " -m 12:34:56:78:90:AB -h vm1 -6 2001:db8:0:0:0:ff00:42:8329 -u 00:03:00:01:12:34:56:78:90:AB"); break; case 3: assertEquals(args, " -m 12:34:56:78:90:AB -4 10.1.10.2 -h vm1 -6 2001:db8:0:0:0:ff00:42:8329 -u 00:03:00:01:12:34:56:78:90:AB"); break; default: fail(); } }#verify args#verifyArgs#694#708#15#3#5#3#6#18#0#22#5
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final CreateIpAliasCommand cmd = new CreateIpAliasCommand("169.254.3.10", aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate create ip alias command#generateCreateIpAliasCommand#718#726#9#0#9#2#4#23#0#32#1
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final DeleteIpAliasCommand cmd = new DeleteIpAliasCommand("169.254.10.1", aliases, aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate delete ip alias command#generateDeleteIpAliasCommand#735#742#8#0#9#2#4#24#0#33#1
^{ final List<DhcpTO> dhcps = new ArrayList<>(); dhcps.add(new DhcpTO("10.1.20.2", "10.1.20.1", "255.255.255.0", "10.1.20.5")); dhcps.add(new DhcpTO("10.1.21.2", "10.1.21.1", "255.255.255.0", "10.1.21.5")); final DnsMasqConfigCommand cmd = new DnsMasqConfigCommand(dhcps); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dns masq config command#generateDnsMasqConfigCommand#751#757#7#0#7#2#3#19#0#28#1
^{ assertEquals(script, VRScripts.DNSMASQ_CONFIG); assertEquals(args, "10.1.20.2:10.1.20.1:255.255.255.0:10.1.20.5-10.1.21.2:10.1.21.1:255.255.255.0:10.1.21.5-"); }#verify args#verifyArgs#760#762#3#3#2#3#2#6#0#15#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, null, "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command 1#generateLoadBalancerConfigCommand1#777#789#13#0#16#5#6#46#0#64#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); nic.setIp("10.1.10.2"); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, Long.valueOf(1), "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command 2#generateLoadBalancerConfigCommand2#792#805#14#0#18#5#7#49#0#70#1
^{ _count ++; switch (_count) { case 1: case 3: _file = path + filename; assertEquals(path, "/etc/haproxy/"); assertTrue(filename.startsWith("haproxy.cfg.new")); assertEquals(content, "global\n" + "\tlog 127.0.0.1:3914 local0 warning\n" + "\tmaxconn 1000\n" + "\tmaxpipes 250\n" + "\tchroot /var/lib/haproxy\n" + "\tuser haproxy\n" + "\tgroup haproxy\n" + "\tdaemon\n" + "\t \n" + "defaults\n" + "\tlog global\n" + "\tmode tcp\n" + "\toption dontlognull\n" + "\tretries 3\n" + "\toption redispatch\n" + "\toption forwardfor\n" + "\toption forceclose\n" + "\ttimeout connect 5000\n" + "\ttimeout client 50000\n" + "\ttimeout server 50000\n" + "\n" + "listen stats_on_guest 10.1.10.2:8081\n" + "\tmode http\n" + "\toption httpclose\n" + "\tstats enable\n" + "\tstats uri /admin?stats\n" + "\tstats realm Haproxy\\ Statistics\n" + "\tstats auth admin1:AdMiN123\n" + "\n" + "\t \n" + "listen 64_10_1_10-80 64.10.1.10:80\n" + "\tbalance algo\n" + "\tserver 64_10_1_10-80_0 10.1.10.2:80 check\n" + "\tmode http\n" + "\toption httpclose\n" + "\t \n" + "\t \n"); break; default: fail(); } }#verify file#verifyFile#808#855#48#4#5#4#6#15#0#24#4
^{ _count ++; switch (_count) { case 2: assertEquals(script, VRScripts.LB); assertEquals(args, " -i 10.1.10.2 -f " + _file + " -a 64.10.1.10:80:, -s 10.1.10.2:8081:0/0:,,"); break; default: fail(); } }#verify args#verifyArgs#859#867#9#3#3#3#4#10#0#19#3
^{ assertEquals(script, VRScripts.VR_CFG); assertTrue(args.startsWith("-c /var/cache/cloud/VR-")); assertTrue(args.endsWith(".cfg")); }#verify args#verifyArgs#915#918#4#3#5#3#3#9#0#21#1
^{ final List<LoadBalancerTO> lbs = new ArrayList<>(); final List<LbDestination> dests = new ArrayList<>(); dests.add(new LbDestination(80, 8080, "10.1.10.2", false)); dests.add(new LbDestination(80, 8080, "10.1.10.2", true)); lbs.add(new LoadBalancerTO(UUID.randomUUID().toString(), "64.10.1.10", 80, "tcp", "algo", false, false, false, dests)); final LoadBalancerTO arrayLbs = new LoadBalancerTO[lbs.size()]; lbs.toArray(arrayLbs); final NicTO nic = new NicTO(); final LoadBalancerConfigCommand cmd = new LoadBalancerConfigCommand(arrayLbs, "64.10.2.10", "10.1.10.2", "192.168.1.2", nic, null, "1000", false); cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, "10.1.10.2"); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate load balancer config command#generateLoadBalancerConfigCommand#223#238#16#0#16#5#6#46#0#64#1
^{ final List<PortForwardingRuleTO> pfRules = new ArrayList<>(); pfRules.add(new PortForwardingRuleTO(1, "64.1.1.10", 22, 80, "10.10.1.10", 22, 80, "TCP", false, false)); pfRules.add(new PortForwardingRuleTO(2, "64.1.1.11", 8080, 8080, "10.10.1.11", 8080, 8080, "UDP", true, false)); final SetPortForwardingRulesVpcCommand cmd = new SetPortForwardingRulesVpcCommand(pfRules); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(cmd.getAnswersCount(), 2); return cmd; }#generate set port forwarding rules vpc command#generateSetPortForwardingRulesVpcCommand#241#250#10#0#9#2#4#34#0#32#1
^{ final List<DhcpTO> dhcps = new ArrayList<>(); dhcps.add(new DhcpTO("10.1.20.2", "10.1.20.1", "255.255.255.0", "10.1.20.5")); dhcps.add(new DhcpTO("10.1.21.2", "10.1.21.1", "255.255.255.0", "10.1.21.5")); final DnsMasqConfigCommand cmd = new DnsMasqConfigCommand(dhcps); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate dns masq config command#generateDnsMasqConfigCommand#253#260#8#0#7#2#3#19#0#28#1
^{ final List<IpAliasTO> aliases = new ArrayList<>(); aliases.add(new IpAliasTO("169.254.3.10", "255.255.255.0", "1")); aliases.add(new IpAliasTO("169.254.3.11", "255.255.255.0", "2")); aliases.add(new IpAliasTO("169.254.3.12", "255.255.255.0", "3")); final DeleteIpAliasCommand cmd = new DeleteIpAliasCommand("169.254.10.1", aliases, aliases); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); return cmd; }#generate delete ip alias command#generateDeleteIpAliasCommand#263#271#9#0#9#2#4#24#0#33#1
^{ final List<IpAddressTO> ips = new ArrayList<IpAddressTO>(); IpAddressTO ip1 = new IpAddressTO(1, "64.1.1.10", true, true, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); IpAddressTO ip2 = new IpAddressTO(2, "64.1.1.11", false, false, true, "vlan://64", "64.1.1.1", "255.255.255.0", "01:23:45:67:89:AB", 1000, false); IpAddressTO ip3 = new IpAddressTO(3, "65.1.1.11", true, false, false, "vlan://65", "65.1.1.1", "255.255.255.0", "11:23:45:67:89:AB", 1000, false); ip1.setTrafficType(TrafficType.Public); ip2.setTrafficType(TrafficType.Public); ip3.setTrafficType(TrafficType.Public); ips.add(ip1); ips.add(ip2); ips.add(ip3); final IpAddressTO ipArray = ips.toArray(new IpAddressTO[ips.size()]); final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipArray); cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, ROUTERNAME); assertEquals(6, cmd.getAnswersCount()); // AnswersCount is clearly wrong as it doesn't know enough to tell return cmd; }#generate ip assoc vpc command#generateIpAssocVpcCommand#274#291#18#0#16#6#8#61#1#74#1
^{ String url = new File("pom.xml").toURI().toURL().toString(); TemplateDownloader td = new LocalTemplateDownloader(null, url, System.getProperty("java.io.tmpdir"), TemplateDownloader.DEFAULT_MAX_TEMPLATE_SIZE_IN_BYTES, null); long bytes = td.download(true, null); if (!(bytes > 0)) { fail("Failed download"); } }#local template downloader test#localTemplateDownloaderTest#31#37#7#0#8#3#1#16#0#27#2
^{ processor = Mockito.spy(new VhdProcessor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("VHD Processor", params); }#set up#setUp#47#52#6#0#5#1#3#10#0#29#1
^{ processor = PowerMockito.spy(new OVAProcessor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("OVA Processor", params); }#set up#setUp#48#53#6#0#5#1#3#10#0#29#1
^{ processor = Mockito.spy(new QCOW2Processor()); Map<String, Object> params = new HashMap<String, Object>(); params.put(StorageLayer.InstanceConfigKey, mockStorageLayer); processor.configure("VHD Processor", params); }#set up#setUp#44#49#6#0#5#1#3#10#0#29#1
^{ return data; }#get data#getData#37#38#2#0#0#0#0#1#0#3#1
^{ super(); }#create object answer#CreateObjectAnswer#28#29#2#0#1#0#1#1#0#2#1
^{ super(); this.data = data; }#create object answer#CreateObjectAnswer#32#34#3#1#1#1#2#2#0#8#1
^{ super(null, false, errMsg); }#create object answer#CreateObjectAnswer#41#42#2#1#1#1#1#4#0#5#1
^{ return controllerInfo; }#get controller info#getControllerInfo#44#45#2#0#0#0#0#1#0#6#1
^{ this.controllerInfo = controllerInfo; }#set controller info#setControllerInfo#47#48#2#1#0#1#1#1#0#11#1
^{ return false; }#execute in sequence#executeInSequence#51#53#3#0#0#0#0#1#0#3#1
^{ return disk; }#get disk#getDisk#56#57#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#60#61#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#64#65#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#68#69#2#1#0#1#1#1#0#8#1
^{ this.inSeq = inSeq; }#set execute in sequence#setExecuteInSequence#72#74#3#1#0#1#1#1#0#9#1
^{ super(); this.disk = disk; this.vmName = vmName; }#attach command#AttachCommand#32#35#4#2#1#2#3#3#0#14#1
^{ super(); this.disk = disk; this.vmName = vmName; this.controllerInfo = controllerInfo; }#attach command#AttachCommand#37#41#5#3#1#3#4#4#0#23#1
^{ return jobId; }#get job id#getJobId#41#42#2#0#0#0#0#1#0#3#1
^{ this.request = request; }#set request#setRequest#45#46#2#1#0#1#1#1#0#8#1
^{ return request; }#get request#getRequest#49#50#2#0#0#0#0#1#0#3#1
^{ super(); }#download progress command#DownloadProgressCommand#30#31#2#0#1#0#1#1#0#2#1
^{ super(cmd); this.jobId = jobId; this.setRequest(req); }#download progress command#DownloadProgressCommand#34#38#5#3#2#3#3#5#0#17#1
^{ return dataStore; }#get data store#getDataStore#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ super(); dataStore = uri; }#create primary data store cmd#CreatePrimaryDataStoreCmd#26#28#3#1#1#1#2#2#0#6#1
^{ return destTO; }#get dest to#getDestTO#43#44#2#0#0#0#0#1#0#3#1
^{ this.srcTO = srcTO; }#set src to#setSrcTO#47#48#2#1#0#1#1#1#0#8#1
^{ this.destTO = destTO; }#set dest to#setDestTO#51#52#2#1#0#1#1#1#0#8#1
^{ return srcTO; }#get src to#getSrcTO#55#56#2#0#0#0#0#1#0#3#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#4#1
^{ return cacheTO; }#get cache to#getCacheTO#64#65#2#0#0#0#0#1#0#3#1
^{ this.cacheTO = cacheTO; }#set cache to#setCacheTO#68#69#2#1#0#1#1#1#0#8#1
^{ return getWait() * 1000; }#get wait in mill seconds#getWaitInMillSeconds#72#73#2#0#1#0#0#1#0#3#1
^{ this.options = options; }#set options#setOptions#76#77#2#1#0#1#1#1#0#11#1
^{ return options; }#get options#getOptions#80#81#2#0#0#0#0#1#0#6#1
^{ this.options2 = options2; }#set options 2#setOptions2#84#85#2#1#0#1#1#1#0#11#1
^{ return options2; }#get options 2#getOptions2#88#89#2#0#0#0#0#1#0#6#1
^{ executeInSequence = inSeq; }#set execute in sequence#setExecuteInSequence#92#94#3#1#0#1#1#1#0#7#1
^{ super(); srcTO = srcData; destTO = destData; setWait(timeout); this.executeInSequence = executeInSequence; }#copy command#CopyCommand#35#40#6#4#2#4#5#6#0#20#1
^{ return dataStore; }#get data store#getDataStore#36#37#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#40#42#3#0#0#0#0#1#0#3#1
^{ super(); dataStore = uri; }#attach primary data store cmd#AttachPrimaryDataStoreCmd#31#33#3#1#1#1#2#2#0#6#1
^{ return dataTO; }#get data to#getDataTO#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ dataTO = data; }#forget object cmd#ForgetObjectCmd#27#28#2#1#0#1#1#1#0#5#1
^{ return this.newData; }#get new data#getNewData#33#34#2#0#0#0#0#1#0#5#1
^{ super(null); this.newData = newData; }#copy cmd answer#CopyCmdAnswer#28#30#3#1#1#1#2#3#0#8#1
^{ super(null, false, errMsg); }#copy cmd answer#CopyCmdAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return false; }#execute in sequence#executeInSequence#38#40#3#0#0#0#0#1#0#3#1
^{ return disk; }#get disk#getDisk#43#44#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#47#48#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#51#52#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#55#56#2#1#0#1#1#1#0#8#1
^{ _managed = managed; }#set managed#setManaged#59#60#2#1#0#1#1#1#0#6#1
^{ return _managed; }#is managed#isManaged#63#64#2#0#0#0#0#1#0#3#1
^{ _iScsiName = iScsiName; }#set i scsi name#set_iScsiName#67#68#2#1#0#1#1#1#0#6#1
^{ return _iScsiName; }#get i scsi name#get_iScsiName#71#72#2#0#0#0#0#1#0#3#1
^{ _storageHost = storageHost; }#set storage host#setStorageHost#75#76#2#1#0#1#1#1#0#6#1
^{ return _storageHost; }#get storage host#getStorageHost#79#80#2#0#0#0#0#1#0#3#1
^{ _storagePort = storagePort; }#set storage port#setStoragePort#83#84#2#1#0#1#1#1#0#6#1
^{ return _storagePort; }#get storage port#getStoragePort#87#88#2#0#0#0#0#1#0#3#1
^{ super(); this.disk = disk; this.vmName = vmName; }#dettach command#DettachCommand#32#35#4#2#1#2#3#3#0#14#1
^{ this.size = size; }#set size#setSize#37#38#2#1#0#1#1#1#0#8#1
^{ return size; }#get size#getSize#41#42#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#45#46#2#1#0#1#1#1#0#8#1
^{ return path; }#get path#getPath#49#50#2#0#0#0#0#1#0#3#1
^{ this.format = format; }#set format#setFormat#53#54#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#57#58#2#0#0#0#0#1#0#3#1
^{ super(null, false, errMsg); }#resignature answer#ResignatureAnswer#33#34#2#1#1#1#1#4#0#5#1
^{ _path = path; }#set path#setPath#34#35#2#1#0#1#1#1#0#6#1
^{ return _path; }#get path#getPath#38#39#2#0#0#0#0#1#0#3#1
^{ super(null, false, errMsg); }#snapshot and copy answer#SnapshotAndCopyAnswer#30#31#2#1#1#1#1#4#0#5#1
^{ return _uuidOfSourceVdi; }#get uuid of source vdi#getUuidOfSourceVdi#37#38#2#0#0#0#0#1#0#3#1
^{ return _sourceDetails; }#get source details#getSourceDetails#41#42#2#0#0#0#0#1#0#6#1
^{ return _destDetails; }#get dest details#getDestDetails#45#46#2#0#0#0#0#1#0#6#1
^{ _executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#49#51#3#1#0#1#1#1#0#7#1
^{ return _executeInSequence; }#execute in sequence#executeInSequence#54#56#3#0#0#0#0#1#0#4#1
^{ _uuidOfSourceVdi = uuidOfSourceVdi; _sourceDetails = sourceDetails; _destDetails = destDetails; }#snapshot and copy command#SnapshotAndCopyCommand#31#34#4#3#0#3#3#3#0#19#1
^{ return disk; }#get disk#getDisk#41#42#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#45#46#2#1#0#1#1#1#0#8#1
^{ super(null); }#attach answer#AttachAnswer#28#29#2#0#1#0#1#2#0#2#1
^{ super(null); setDisk(disk); }#attach answer#AttachAnswer#32#34#3#1#2#1#2#4#0#6#1
^{ super(null, false, errMsg); }#attach answer#AttachAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return remoteEndPoint; }#get remote end point#getRemoteEndPoint#74#75#2#0#0#0#0#1#0#3#1
^{ this.remoteEndPoint = remoteEndPoint; }#set remote end point#setRemoteEndPoint#78#79#2#1#0#1#1#1#0#8#1
^{ return dataTo; }#get data to#getDataTo#82#83#2#0#0#0#0#1#0#3#1
^{ this.dataTo = dataTo; }#set data to#setDataTo#86#87#2#1#0#1#1#1#0#8#1
^{ return dataToRole; }#get data to role#getDataToRole#90#91#2#0#0#0#0#1#0#3#1
^{ this.dataToRole = dataToRole; }#set data to role#setDataToRole#94#95#2#1#0#1#1#1#0#8#1
^{ return localPath; }#get local path#getLocalPath#98#99#2#0#0#0#0#1#0#3#1
^{ this.localPath = localPath; }#set local path#setLocalPath#102#103#2#1#0#1#1#1#0#8#1
^{ return requiresHvm; }#get requires hvm#getRequiresHvm#106#107#2#0#0#0#0#1#0#3#1
^{ this.requiresHvm = requiresHvm; }#set requires hvm#setRequiresHvm#110#111#2#1#0#1#1#1#0#8#1
^{ return imageFormat; }#get image format#getImageFormat#114#115#2#0#0#0#0#1#0#3#1
^{ this.imageFormat = imageFormat; }#set image format#setImageFormat#118#119#2#1#0#1#1#1#0#8#1
^{ return entityId; }#get entity id#getEntityId#122#123#2#0#0#0#0#1#0#3#1
^{ this.entityId = entityId; }#set entity id#setEntityId#126#127#2#1#0#1#1#1#0#8#1
^{ return entityUUID; }#get entity uuid#getEntityUUID#130#131#2#0#0#0#0#1#0#3#1
^{ this.entityUUID = entityUUID; }#set entity uuid#setEntityUUID#134#135#2#1#0#1#1#1#0#8#1
^{ return absolutePath; }#get absolute path#getAbsolutePath#138#139#2#0#0#0#0#1#0#3#1
^{ this.absolutePath = absolutePath; }#set absolute path#setAbsolutePath#142#143#2#1#0#1#1#1#0#8#1
^{ return checksum; }#get checksum#getChecksum#146#147#2#0#0#0#0#1#0#3#1
^{ this.checksum = checksum; }#set checksum#setChecksum#150#151#2#1#0#1#1#1#0#8#1
^{ return type; }#get type#getType#154#155#2#0#0#0#0#1#0#3#1
^{ this.type = type; }#set type#setType#158#159#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#162#163#2#0#0#0#0#1#0#3#1
^{ this.name = name; }#set name#setName#166#167#2#1#0#1#1#1#0#8#1
^{ return maxUploadSize; }#get max upload size#getMaxUploadSize#170#171#2#0#0#0#0#1#0#3#1
^{ this.maxUploadSize = maxUploadSize; }#set max upload size#setMaxUploadSize#174#175#2#1#0#1#1#1#0#8#1
^{ return description; }#get description#getDescription#178#179#2#0#0#0#0#1#0#3#1
^{ this.description = description; }#set description#setDescription#182#183#2#1#0#1#1#1#0#8#1
^{ this.defaultMaxAccountSecondaryStorage = defaultMaxAccountSecondaryStorage; }#set default max account secondary storage#setDefaultMaxAccountSecondaryStorage#186#187#2#1#0#1#1#1#0#8#1
^{ return defaultMaxAccountSecondaryStorage; }#get default max account secondary storage#getDefaultMaxAccountSecondaryStorage#190#191#2#0#0#0#0#1#0#3#1
^{ this.accountId = accountId; }#set account id#setAccountId#194#195#2#1#0#1#1#1#0#8#1
^{ return accountId; }#get account id#getAccountId#198#199#2#0#0#0#0#1#0#3#1
^{ return nfsVersion; }#get nfs version#getNfsVersion#202#203#2#0#0#0#0#1#0#3#1
^{ this.nfsVersion = nfsVersion; }#set nfs version#setNfsVersion#206#207#2#1#0#1#1#1#0#8#1
^{ this.entityId = entityId; this.entityUUID = entityUUID; this.absolutePath = absolutePath; this.checksum = checksum; this.type = type; this.name = name; this.imageFormat = imageFormat; this.dataTo = dataTo; this.dataToRole = dataToRole; }#template or volume post upload command#TemplateOrVolumePostUploadCommand#58#68#11#9#0#9#9#9#0#55#1
^{ return disk; }#get disk#getDisk#41#42#2#0#0#0#0#1#0#3#1
^{ this.disk = disk; }#set disk#setDisk#45#46#2#1#0#1#1#1#0#8#1
^{ super(null); }#dettach answer#DettachAnswer#28#29#2#0#1#0#1#2#0#2#1
^{ super(null); setDisk(disk); }#dettach answer#DettachAnswer#32#34#3#1#2#1#2#4#0#6#1
^{ super(null, false, errMsg); }#dettach answer#DettachAnswer#37#38#2#1#1#1#1#4#0#5#1
^{ return false; }#execute in sequence#executeInSequence#36#38#3#0#0#0#0#1#0#3#1
^{ return data; }#get data#getData#41#42#2#0#0#0#0#1#0#3#1
^{ super(); data = obj; }#create object command#CreateObjectCommand#27#29#3#1#1#1#2#2#0#6#1
^{ super(); }#create object command#CreateObjectCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return status; }#get status#getStatus#53#54#2#0#0#0#0#1#0#3#1
^{ return virtualSize; }#get virtual size#getVirtualSize#57#58#2#0#0#0#0#1#0#3#1
^{ this.virtualSize = virtualSize; }#set virtual size#setVirtualSize#61#62#2#1#0#1#1#1#0#8#1
^{ return physicalSize; }#get physical size#getPhysicalSize#65#66#2#0#0#0#0#1#0#3#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#69#70#2#1#0#1#1#1#0#8#1
^{ return installPath; }#get install path#getInstallPath#73#74#2#0#0#0#0#1#0#3#1
^{ this.installPath = installPath; }#set install path#setInstallPath#77#78#2#1#0#1#1#1#0#8#1
^{ return downloadPercent; }#get download percent#getDownloadPercent#81#82#2#0#0#0#0#1#0#3#1
^{ this.downloadPercent = downloadPercent; }#set download percent#setDownloadPercent#85#86#2#1#0#1#1#1#0#8#1
^{ super(cmd, false, msg); this.status = status; }#upload status answer#UploadStatusAnswer#38#40#3#3#1#3#2#5#0#14#1
^{ super(cmd, false, e.getMessage()); this.status = UploadStatus.ERROR; }#upload status answer#UploadStatusAnswer#43#45#3#2#2#2#2#5#0#16#1
^{ super(cmd, true, null); this.status = status; }#upload status answer#UploadStatusAnswer#48#50#3#2#1#2#2#5#0#11#1
^{ return id; }#get id#getId#99#101#3#0#0#0#0#1#0#4#1
^{ this.hvm = hvm; }#set hvm#setHvm#104#105#2#1#0#1#1#1#0#8#1
^{ return hvm; }#is hvm#isHvm#108#109#2#0#0#0#0#1#0#3#1
^{ return description; }#get description#getDescription#112#113#2#0#0#0#0#1#0#3#1
^{ return checksum; }#get checksum#getChecksum#116#117#2#0#0#0#0#1#0#3#1
^{ this.description = description; }#set description#setDescription#120#121#2#1#0#1#1#1#0#8#1
^{ this.checksum = checksum; }#set checksum#setChecksum#124#125#2#1#0#1#1#1#0#8#1
^{ return false; }#execute in sequence#executeInSequence#128#130#3#0#0#0#0#1#0#3#1
^{ return auth; }#get auth#getAuth#133#134#2#0#0#0#0#1#0#3#1
^{ auth = new PasswordAuth(userName, passwd); }#set creds#setCreds#137#138#2#2#1#2#1#3#0#10#1
^{ return _proxy; }#get proxy#getProxy#141#142#2#0#0#0#0#1#0#3#1
^{ _proxy = proxy; }#set proxy#setProxy#145#146#2#1#0#1#1#1#0#6#1
^{ return maxDownloadSizeInBytes; }#get max download size in bytes#getMaxDownloadSizeInBytes#149#150#2#0#0#0#0#1#0#3#1
^{ return resourceType; }#get resource type#getResourceType#153#154#2#0#0#0#0#1#0#3#1
^{ this.resourceType = resourceType; }#set resource type#setResourceType#157#158#2#1#0#1#1#1#0#8#1
^{ return _store; }#get data store#getDataStore#161#162#2#0#0#0#0#1#0#3#1
^{ this._store = store; }#set data store#setDataStore#165#166#2#1#0#1#1#1#0#8#1
^{ return installPath; }#get install path#getInstallPath#169#170#2#0#0#0#0#1#0#3#1
^{ this.installPath = installPath; }#set install path#setInstallPath#173#174#2#1#0#1#1#1#0#8#1
^{ this.cacheStore = cacheStore; }#set cache store#setCacheStore#177#178#2#1#0#1#1#1#0#8#1
^{ return cacheStore; }#get cache store#getCacheStore#181#182#2#0#0#0#0#1#0#3#1
^{ super(that); hvm = that.hvm; checksum = that.checksum; id = that.id; description = that.description; auth = that.getAuth(); setSecUrl(that.getSecUrl()); maxDownloadSizeInBytes = that.getMaxDownloadSizeInBytes(); resourceType = that.resourceType; installPath = that.installPath; _store = that._store; _proxy = that._proxy; }#download command#DownloadCommand#54#66#13#1#5#1#12#14#0#49#1
^{ super(template.getName(), template.getOrigUrl(), template.getFormat(), template.getAccountId()); _store = template.getDataStore(); installPath = template.getPath(); hvm = template.isRequiresHvm(); checksum = template.getChecksum(); id = template.getId(); description = template.getDescription(); if (_store instanceof NfsTO) { setSecUrl(((NfsTO)_store).getUrl()); } this.maxDownloadSizeInBytes = maxDownloadSizeInBytes; }#download command#DownloadCommand#69#81#13#2#13#2#9#15#0#52#2
^{ this(template, maxDownloadSizeInBytes); auth = new PasswordAuth(user, passwd); }#download command#DownloadCommand#84#86#3#4#2#4#2#6#0#16#1
^{ super(volume.getName(), url, format, volume.getAccountId()); checksum = checkSum; id = volume.getVolumeId(); installPath = volume.getPath(); _store = volume.getDataStore(); this.maxDownloadSizeInBytes = maxDownloadSizeInBytes; resourceType = ResourceType.VOLUME; }#download command#DownloadCommand#89#96#8#5#6#5#7#11#0#42#1
^{ return dataTO; }#get data to#getDataTO#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ this.dataTO = dataTO; }#introduce object cmd#IntroduceObjectCmd#27#28#2#1#0#1#1#1#0#7#1
^{ return details; }#get details#getDetails#35#36#2#0#0#0#0#1#0#6#1
^{ this.executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#39#41#3#1#0#1#1#1#0#9#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#44#46#3#0#0#0#0#1#0#4#1
^{ this.details = Utils.getImmutableMap(details); }#resignature command#ResignatureCommand#31#32#2#1#1#1#1#2#0#13#1
^{ return dataTO; }#get data to#getDataTO#32#33#2#0#0#0#0#1#0#3#1
^{ this.dataTO = dataTO; }#introduce object answer#IntroduceObjectAnswer#28#29#2#1#0#1#1#1#0#7#1
^{ return entityUuid; }#get entity uuid#getEntityUuid#40#41#2#0#0#0#0#1#0#3#1
^{ return entityType; }#get entity type#getEntityType#44#45#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#48#50#3#0#0#0#0#1#0#3#1
^{ this.entityUuid = entityUuid; this.entityType = entityType; }#upload status command#UploadStatusCommand#35#37#3#2#0#2#2#2#0#13#1
^{ this.uuid = uuid; }#set uuid#setUuid#34#35#2#1#0#1#1#1#0#8#1
^{ return uuid; }#get uuid#getUuid#38#39#2#0#0#0#0#1#0#3#1
^{ this.capacity = capacity; }#set capacity#setCapacity#42#43#2#1#0#1#1#1#0#8#1
^{ return capacity; }#get capacity#getCapacity#46#47#2#0#0#0#0#1#0#3#1
^{ this.avail = avail; }#set available#setAvailable#50#51#2#1#0#1#1#1#0#8#1
^{ return avail; }#get available#getAvailable#54#55#2#0#0#0#0#1#0#3#1
^{ super(cmd); }#attach primary data store answer#AttachPrimaryDataStoreAnswer#30#31#2#1#1#1#1#2#0#5#1
^{ return false; }#execute in sequence#executeInSequence#36#38#3#0#0#0#0#1#0#3#1
^{ return data; }#get data#getData#41#42#2#0#0#0#0#1#0#3#1
^{ super(); this.data = data; }#delete command#DeleteCommand#27#29#3#1#1#1#2#2#0#8#1
^{ super(); }#delete command#DeleteCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return this.data; }#get data#getData#36#37#2#0#0#0#0#1#0#5#1
^{ _executeInSequence = executeInSequence; }#set execute in sequence#setExecuteInSequence#40#42#3#1#0#1#1#1#0#7#1
^{ return _executeInSequence; }#execute in sequence#executeInSequence#45#47#3#0#0#0#0#1#0#4#1
^{ super(); this.data = data; }#revert snapshot command#RevertSnapshotCommand#27#29#3#1#1#1#2#2#0#8#1
^{ super(); }#revert snapshot command#RevertSnapshotCommand#32#33#2#0#1#0#1#1#0#2#1
^{ return this.path; }#get path#getPath#82#84#3#0#0#0#0#1#0#6#1
^{ return this.uuid; }#get uuid#getUuid#87#88#2#0#0#0#0#1#0#5#1
^{ return id; }#get id#getId#91#93#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#96#97#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#100#101#2#0#0#0#0#1#0#3#1
^{ return accountId; }#get account id#getAccountId#104#105#2#0#0#0#0#1#0#3#1
^{ return checksum; }#get checksum#getChecksum#108#109#2#0#0#0#0#1#0#3#1
^{ return hvm; }#is requires hvm#isRequiresHvm#112#113#2#0#0#0#0#1#0#3#1
^{ this.hvm = hvm; }#set requires hvm#setRequiresHvm#116#117#2#1#0#1#1#1#0#8#1
^{ return displayText; }#get description#getDescription#120#121#2#0#0#0#0#1#0#3#1
^{ this.displayText = desc; }#set description#setDescription#124#125#2#1#0#1#1#1#0#8#1
^{ return DataObjectType.TEMPLATE; }#get object type#getObjectType#128#130#3#0#0#0#0#1#0#6#1
^{ return this.imageDataStore; }#get data store#getDataStore#133#135#3#0#0#0#0#1#0#6#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#138#139#2#1#0#1#1#1#0#10#1
^{ return this.hypervisorType; }#get hypervisor type#getHypervisorType#142#144#3#0#0#0#0#1#0#8#1
^{ this.imageDataStore = store; }#set data store#setDataStore#147#148#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#154#155#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#158#159#2#1#0#1#1#1#0#8#1
^{ this.uuid = uuid; }#set uuid#setUuid#162#163#2#1#0#1#1#1#0#8#1
^{ this.name = name; }#set name#setName#166#167#2#1#0#1#1#1#0#8#1
^{ return origUrl; }#get orig url#getOrigUrl#170#171#2#0#0#0#0#1#0#3#1
^{ this.origUrl = origUrl; }#set orig url#setOrigUrl#174#175#2#1#0#1#1#1#0#8#1
^{ this.format = format; }#set format#setFormat#178#179#2#1#0#1#1#1#0#8#1
^{ this.accountId = accountId; }#set account id#setAccountId#182#183#2#1#0#1#1#1#0#8#1
^{ this.checksum = checksum; }#set checksum#setChecksum#186#187#2#1#0#1#1#1#0#8#1
^{ this.imageDataStore = imageDataStore; }#set image data store#setImageDataStore#190#191#2#1#0#1#1#1#0#8#1
^{ return guestOsType; }#get guest os type#getGuestOsType#194#195#2#0#0#0#0#1#0#3#1
^{ this.guestOsType = guestOsType; }#set guest os type#setGuestOsType#198#199#2#1#0#1#1#1#0#8#1
^{ return size; }#get size#getSize#202#203#2#0#0#0#0#1#0#3#1
^{ this.size = size; }#set size#setSize#206#207#2#1#0#1#1#1#0#8#1
^{ return physicalSize; }#get physical size#getPhysicalSize#210#211#2#0#0#0#0#1#0#3#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#214#215#2#1#0#1#1#1#0#8#1
^{ return new StringBuilder("TemplateTO[id=").append(id).append("|origUrl=").append(origUrl).append("|name").append(name).append("]").toString(); }#to string#toString#218#220#3#0#8#0#0#8#0#14#1
^{ this.uuid = template.getUuid(); this.id = template.getId(); this.origUrl = template.getUrl(); this.displayText = template.getDisplayText(); this.checksum = template.getChecksum(); this.hvm = template.isRequiresHvm(); this.accountId = template.getAccountId(); this.name = template.getUniqueName(); this.format = template.getFormat(); this.hypervisorType = template.getHypervisorType(); }#template object to#TemplateObjectTO#52#62#11#1#10#1#10#10#0#63#1
^{ this.path = template.getInstallPath(); this.uuid = template.getUuid(); this.id = template.getId(); this.origUrl = template.getUrl(); this.displayText = template.getDisplayText(); this.checksum = template.getChecksum(); this.hvm = template.isRequiresHvm(); this.accountId = template.getAccountId(); this.name = template.getUniqueName(); this.format = template.getFormat(); if (template.getDataStore() != null) { this.imageDataStore = template.getDataStore().getTO(); } this.hypervisorType = template.getHypervisorType(); }#template object to#TemplateObjectTO#65#79#15#1#14#1#12#13#0#79#2
^{ return DataObjectType.SNAPSHOT; }#get object type#getObjectType#78#80#3#0#0#0#0#1#0#6#1
^{ return this.dataStore; }#get data store#getDataStore#83#85#3#0#0#0#0#1#0#6#1
^{ this.dataStore = store; }#set data store#setDataStore#88#89#2#1#0#1#1#1#0#8#1
^{ return this.path; }#get path#getPath#92#94#3#0#0#0#0#1#0#6#1
^{ this.path = path; }#set path#setPath#97#98#2#1#0#1#1#1#0#8#1
^{ return this.physicalSize; }#get physical size#getPhysicalSize#101#102#2#0#0#0#0#1#0#5#1
^{ this.physicalSize = physicalSize; }#set physical size#setPhysicalSize#105#106#2#1#0#1#1#1#0#8#1
^{ return volume; }#get volume#getVolume#109#110#2#0#0#0#0#1#0#3#1
^{ this.volume = volume; }#set volume#setVolume#113#114#2#1#0#1#1#1#0#8#1
^{ return parentSnapshotPath; }#get parent snapshot path#getParentSnapshotPath#117#118#2#0#0#0#0#1#0#3#1
^{ this.parentSnapshotPath = parentSnapshotPath; }#set parent snapshot path#setParentSnapshotPath#121#122#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#125#126#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#129#130#2#1#0#1#1#1#0#8#1
^{ return id; }#get id#getId#133#135#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#138#139#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#142#143#2#0#0#0#0#1#0#3#1
^{ this.name = name; }#set name#setName#146#147#2#1#0#1#1#1#0#8#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#150#152#3#0#0#0#0#1#0#4#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#155#156#2#1#0#1#1#1#0#8#1
^{ return this.quiescevm; }#getquiescevm#getquiescevm#159#160#2#0#0#0#0#1#0#5#1
^{ this.quiescevm = quiescevm; }#set quiescevm#setQuiescevm#163#164#2#1#0#1#1#1#0#8#1
^{ return parents; }#get parents#getParents#167#168#2#0#0#0#0#1#0#3#1
^{ return new StringBuilder("SnapshotTO[datastore=").append(dataStore).append("|volume=").append(volume).append("|path").append(path).append("]").toString(); }#to string#toString#171#173#3#0#8#0#0#8#0#14#1
^{ this.path = snapshot.getPath(); this.setId(snapshot.getId()); VolumeInfo vol = snapshot.getBaseVolume(); if (vol != null) { this.volume = (VolumeObjectTO)vol.getTO(); this.setVmName(vol.getAttachedVmName()); } SnapshotInfo parentSnapshot = snapshot.getParent(); ArrayList<String> parentsArry = new ArrayList<String>(); if (parentSnapshot != null) { this.parentSnapshotPath = parentSnapshot.getPath(); while(parentSnapshot != null) { parentsArry.add(parentSnapshot.getPath()); parentSnapshot = parentSnapshot.getParent(); } parents = parentsArry.toArray(new String[parentsArry.size()]); ArrayUtils.reverse(parents); } this.dataStore = snapshot.getDataStore().getTO(); this.setName(snapshot.getName()); this.hypervisorType = snapshot.getHypervisorType(); this.quiescevm = false; }#snapshot object to#SnapshotObjectTO#51#75#25#1#21#4#13#26#0#99#4
^{ return this.type; }#get protocol#getProtocol#46#47#2#0#0#0#0#1#0#5#1
^{ return this.uri; }#get uri#getUri#50#51#2#0#0#0#0#1#0#5#1
^{ return providerName; }#get provider name#getProviderName#54#55#2#0#0#0#0#1#0#3#1
^{ this.type = type; }#set type#setType#58#59#2#1#0#1#1#1#0#8#1
^{ this.uri = uri; }#set uri#setUri#62#63#2#1#0#1#1#1#0#8#1
^{ this.providerName = providerName; }#set provider name#setProviderName#66#67#2#1#0#1#1#1#0#8#1
^{ this.role = role; }#set role#setRole#70#71#2#1#0#1#1#1#0#8#1
^{ return this.role; }#get role#getRole#74#76#3#0#0#0#0#1#0#6#1
^{ return new StringBuilder("ImageStoreTO[type=").append(type).append("|provider=").append(providerName).append("|role=").append(role).append("|uri=").append(uri).append("]").toString(); }#to string#toString#79#89#11#0#10#0#0#10#0#17#1
^{ return uuid; }#get uuid#getUuid#92#94#3#0#0#0#0#1#0#4#1
^{ return getUri(); }#get url#getUrl#97#99#3#0#1#0#0#1#0#4#1
^{ this.uuid = uuid; }#set uuid#setUuid#102#103#2#1#0#1#1#1#0#8#1
^{ return pathSeparator; }#get path separator#getPathSeparator#106#108#3#0#0#0#0#1#0#4#1
^{ this.type = dataStore.getType(); this.uri = dataStore.getUri(); this.providerName = null; this.role = dataStore.getRole(); }#image store to#ImageStoreTO#39#43#5#1#3#1#4#4#0#24#1
^{ return this.id; }#get id#getId#69#70#2#0#0#0#0#1#0#5#1
^{ return this.uuid; }#get uuid#getUuid#73#75#3#0#0#0#0#1#0#6#1
^{ return this.url; }#get url#getUrl#78#80#3#0#0#0#0#1#0#6#1
^{ return this.details; }#get details#getDetails#83#84#2#0#0#0#0#1#0#8#1
^{ return this.name; }#get name#getName#87#88#2#0#0#0#0#1#0#5#1
^{ return this.type; }#get type#getType#91#92#2#0#0#0#0#1#0#5#1
^{ return DataStoreRole.Primary; }#get role#getRole#95#97#3#0#0#0#0#1#0#6#1
^{ return poolType; }#get pool type#getPoolType#100#101#2#0#0#0#0#1#0#3#1
^{ this.poolType = poolType; }#set pool type#setPoolType#104#105#2#1#0#1#1#1#0#8#1
^{ return host; }#get host#getHost#108#109#2#0#0#0#0#1#0#3#1
^{ this.host = host; }#set host#setHost#112#113#2#1#0#1#1#1#0#8#1
^{ return path; }#get path#getPath#116#117#2#0#0#0#0#1#0#3#1
^{ this.path = path; }#set path#setPath#120#121#2#1#0#1#1#1#0#8#1
^{ return port; }#get port#getPort#124#125#2#0#0#0#0#1#0#3#1
^{ this.port = port; }#set port#setPort#128#129#2#1#0#1#1#1#0#8#1
^{ return pathSeparator; }#get path separator#getPathSeparator#132#134#3#0#0#0#0#1#0#4#1
^{ return new StringBuilder("PrimaryDataStoreTO[uuid=").append(uuid).append("|name=").append(name).append("|id=").append(id).append("|pooltype=").append(poolType).append("]").toString(); }#to string#toString#137#147#11#0#10#0#0#10#0#17#1
^{ return fullCloneFlag; }#is full clone flag#isFullCloneFlag#150#151#2#0#0#0#0#1#0#3#1
^{ this.fullCloneFlag = fullCloneFlag; }#set full clone flag#setFullCloneFlag#154#155#2#1#0#1#1#1#0#8#1
^{ return isManaged; }#is managed#isManaged#158#159#2#0#0#0#0#1#0#3#1
^{ this.uuid = dataStore.getUuid(); this.name = dataStore.getName(); this.id = dataStore.getId(); this.setPoolType(dataStore.getPoolType()); this.setHost(dataStore.getHostAddress()); this.setPath(dataStore.getPath()); this.setPort(dataStore.getPort()); this.url = dataStore.getUri(); this.details = dataStore.getDetails(); this.isManaged = dataStore.isManaged(); }#primary data store to#PrimaryDataStoreTO#56#66#11#1#14#1#10#14#0#63#1
^{ return uuid; }#get uuid#getUuid#86#87#2#0#0#0#0#1#0#3#1
^{ return path; }#get path#getPath#90#92#3#0#0#0#0#1#0#4#1
^{ return volumeType; }#get volume type#getVolumeType#95#96#2#0#0#0#0#1#0#5#1
^{ return dataStore; }#get data store#getDataStore#99#101#3#0#0#0#0#1#0#4#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#104#106#3#0#0#0#0#1#0#6#1
^{ dataStore = store; }#set data store#setDataStore#109#110#2#1#0#1#1#1#0#6#1
^{ this.dataStore = dataStore; }#set data store#setDataStore#113#114#2#1#0#1#1#1#0#8#1
^{ return name; }#get name#getName#117#118#2#0#0#0#0#1#0#3#1
^{ return size; }#get size#getSize#121#122#2#0#0#0#0#1#0#3#1
^{ return DataObjectType.VOLUME; }#get object type#getObjectType#125#127#3#0#0#0#0#1#0#6#1
^{ this.uuid = uuid; }#set uuid#setUuid#130#131#2#1#0#1#1#1#0#8#1
^{ this.name = name; }#set name#setName#134#135#2#1#0#1#1#1#0#8#1
^{ this.size = size; }#set size#setSize#138#139#2#1#0#1#1#1#0#8#1
^{ this.path = path; }#set path#setPath#142#143#2#1#0#1#1#1#0#8#1
^{ return volumeId; }#get volume id#getVolumeId#146#147#2#0#0#0#0#1#0#3#1
^{ this.volumeId = volumeId; }#set volume id#setVolumeId#150#151#2#1#0#1#1#1#0#8#1
^{ return accountId; }#get account id#getAccountId#154#155#2#0#0#0#0#1#0#3#1
^{ this.accountId = accountId; }#set account id#setAccountId#158#159#2#1#0#1#1#1#0#8#1
^{ return vmName; }#get vm name#getVmName#162#163#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#set vm name#setVmName#166#167#2#1#0#1#1#1#0#8#1
^{ return chainInfo; }#get chain info#getChainInfo#170#171#2#0#0#0#0#1#0#3#1
^{ this.chainInfo = chainInfo; }#set chain info#setChainInfo#174#175#2#1#0#1#1#1#0#8#1
^{ return id; }#get id#getId#178#180#3#0#0#0#0#1#0#4#1
^{ this.id = id; }#set id#setId#183#184#2#1#0#1#1#1#0#8#1
^{ return format; }#get format#getFormat#187#188#2#0#0#0#0#1#0#5#1
^{ this.format = format; }#set format#setFormat#191#192#2#1#0#1#1#1#0#10#1
^{ return provisioningType; }#get provisioning type#getProvisioningType#195#196#2#0#0#0#0#1#0#5#1
^{ this.provisioningType = provisioningType; }#set provisioning type#setProvisioningType#199#200#2#1#0#1#1#1#0#10#1
^{ return new StringBuilder("volumeTO[uuid=").append(uuid).append("|path=").append(path).append("|datastore=").append(dataStore).append("]").toString(); }#to string#toString#203#205#3#0#8#0#0#8#0#14#1
^{ this.bytesReadRate = bytesReadRate; }#set bytes read rate#setBytesReadRate#208#209#2#1#0#1#1#1#0#8#1
^{ return bytesReadRate; }#get bytes read rate#getBytesReadRate#212#213#2#0#0#0#0#1#0#3#1
^{ this.bytesWriteRate = bytesWriteRate; }#set bytes write rate#setBytesWriteRate#216#217#2#1#0#1#1#1#0#8#1
^{ return bytesWriteRate; }#get bytes write rate#getBytesWriteRate#220#221#2#0#0#0#0#1#0#3#1
^{ this.iopsReadRate = iopsReadRate; }#set iops read rate#setIopsReadRate#224#225#2#1#0#1#1#1#0#8#1
^{ return iopsReadRate; }#get iops read rate#getIopsReadRate#228#229#2#0#0#0#0#1#0#3#1
^{ this.iopsWriteRate = iopsWriteRate; }#set iops write rate#setIopsWriteRate#232#233#2#1#0#1#1#1#0#8#1
^{ return iopsWriteRate; }#get iops write rate#getIopsWriteRate#236#237#2#0#0#0#0#1#0#3#1
^{ return deviceId; }#get device id#getDeviceId#240#241#2#0#0#0#0#1#0#3#1
^{ this.deviceId = deviceId; }#set device id#setDeviceId#244#245#2#1#0#1#1#1#0#8#1
^{ this.cacheMode = cacheMode; }#set cache mode#setCacheMode#248#249#2#1#0#1#1#1#0#8#1
^{ return cacheMode; }#get cache mode#getCacheMode#252#253#2#0#0#0#0#1#0#3#1
^{ uuid = volume.getUuid(); path = volume.getPath(); accountId = volume.getAccountId(); if (volume.getDataStore() != null) { dataStore = volume.getDataStore().getTO(); } else { dataStore = null; } vmName = volume.getAttachedVmName(); size = volume.getSize(); setVolumeId(volume.getId()); chainInfo = volume.getChainInfo(); volumeType = volume.getVolumeType(); name = volume.getName(); setId(volume.getId()); format = volume.getFormat(); provisioningType = volume.getProvisioningType(); bytesReadRate = volume.getBytesReadRate(); bytesWriteRate = volume.getBytesWriteRate(); iopsReadRate = volume.getIopsReadRate(); iopsWriteRate = volume.getIopsWriteRate(); cacheMode = volume.getCacheMode(); hypervisorType = volume.getHypervisorType(); setDeviceId(volume.getDeviceId()); }#volume object to#VolumeObjectTO#59#83#25#1#25#1#21#25#0#88#2
^{ if (result != null) { Class<?> clz = result.getClass(); Gson gson = GsonHelper.getGson(); return clz.getName() + token + gson.toJson(result); } return null; }#to serialized string old#toSerializedStringOld#44#50#7#1#4#3#0#6#0#25#2
^{ try { if (result != null && !result.isEmpty()) { String serializedParts = result.split(token); if (serializedParts.length < 2) { return null; } String clzName = serializedParts[0]; String nameField = null; String content = null; if (serializedParts.length == 2) { content = serializedParts[1]; } else { nameField = serializedParts[1]; int index = result.indexOf(token + nameField + token); content = result.substring(index + nameField.length() + 2); } Class<?> clz; try { clz = Class.forName(clzName); } catch (ClassNotFoundException e) { return null; } Gson gson = GsonHelper.getGson(); Object obj = gson.fromJson(content, clz); return obj; } return null; } catch (RuntimeException e) { s_logger.error("Caught runtime exception when doing GSON deserialization on: " + result); throw e; } }#from serialized string#fromSerializedString#53#87#35#1#9#11#5#30#0#81#4
^{ List<Pair<String, Object>> l = new ArrayList<Pair<String, Object>>(); return appendPairList(l, o, name); }#to pair list#toPairList#91#93#3#2#2#3#0#5#0#28#1
^{ if (o != null) { Class<?> clz = o.getClass(); if (clz.isPrimitive() || clz.getSuperclass() == Number.class || clz == String.class || clz == Date.class) { l.add(new Pair<String, Object>(name, o.toString())); return l; } for (Field f : clz.getDeclaredFields()) { if ((f.getModifiers() & Modifier.STATIC) != 0) { continue; } Param param = f.getAnnotation(Param.class); if (param == null) { continue; } String propName = f.getName(); if (!param.propName().isEmpty()) { propName = param.propName(); } String paramName = param.name(); if (paramName.isEmpty()) { paramName = propName; } Method method = getGetMethod(o, propName); if (method != null) { try { Object fieldValue = method.invoke(o); if (fieldValue != null) { if (f.getType() == Date.class) { l.add(new Pair<String, Object>(paramName, DateUtil.getOutputString((Date)fieldValue))); } else { l.add(new Pair<String, Object>(paramName, fieldValue.toString())); } } //else // l.add(new Pair<String, Object>(paramName, "")); } catch (IllegalArgumentException e) { s_logger.error("Illegal argument exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (IllegalAccessException e) { s_logger.error("Illegal access exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (InvocationTargetException e) { s_logger.error("Invocation target exception when calling POJO " + o.getClass().getName() + " get method for property: " + propName); } } } } return l; }#append pair list#appendPairList#96#149#54#3#33#13#8#43#2#172#11
^{ Method method = null; String methodName = getGetMethodName("get", propName); try { method = o.getClass().getMethod(methodName); } catch (SecurityException e1) { s_logger.error("Security exception in getting POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (NoSuchMethodException e1) { if (s_logger.isTraceEnabled()) { s_logger.trace("POJO " + o.getClass().getName() + " does not have " + methodName + "() method for property: " + propName + ", will check is-prefixed method to see if it is boolean property"); } } if (method != null) { return method; } methodName = getGetMethodName("is", propName); try { method = o.getClass().getMethod(methodName); } catch (SecurityException e1) { s_logger.error("Security exception in getting POJO " + o.getClass().getName() + " get method for property: " + propName); } catch (NoSuchMethodException e1) { s_logger.warn("POJO " + o.getClass().getName() + " does not have " + methodName + "() method for property: " + propName); } return method; }#get get method#getGetMethod#152#178#27#2#19#8#7#23#0#75#3
^{ StringBuffer sb = new StringBuffer(prefix); if (fieldName.length() >= prefix.length() && fieldName.substring(0, prefix.length()).equals(prefix)) { return fieldName; } else { sb.append(fieldName.substring(0, 1).toUpperCase()); sb.append(fieldName.substring(1)); } return sb.toString(); }#get get method name#getGetMethodName#181#191#11#2#12#3#2#15#0#41#2
^{ return s_gson; }#get gson#getGson#80#81#2#0#0#0#0#1#0#3#1
^{ return s_gogger; }#get gson logger#getGsonLogger#84#85#2#0#0#0#0#1#0#3#1
^{ return s_logger; }#get logger#getLogger#88#89#2#0#0#0#0#1#0#3#1
^{ // Group the rules by publicip:publicport final Map<String, List<PortForwardingRuleTO>> pools = new HashMap<String, List<PortForwardingRuleTO>>(); for (final PortForwardingRuleTO rule : fwRules) { final StringBuilder sb = new StringBuilder(); final String poolName = sb.append(rule.getSrcIp().replace(".", "_")).append('-').append(rule.getSrcPortRange()[0]).toString(); if (!rule.revoked()) { List<PortForwardingRuleTO> fwList = pools.get(poolName); if (fwList == null) { fwList = new ArrayList<PortForwardingRuleTO>(); pools.put(poolName, fwList); } fwList.add(rule); } } final List<String> result = new ArrayList<String>(); result.addAll(Arrays.asList(globalSection)); result.add(blankLine); result.addAll(Arrays.asList(defaultsSection)); result.add(blankLine); if (pools.isEmpty()) { // haproxy cannot handle empty listen / frontend or backend, so add // a dummy listener // on port 9 result.addAll(Arrays.asList(defaultListen)); } result.add(blankLine); for (final Map.Entry<String, List<PortForwardingRuleTO>> e : pools.entrySet()) { final List<String> poolRules = getRulesForPool(e.getKey(), e.getValue()); result.addAll(poolRules); } return result.toArray(new String[result.size()]); }#generate configuration#generateConfiguration#53#91#39#1#32#9#10#46#4#144#6
^{ final PortForwardingRuleTO firstRule = fwRules.get(0); final String publicIP = firstRule.getSrcIp(); final String publicPort = Integer.toString(firstRule.getSrcPortRange()[0]); // FIXEME: String algorithm = firstRule.getAlgorithm(); final List<String> result = new ArrayList<String>(); // add line like this: "listen 65_37_141_30-80 65.37.141.30:80" StringBuilder sb = new StringBuilder(); sb.append("listen ").append(poolName).append(" ").append(publicIP).append(":").append(publicPort); result.add(sb.toString()); sb = new StringBuilder(); // FIXME sb.append("\t").append("balance ").append(algorithm); result.add(sb.toString()); if (publicPort.equals(NetUtils.HTTP_PORT) // && global option httpclose set (or maybe not in this spot???) ) { sb = new StringBuilder(); sb.append("\t").append("mode http"); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("option httpclose"); result.add(sb.toString()); } int i = 0; for (final PortForwardingRuleTO rule : fwRules) { // add line like this: "server 65_37_141_30-80_3 10.1.1.4:80 check" if (rule.revoked()) { continue; } sb = new StringBuilder(); sb.append("\t").append("server ").append(poolName).append("_").append(Integer.toString(i++)).append(" ").append(rule.getDstIp()).append(":").append(rule.getDstPortRange()[0]).append(" check"); result.add(sb.toString()); } result.add(blankLine); return result; }#get rules for pool#getRulesForPool#94#138#45#2#46#9#14#56#5#137#4
^{ int i = 0; if (lbTO.getStickinessPolicies() == null) { return null; } final StringBuilder sb = new StringBuilder(); for (final StickinessPolicyTO stickinessPolicy : lbTO.getStickinessPolicies()) { if (stickinessPolicy == null) { continue; } final List<Pair<String, String>> paramsList = stickinessPolicy.getParams(); i++; /* * cookie <name> [ rewrite | insert | prefix ] [ indirect ] [ nocache ] [ postonly ] [ domain <domain> ]* */ if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* Default Values */ String cookieName = null; // optional String mode = "insert "; // optional Boolean indirect = false; // optional Boolean nocache = false; // optional Boolean postonly = false; // optional StringBuilder domainSb = null; // optional for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("cookie-name".equalsIgnoreCase(key)) { cookieName = value; } if ("mode".equalsIgnoreCase(key)) { mode = value; } if ("domain".equalsIgnoreCase(key)) { if (domainSb == null) { domainSb = new StringBuilder(); } domainSb = domainSb.append("domain "); domainSb.append(value).append(" "); } if ("indirect".equalsIgnoreCase(key)) { indirect = true; } if ("nocache".equalsIgnoreCase(key)) { nocache = true; } if ("postonly".equalsIgnoreCase(key)) { postonly = true; } } if (cookieName == null) {// re-check all haproxy mandatory params final StringBuilder tempSb = new StringBuilder(); String srcip = lbTO.getSrcIp(); if (srcip == null) { srcip = "TESTCOOKIE"; } tempSb.append("lbcooki_").append(srcip.hashCode()).append("_").append(lbTO.getSrcPort()); cookieName = tempSb.toString(); } sb.append("\t").append("cookie ").append(cookieName).append(" ").append(mode).append(" "); if (indirect) { sb.append("indirect "); } if (nocache) { sb.append("nocache "); } if (postonly) { sb.append("postonly "); } if (domainSb != null) { sb.append(domainSb).append(" "); } } else if (StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* Default Values */ String tablesize = "200k"; // optional String expire = "30m"; // optional /* overwrite default values with the stick parameters */ for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("tablesize".equalsIgnoreCase(key)) { tablesize = value; } if ("expire".equalsIgnoreCase(key)) { expire = value; } } sb.append("\t").append("stick-table type ip size ").append(tablesize).append(" expire ").append(expire); sb.append("\n\t").append("stick on src"); } else if (StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { /* * FORMAT : appsession <cookie> len <length> timeout <holdtime> * [request-learn] [prefix] [mode * <path-parameters|query-string>] */ /* example: appsession JSESSIONID len 52 timeout 3h */ String cookieName = null; // optional String length = "52"; // optional String holdtime = "3h"; // optional String mode = null; // optional Boolean requestlearn = false; // optional Boolean prefix = false; // optional for (final Pair<String, String> paramKV : paramsList) { final String key = paramKV.first(); final String value = paramKV.second(); if ("cookie-name".equalsIgnoreCase(key)) { cookieName = value; } if ("length".equalsIgnoreCase(key)) { length = value; } if ("holdtime".equalsIgnoreCase(key)) { holdtime = value; } if ("mode".equalsIgnoreCase(key)) { mode = value; } if ("request-learn".equalsIgnoreCase(key)) { requestlearn = true; } if ("prefix".equalsIgnoreCase(key)) { prefix = true; } } if (cookieName == null) {// re-check all haproxy mandatory params final StringBuilder tempSb = new StringBuilder(); String srcip = lbTO.getSrcIp(); if (srcip == null) { srcip = "TESTCOOKIE"; } tempSb.append("appcookie_").append(srcip.hashCode()).append("_").append(lbTO.getSrcPort()); cookieName = tempSb.toString(); } sb.append("\t").append("appsession ").append(cookieName).append(" len ").append(length).append(" timeout ").append(holdtime).append(" "); if (prefix) { sb.append("prefix "); } if (requestlearn) { sb.append("request-learn").append(" "); } if (mode != null) { sb.append("mode ").append(mode).append(" "); } } else { /* * Error is silently swallowed. * Not supposed to reach here, validation of methods are * done at the higher layer */ s_logger.warn("Haproxy stickiness policy for lb rule: " + lbTO.getSrcIp() + ":" + lbTO.getSrcPort() + ": Not Applied, cause:invalid method "); return null; } } if (i == 0) { return null; } return sb.toString(); }#get lb sub rule for stickiness#getLbSubRuleForStickiness#302#466#165#1#91#32#35#163#23#327#37
^{ StringBuilder sb = new StringBuilder(); final String poolName = sb.append(lbTO.getSrcIp().replace(".", "_")).append('-').append(lbTO.getSrcPort()).toString(); final String publicIP = lbTO.getSrcIp(); final String publicPort = Integer.toString(lbTO.getSrcPort()); final String algorithm = lbTO.getAlgorithm(); final List<String> result = new ArrayList<String>(); // add line like this: "listen 65_37_141_30-80 65.37.141.30:80" sb = new StringBuilder(); sb.append("listen ").append(poolName).append(" ").append(publicIP).append(":").append(publicPort); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("balance ").append(algorithm); result.add(sb.toString()); int i = 0; Boolean destsAvailable = false; final String stickinessSubRule = getLbSubRuleForStickiness(lbTO); final List<String> dstSubRule = new ArrayList<String>(); final List<String> dstWithCookieSubRule = new ArrayList<String>(); for (final DestinationTO dest : lbTO.getDestinations()) { // add line like this: "server 65_37_141_30-80_3 10.1.1.4:80 check" if (dest.isRevoked()) { continue; } sb = new StringBuilder(); sb.append("\t").append("server ").append(poolName).append("_").append(Integer.toString(i++)).append(" ").append(dest.getDestIp()).append(":").append(dest.getDestPort()).append(" check"); if(lbTO.getLbProtocol() != null && lbTO.getLbProtocol().equals("tcp-proxy")) { sb.append(" send-proxy"); } dstSubRule.add(sb.toString()); if (stickinessSubRule != null) { sb.append(" cookie ").append(dest.getDestIp().replace(".", "_")).append('-').append(dest.getDestPort()).toString(); dstWithCookieSubRule.add(sb.toString()); } destsAvailable = true; } Boolean httpbasedStickiness = false; /* attach stickiness sub rule only if the destinations are available */ if (stickinessSubRule != null && destsAvailable == true) { for (final StickinessPolicyTO stickinessPolicy : lbTO.getStickinessPolicies()) { if (stickinessPolicy == null) { continue; } if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName()) || StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) { httpbasedStickiness = true; } } if (httpbasedStickiness) { result.addAll(dstWithCookieSubRule); } else { result.addAll(dstSubRule); } result.add(stickinessSubRule); } else { result.addAll(dstSubRule); } if (stickinessSubRule != null && !destsAvailable) { s_logger.warn("Haproxy stickiness policy for lb rule: " + lbTO.getSrcIp() + ":" + lbTO.getSrcPort() + ": Not Applied, cause: backends are unavailable"); } if (publicPort.equals(NetUtils.HTTP_PORT) && !keepAliveEnabled || httpbasedStickiness) { sb = new StringBuilder(); sb.append("\t").append("mode http"); result.add(sb.toString()); sb = new StringBuilder(); sb.append("\t").append("option httpclose"); result.add(sb.toString()); } result.add(blankLine); return result; }#get rules for pool#getRulesForPool#469#551#83#2#89#16#26#104#3#269#12
^{ final StringBuilder rule = new StringBuilder("\nlisten ").append(ruleName).append(" ").append(statsIp).append(":").append(lbCmd.lbStatsPort); // TODO DH: write test for this in both cases if (!lbCmd.keepAliveEnabled) { s_logger.info("Haproxy mode http enabled"); rule.append("\n\tmode http\n\toption httpclose"); } rule.append("\n\tstats enable\n\tstats uri ").append(lbCmd.lbStatsUri).append("\n\tstats realm Haproxy\\ Statistics\n\tstats auth ").append(lbCmd.lbStatsAuth); rule.append("\n"); final String result = rule.toString(); if (s_logger.isDebugEnabled()) { s_logger.debug("Haproxystats rule: " + result); } return result; }#generate stats rule#generateStatsRule#554#570#17#3#16#5#5#24#1#58#3
^{ final List<String> result = new ArrayList<String>(); final List<String> gSection = Arrays.asList(globalSection); // note that this is overwritten on the String in the static ArrayList<String> gSection.set(2, "\tmaxconn " + lbCmd.maxconn); // TODO DH: write test for this function final String pipesLine = "\tmaxpipes " + Long.toString(Long.parseLong(lbCmd.maxconn) / 4); gSection.set(3, pipesLine); if (s_logger.isDebugEnabled()) { for (final String s : gSection) { s_logger.debug("global section: " + s); } } result.addAll(gSection); // TODO decide under what circumstances these options are needed // result.add("\tnokqueue"); // result.add("\tnopoll"); result.add(blankLine); final List<String> dSection = Arrays.asList(defaultsSection); if (lbCmd.keepAliveEnabled) { dSection.set(7, "\tno option forceclose"); } if (s_logger.isDebugEnabled()) { for (final String s : dSection) { s_logger.debug("default section: " + s); } } result.addAll(dSection); if (!lbCmd.lbStatsVisibility.equals("disabled")) { /* new rule : listen admin_page guestip/link-local:8081 */ if (lbCmd.lbStatsVisibility.equals("global")) { result.add(generateStatsRule(lbCmd, "stats_on_public", lbCmd.lbStatsPublicIP)); } else if (lbCmd.lbStatsVisibility.equals("guest-network")) { result.add(generateStatsRule(lbCmd, "stats_on_guest", lbCmd.lbStatsGuestIP)); } else if (lbCmd.lbStatsVisibility.equals("link-local")) { result.add(generateStatsRule(lbCmd, "stats_on_private", lbCmd.lbStatsPrivateIP)); } else if (lbCmd.lbStatsVisibility.equals("all")) { result.add(generateStatsRule(lbCmd, "stats_on_public", lbCmd.lbStatsPublicIP)); result.add(generateStatsRule(lbCmd, "stats_on_guest", lbCmd.lbStatsGuestIP)); result.add(generateStatsRule(lbCmd, "stats_on_private", lbCmd.lbStatsPrivateIP)); } else { /* * stats will be available on the default http serving port, no * special stats port */ final StringBuilder subRule = new StringBuilder("\tstats enable\n\tstats uri ").append(lbCmd.lbStatsUri).append("\n\tstats realm Haproxy\\ Statistics\n\tstats auth ").append(lbCmd.lbStatsAuth); result.add(subRule.toString()); } } result.add(blankLine); boolean has_listener = false; for (final LoadBalancerTO lbTO : lbCmd.getLoadBalancers()) { if (lbTO.isRevoked()) { continue; } final List<String> poolRules = getRulesForPool(lbTO, lbCmd.keepAliveEnabled); result.addAll(poolRules); has_listener = true; } result.add(blankLine); if (!has_listener) { // haproxy cannot handle empty listen / frontend or backend, so add // a dummy listener // on port 9 result.addAll(Arrays.asList(defaultListen)); } return result.toArray(new String[result.size()]); }#generate configuration#generateConfiguration#573#646#74#1#48#11#20#99#10#221#14
^{ final String result = new String[3]; final Set<String> toAdd = new HashSet<String>(); final Set<String> toRemove = new HashSet<String>(); final Set<String> toStats = new HashSet<String>(); for (final LoadBalancerTO lbTO : lbCmd.getLoadBalancers()) { final StringBuilder sb = new StringBuilder(); sb.append(lbTO.getSrcIp()).append(":"); sb.append(lbTO.getSrcPort()).append(":"); final String lbRuleEntry = sb.toString(); if (!lbTO.isRevoked()) { toAdd.add(lbRuleEntry); } else { toRemove.add(lbRuleEntry); } } StringBuilder sb = new StringBuilder(""); if (lbCmd.lbStatsVisibility.equals("guest-network")) { sb = new StringBuilder(lbCmd.lbStatsGuestIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("link-local")) { sb = new StringBuilder(lbCmd.lbStatsPrivateIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("global")) { sb = new StringBuilder(lbCmd.lbStatsPublicIP).append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } else if (lbCmd.lbStatsVisibility.equals("all")) { sb = new StringBuilder("0.0.0.0/0").append(":").append(lbCmd.lbStatsPort).append(":").append(lbCmd.lbStatsSrcCidrs).append(":,"); } toStats.add(sb.toString()); toRemove.removeAll(toAdd); result[ADD] = toAdd.toArray(new String[toAdd.size()]); result[REMOVE] = toRemove.toArray(new String[toRemove.size()]); result[STATS] = toStats.toArray(new String[toStats.size()]); return result; }#generate fw rules#generateFwRules#649#685#37#1#53#9#13#74#0#192#7
^{ return deviceName; }#get device name#getDeviceName#48#49#2#0#0#0#0#1#0#3#1
^{ return providerName; }#get provider name#getProviderName#52#53#2#0#0#0#0#1#0#3#1
^{ return serverResource; }#get server resource#getServerResource#56#57#2#0#0#0#0#1#0#3#1
^{ return username; }#get username#getUsername#60#61#2#0#0#0#0#1#0#3#1
^{ return password; }#get password#getPassword#64#65#2#0#0#0#0#1#0#3#1
^{ return publicInterface; }#get public interface#getPublicInterface#68#69#2#0#0#0#0#1#0#3#1
^{ return privateInterface; }#get private interface#getPrivateInterface#72#73#2#0#0#0#0#1#0#3#1
^{ this.deviceName = deviceName; this.providerName = providerName; this.serverResource = serverResource; this.result = success; this.details = details; this.username = username; this.password = password; this.publicInterface = publicInterface; this.privateInterface = privateInterface; }#create load balancer appliance answer#CreateLoadBalancerApplianceAnswer#35#45#11#10#0#10#9#9#0#57#1
^{ this.result = success; this.details = details; }#destroy load balancer appliance answer#DestroyLoadBalancerApplianceAnswer#26#28#3#3#0#3#2#2#0#15#1
^{ try { _name = name; _zoneId = (String)params.get("zone"); if (_zoneId == null) { throw new ConfigurationException("Unable to find zone"); } _ip = (String)params.get("ipaddress"); if (_ip == null) { throw new ConfigurationException("Unable to find IP"); } _guid = (String)params.get("guid"); if (_guid == null) { throw new ConfigurationException("Unable to find the guid"); } _url = (String)params.get("url"); if (_url == null) { throw new ConfigurationException("Unable to find url"); } _inclZones = (String)params.get("inclZones"); _exclZones = (String)params.get("exclZones"); return true; } catch (Exception e) { throw new ConfigurationException(e.getMessage()); } }#configure#configure#69#100#32#2#12#3#7#29#0#57#5
^{ StartupTrafficMonitorCommand cmd = new StartupTrafficMonitorCommand(); cmd.setName(_name); cmd.setDataCenter(_zoneId); cmd.setPod(""); cmd.setPrivateIpAddress(_ip); cmd.setStorageIpAddress(""); cmd.setVersion(TrafficSentinelResource.class.getPackage().getImplementationVersion()); cmd.setGuid(_guid); return new StartupCommand {cmd}; }#initialize#initialize#105#115#11#0#10#1#7#17#0#40#1
^{ return Host.Type.TrafficMonitor; }#get type#getType#118#120#3#0#0#0#0#1#0#9#1
^{ return _name; }#get name#getName#123#125#3#0#0#0#0#1#0#4#1
^{ return new PingCommand(Host.Type.TrafficMonitor, id); }#get current status#getCurrentStatus#128#130#3#1#1#1#0#3#0#11#1
^{ return true; }#start#start#133#135#3#0#0#0#0#1#0#3#1
^{ return true; }#stop#stop#138#140#3#0#0#0#0#1#0#3#1
^{ return; }#disconnected#disconnected#143#145#3#0#0#0#0#0#0#3#1
^{ return null; }#get agent control#getAgentControl#148#150#3#0#0#0#0#1#0#3#1
^{ return; }#set agent control#setAgentControl#153#155#3#1#0#1#0#0#0#5#1
^{ if (cmd instanceof ReadyCommand) { return execute((ReadyCommand)cmd); } else if (cmd instanceof MaintainCommand) { return execute((MaintainCommand)cmd); } else if (cmd instanceof DirectNetworkUsageCommand) { return execute((DirectNetworkUsageCommand)cmd); } else if (cmd instanceof RecurringNetworkUsageCommand) { return execute((RecurringNetworkUsageCommand)cmd); } else { return Answer.createUnsupportedCommandAnswer(cmd); } }#execute request#executeRequest#158#169#12#1#5#1#0#14#0#29#5
^{ return new ReadyAnswer(cmd); }#execute#execute#173#174#2#1#1#1#0#2#0#6#1
^{ return new RecurringNetworkUsageAnswer(cmd); }#execute#execute#177#178#2#1#1#1#0#2#0#6#1
^{ try { return getPublicIpBytesSentAndReceived(cmd); } catch (ExecutionException e) { return new DirectNetworkUsageAnswer(cmd, e); } }#execute#execute#181#185#5#1#2#2#0#5#0#11#1
^{ return new MaintainAnswer(cmd); }#execute#execute#189#190#2#1#1#1#0#2#0#6#1
^{ DirectNetworkUsageAnswer answer = new DirectNetworkUsageAnswer(cmd); try { //Direct Network Usage URL trafficSentinel; //Use Global include/exclude zones if there are no per TS zones if (_inclZones == null) { _inclZones = cmd.getIncludeZones(); } if (_exclZones == null) { _exclZones = cmd.getExcludeZones(); } try { //Query traffic Sentinel trafficSentinel = new URL(_url + "/inmsf/Query?script=" + URLEncoder.encode(getScript(cmd.getPublicIps(), cmd.getStart(), cmd.getEnd()), "UTF-8") + "&authenticate=basic&resultFormat=txt"); BufferedReader in = new BufferedReader(new InputStreamReader(trafficSentinel.openStream())); String inputLine; while ((inputLine = in.readLine()) != null) { //Parse the script output StringTokenizer st = new StringTokenizer(inputLine, ","); if (st.countTokens() == 3) { String publicIp = st.nextToken(); Long bytesSent = new Long(st.nextToken()); Long bytesRcvd = new Long(st.nextToken()); long bytesSentAndReceived = new long[2]; bytesSentAndReceived[0] = bytesSent; bytesSentAndReceived[1] = bytesRcvd; answer.put(publicIp, bytesSentAndReceived); } } in.close(); } catch (MalformedURLException e1) { s_logger.info("Invalid Traffic Sentinel URL", e1); throw new ExecutionException(e1.getMessage()); } catch (IOException e) { s_logger.debug("Error in direct network usage accounting", e); throw new ExecutionException(e.getMessage()); } } catch (Exception e) { s_logger.debug(e); throw new ExecutionException(e.getMessage()); } return answer; }#get public ip bytes sent and received#getPublicIpBytesSentAndReceived#193#243#51#1#31#13#10#52#4#123#5
^{ String IpAddresses = ""; for (int i = 0; i < ips.size(); i++) { IpAddresses += ips.get(i); if (i != (ips.size() - 1)) { // Append comma for all Ips except the last Ip IpAddresses += ","; } } String destZoneCondition = ""; if (_inclZones != null && !_inclZones.isEmpty()) { destZoneCondition = " & destinationzone = " + _inclZones; } if (_exclZones != null && !_exclZones.isEmpty()) { destZoneCondition += " & destinationzone != " + _exclZones; } String srcZoneCondition = ""; if (_inclZones != null && !_inclZones.isEmpty()) { srcZoneCondition = " & sourcezone = " + _inclZones; } if (_exclZones != null && !_exclZones.isEmpty()) { srcZoneCondition += " & sourcezone != " + _exclZones; } String startDate = getDateString(start); String endtDate = getDateString(end); StringBuffer sb = new StringBuffer(); sb.append("var q = Query.topN(\"historytrmx\","); sb.append(" \"ipsource,bytes\","); sb.append(" \"ipsource = " + IpAddresses + destZoneCondition + "\","); sb.append(" \"" + startDate + ", " + endtDate + "\","); sb.append(" \"bytes\","); sb.append(" 100000);"); sb.append("var totalsSent = {};"); sb.append("var t = q.run("); sb.append(" function(row,table) {"); sb.append(" if(row[0]) { "); sb.append(" totalsSent[row[0]] = row[1];"); sb.append(" }"); sb.append(" });"); sb.append("var q = Query.topN(\"historytrmx\","); sb.append(" \"ipdestination,bytes\","); sb.append(" \"ipdestination = " + IpAddresses + srcZoneCondition + "\","); sb.append(" \"" + startDate + ", " + endtDate + "\","); sb.append(" \"bytes\","); sb.append(" 100000);"); sb.append("var totalsRcvd = {};"); sb.append("var t = q.run("); sb.append(" function(row,table) {"); sb.append(" if(row[0]) {"); sb.append(" totalsRcvd[row[0]] = row[1];"); sb.append(" }"); sb.append(" });"); sb.append("for (var addr in totalsSent) {"); sb.append(" var TS = 0;"); sb.append(" var TR = 0;"); sb.append(" if(totalsSent[addr]) TS = totalsSent[addr];"); sb.append(" if(totalsRcvd[addr]) TR = totalsRcvd[addr];"); sb.append(" println(addr + \",\" + TS + \",\" + TR);"); sb.append("}"); return sb.toString(); }#get script#getScript#246#307#62#3#44#10#39#90#1#178#7
^{ DateFormat dfDate = new SimpleDateFormat("yyyyMMdd HH:mm:ss"); return dfDate.format(date); }#get date string#getDateString#310#312#3#1#2#2#0#4#0#11#1
^{ // TODO Auto-generated method stub }#set name#setName#315#317#3#1#0#1#0#0#1#5#1
^{ // TODO Auto-generated method stub }#set config params#setConfigParams#321#323#3#1#0#1#0#0#1#8#1
^{ // TODO Auto-generated method stub return null; }#get config params#getConfigParams#327#330#4#0#0#0#0#1#1#6#1
^{ // TODO Auto-generated method stub return 0; }#get run level#getRunLevel#333#336#4#0#0#0#0#1#1#3#1
^{ // TODO Auto-generated method stub }#set run level#setRunLevel#339#341#3#1#0#1#0#0#1#5#1
^{ _gson = gson; }#init gson#initGson#43#44#2#1#0#1#1#1#0#6#1
^{ JsonObject obj = new JsonObject(); obj.add(src.getClass().getName(), _gson.toJsonTree(src)); return obj; }#serialize#serialize#47#51#5#3#5#4#1#6#0#24#1
^{ JsonObject element = (JsonObject)json; Map.Entry<String, JsonElement> entry = element.entrySet().iterator().next(); String name = entry.getKey(); Class<?> clazz; try { clazz = Class.forName(name); } catch (ClassNotFoundException e) { throw new CloudRuntimeException("can't find " + name); } return (T)_gson.fromJson(entry.getValue(), clazz); }#deserialize#deserialize#54#66#13#3#8#8#1#12#0#53#1
^{ Answer answers = getAnswers(); return answers[0]; }#get answer#getAnswer#54#56#3#0#1#1#0#3#0#7#1
^{ if (_cmds == null) { _cmds = s_gson.fromJson(_content, Answer.class); } return (Answer)_cmds; }#get answers#getAnswers#59#63#5#0#1#0#1#5#0#13#2
^{ return "Ans: "; }#get type#getType#66#68#3#0#0#0#0#1#0#3#1
^{ return (Response)Request.parse(bytes); }#parse#parse#71#72#2#1#1#1#0#4#0#12#1
^{ this(request, new Answer {answer}); }#response#Response#32#33#2#2#1#2#1#4#0#10#1
^{ this(request, new Answer {answer}, mgmtId, agentId); }#response#Response#36#37#2#4#1#4#1#6#0#16#1
^{ super(request, answers); }#response#Response#40#41#2#2#1#2#1#3#0#9#1
^{ super(request, answers); _mgmtId = mgmtId; _via = agentId; }#response#Response#44#47#4#4#1#4#3#5#0#17#1
^{ super(ver, seq, agentId, mgmtId, via, flags, ans); }#response#Response#50#51#2#7#1#7#1#8#0#23#1
^{ _gson = gson; }#init gson#initGson#47#48#2#1#0#1#1#1#0#6#1
^{ JsonArray array = new JsonArray(); for (T cmd : src) { JsonObject obj = new JsonObject(); obj.add(cmd.getClass().getName(), _gson.toJsonTree(cmd)); array.add(obj); } return array; }#serialize#serialize#51#60#10#3#7#6#2#10#0#35#2
^{ JsonArray array = json.getAsJsonArray(); Iterator<JsonElement> it = array.iterator(); ArrayList<T> cmds = new ArrayList<T>(); while (it.hasNext()) { JsonObject element = (JsonObject)it.next(); Map.Entry<String, JsonElement> entry = element.entrySet().iterator().next(); String name = entry.getKey(); Class<?> clazz; try { clazz = Class.forName(name); } catch (ClassNotFoundException e) { throw new CloudRuntimeException("can't find " + name); } T cmd = (T)_gson.fromJson(entry.getValue(), clazz); cmds.add(cmd); } Class<?> type = ((Class<?>)typeOfT).getComponentType(); T ts = (T)Array.newInstance(type, cmds.size()); return cmds.toArray(ts); }#deserialize#deserialize#63#85#23#3#18#14#2#24#0#107#2
^{ for (final Version version : Version.values()) { if (ver == version.ordinal()) { return version; } } throw new UnsupportedVersionException("Can't lookup version: " + ver, UnsupportedVersionException.UnknownVersion); }#get#get#88#94#7#1#3#2#0#7#0#20#3
^{ _seq = seq; }#set sequence#setSequence#155#156#2#1#0#1#1#1#0#6#1
^{ if (cmds == null) { return; } for (Command cmd : cmds) { if (cmd.executeInSequence()) { setInSequence(true); break; } } }#set in sequence#setInSequence#159#166#8#1#2#2#1#5#0#13#4
^{ _flags |= (stopOnError ? FLAG_STOP_ON_ERROR : 0); }#set stop on error#setStopOnError#184#185#2#1#0#1#1#1#0#7#1
^{ _agentName = agentName; }#set agent name#setAgentName#188#189#2#1#0#1#1#1#0#6#1
^{ _flags |= (inSequence ? FLAG_IN_SEQUENCE : 0); }#set in sequence#setInSequence#192#193#2#1#0#1#1#1#0#7#1
^{ return (_flags & FLAG_CONTROL) > 0; }#is control#isControl#196#197#2#0#0#0#0#1#0#4#1
^{ _flags |= (control ? FLAG_CONTROL : 0); }#set control#setControl#200#201#2#1#0#1#1#1#0#7#1
^{ _flags |= (fromServer ? FLAG_FROM_SERVER : 0); }#set from server#setFromServer#204#205#2#1#0#1#1#1#0#7#1
^{ return _mgmtId; }#get management server id#getManagementServerId#208#209#2#0#0#0#0#1#0#3#1
^{ return (_flags & FLAG_FROM_SERVER) > 0; }#is from server#isFromServer#212#213#2#0#0#0#0#1#0#4#1
^{ return _ver; }#get version#getVersion#216#217#2#0#0#0#0#1#0#3#1
^{ _agentId = agentId; }#set agent id#setAgentId#220#221#2#1#0#1#1#1#0#6#1
^{ _via = viaId; }#set via#setVia#224#225#2#1#0#1#1#1#0#6#1
^{ return (_flags & FLAG_IN_SEQUENCE) > 0; }#execute in sequence#executeInSequence#228#229#2#0#0#0#0#1#0#4#1
^{ return _seq; }#get sequence#getSequence#232#233#2#0#0#0#0#1#0#3#1
^{ return (_flags & FLAG_STOP_ON_ERROR) > 0; }#stop on error#stopOnError#236#237#2#0#0#0#0#1#0#4#1
^{ getCommands(); return _cmds[0]; }#get command#getCommand#240#242#3#0#1#0#1#3#0#5#1
^{ if (_cmds == null) { try { StringReader reader = new StringReader(_content); JsonReader jsonReader = new JsonReader(reader); jsonReader.setLenient(true); _cmds = s_gson.fromJson(jsonReader, (Type)Command.class); } catch (RuntimeException e) { s_logger.error("Caught problem with " + _content, e); throw e; } } return _cmds; }#get commands#getCommands#245#257#13#0#5#3#3#15#0#31#2
^{ return "Cmd "; }#get type#getType#260#261#2#0#0#0#0#1#0#2#1
^{ final ByteBuffer buffer = ByteBuffer.allocate(40); buffer.put(getVersionInByte()); buffer.put((byte)0); buffer.putShort(getFlags()); buffer.putLong(_seq); // The size here is uncompressed size, if the data is compressed. buffer.putInt(contentSize); buffer.putLong(_mgmtId); buffer.putLong(_agentId); buffer.putLong(_via); buffer.flip(); return buffer; }#serialize header#serializeHeader#264#277#14#1#12#2#9#20#1#45#1
^{ byte byteArrayIn = new byte[1024]; ByteArrayInputStream byteIn; if (buffer.hasArray()) { byteIn = new ByteArrayInputStream(buffer.array(), buffer.position() + buffer.arrayOffset(), buffer.remaining()); } else { byte array = new byte[buffer.limit() - buffer.position()]; buffer.get(array); byteIn = new ByteArrayInputStream(array); } ByteBuffer retBuff = ByteBuffer.allocate(length); int len = 0; try { GZIPInputStream in = new GZIPInputStream(byteIn); while ((len = in.read(byteArrayIn)) > 0) { retBuff.put(byteArrayIn, 0, len); } in.close(); } catch (IOException e) { s_logger.error("Fail to decompress the request!", e); } retBuff.flip(); return retBuff; }#do decompress#doDecompress#280#302#23#2#17#9#7#30#0#81#3
^{ ByteArrayOutputStream byteOut = new ByteArrayOutputStream(length); byte array; if (buffer.hasArray()) { array = buffer.array(); } else { array = new byte[buffer.capacity()]; buffer.get(array); } try { GZIPOutputStream out = new GZIPOutputStream(byteOut, length); out.write(array); out.finish(); out.close(); } catch (IOException e) { s_logger.error("Fail to compress the request!", e); } return ByteBuffer.wrap(byteOut.toByteArray()); }#do compress#doCompress#305#322#18#2#12#6#7#20#0#56#2
^{ final ByteBuffer buffers = new ByteBuffer[2]; ByteBuffer tmp; if (_content == null) { _content = s_gson.toJson(_cmds, _cmds.getClass()); } tmp = ByteBuffer.wrap(_content.getBytes()); int capacity = tmp.capacity(); /* Check if we need to compress the data */ if (capacity >= 8192) { tmp = doCompress(tmp, capacity); _flags |= FLAG_COMPRESSED; } buffers[1] = tmp; buffers[0] = serializeHeader(capacity); return buffers; }#to bytes#toBytes#325#342#18#0#7#3#6#20#1#44#3
^{ final ByteBuffer buffers = toBytes(); final int len1 = buffers[0].remaining(); final int len2 = buffers[1].remaining(); final byte bytes = new byte[len1 + len2]; buffers[0].get(bytes, 0, len1); buffers[1].get(bytes, len1, len2); return bytes; }#get bytes#getBytes#345#352#8#0#5#4#2#18#0#33#1
^{ return (byte)_ver.ordinal(); }#get version in byte#getVersionInByte#355#356#2#0#1#0#0#1#0#6#1
^{ return (short)(((this instanceof Response) ? FLAG_RESPONSE : FLAG_REQUEST) | _flags); }#get flags#getFlags#359#360#2#0#1#0#0#2#0#8#1
^{ logD(msg, true); }#log d#logD#363#364#2#1#1#1#1#3#0#6#1
^{ if (s_logger.isDebugEnabled()) { String log = log(msg, logContent, Level.DEBUG); if (log != null) { s_logger.debug(log); } } }#log d#logD#367#371#5#2#3#3#1#8#0#22#3
^{ if (s_logger.isTraceEnabled()) { String log = log(msg, true, Level.TRACE); if (log != null) { s_logger.trace(log); } } else if (logD && s_logger.isDebugEnabled()) { String log = log(msg, false, Level.DEBUG); if (log != null) { s_logger.debug(log); } } }#log t#logT#376#385#10#2#6#4#2#16#0#37#5
^{ return log("", true, Level.DEBUG); }#to string#toString#390#392#3#0#1#0#0#4#0#7#1
^{ StringBuilder content = new StringBuilder(); if (logContent) { if (_cmds == null) { try { _cmds = s_gson.fromJson(_content, this instanceof Response ? Answer.class : Command.class); } catch (RuntimeException e) { s_logger.error("Unable to deserialize from json: " + _content); throw e; } } try { s_gogger.toJson(_cmds, content); } catch (Throwable e) { StringBuilder buff = new StringBuilder(); for (Command cmd : _cmds) { buff.append(cmd.getClass().getSimpleName()).append("/"); } s_logger.error("Gson serialization error " + buff.toString(), e); assert false : "More gson errors on " + buff.toString(); return ""; } if (content.length() <= (1 + _cmds.length * 3)) { return null; } } else { if (_cmds == null) { _cmds = s_gson.fromJson(_content, this instanceof Response ? Answer.class : Command.class); } content.append("{ "); for (Command cmd : _cmds) { content.append(cmd.getClass().getSimpleName()).append(", "); } content.replace(content.length() - 2, content.length(), " }"); } StringBuilder buf = new StringBuilder("Seq "); buf.append(_agentId).append("-").append(_seq).append(": "); buf.append(msg); buf.append(" { ").append(getType()); if (_agentName != null) { buf.append(", MgmtId: ").append(_mgmtId).append(", via: ").append(_via).append("(" + _agentName + ")"); } else { buf.append(", MgmtId: ").append(_mgmtId).append(", via: ").append(_via); } buf.append(", Ver: ").append(_ver.toString()); buf.append(", Flags: ").append(Integer.toBinaryString(getFlags())).append(", "); String cleanContent = content.toString(); if(cleanContent.contains("password")) { buf.append(cleanPassword(cleanContent)); } else { buf.append(content); } buf.append(" }"); return buf.toString(); }#log#log#395#452#58#3#55#11#19#81#0#181#9
^{ String cleanLogString = null; if (logString != null) { cleanLogString = logString; String temp = logString.split(","); int i = 0; if (temp != null) { while (i < temp.length) { temp[i] = StringUtils.cleanString(temp[i]); i++; } List<String> stringList = new ArrayList<String>(); Collections.addAll(stringList, temp); cleanLogString = StringUtils.join(stringList, ","); } } return cleanLogString; }#clean password#cleanPassword#455#471#17#1#5#5#5#21#0#49#4
^{ ByteBuffer buff = ByteBuffer.wrap(bytes); final byte ver = buff.get(); final Version version = Version.get(ver); if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) { throw new UnsupportedVersionException("This version is no longer supported: " + version.toString(), UnsupportedVersionException.IncompatibleVersion); } buff.get(); final short flags = buff.getShort(); final boolean isRequest = (flags & FLAG_REQUEST) > 0; final long seq = buff.getLong(); // The size here is uncompressed size, if the data is compressed. final int size = buff.getInt(); final long mgmtId = buff.getLong(); final long agentId = buff.getLong(); long via; if (version.ordinal() == Version.v1.ordinal()) { via = buff.getLong(); } else { via = agentId; } if ((flags & FLAG_COMPRESSED) != 0) { buff = doDecompress(buff, size); } byte command = null; int offset = 0; if (buff.hasArray()) { command = buff.array(); offset = buff.arrayOffset() + buff.position(); } else { command = new byte[buff.remaining()]; buff.get(command); offset = 0; } final String content = new String(command, offset, command.length - offset); if (isRequest) { return new Request(version, seq, agentId, mgmtId, via, flags, content); } else { return new Response(Version.get(ver), seq, agentId, mgmtId, via, flags, content); } }#parse#parse#485#529#45#1#29#14#9#57#1#156#6
^{ return _agentId; }#get agent id#getAgentId#533#534#2#0#0#0#0#1#0#3#1
^{ return _via; }#get via agent id#getViaAgentId#537#538#2#0#0#0#0#1#0#3#1
^{ return (bytes[3] & FLAG_IN_SEQUENCE) > 0; }#requires sequential execution#requiresSequentialExecution#541#542#2#1#0#1#0#2#0#8#1
^{ try { return Version.get(bytes[0]); } catch (UnsupportedVersionException e) { throw new CloudRuntimeException("Unsupported version: " + bytes[0]); } }#get version#getVersion#545#549#5#1#2#2#0#7#0#16#1
^{ return NumbersUtil.bytesToLong(bytes, 16); }#get management server id#getManagementServerId#553#554#2#1#1#1#0#3#0#9#1
^{ return NumbersUtil.bytesToLong(bytes, 24); }#get agent id#getAgentId#557#558#2#1#1#1#0#3#0#9#1
^{ return NumbersUtil.bytesToLong(bytes, 32); }#get via agent id#getViaAgentId#561#562#2#1#1#1#0#3#0#9#1
^{ return (bytes[3] & FLAG_FROM_SERVER) > 0; }#from server#fromServer#565#566#2#1#0#1#0#2#0#8#1
^{ return (bytes[3] & FLAG_REQUEST) > 0; }#is request#isRequest#569#570#2#1#0#1#0#2#0#8#1
^{ return NumbersUtil.bytesToLong(bytes, 4); }#get sequence#getSequence#573#574#2#1#1#1#0#3#0#9#1
^{ return (bytes[3] & FLAG_CONTROL) > 0; }#is control#isControl#577#578#2#1#0#1#0#2#0#8#1
^{ JsonArray array = new JsonArray(); if (src.first() != null) { array.add(s_gson.toJsonTree(src.first())); } else { array.add(new JsonNull()); } if (src.second() != null) { array.add(s_gson.toJsonTree(src.second())); } else { array.add(new JsonNull()); } return array; }#serialize#serialize#586#601#16#3#13#4#4#14#0#52#3
^{ Pair<Long, Long> pairs = new Pair<Long, Long>(null, null); JsonArray array = json.getAsJsonArray(); if (array.size() != 2) { return pairs; } JsonElement element = array.get(0); if (!element.isJsonNull()) { pairs.first(element.getAsLong()); } element = array.get(1); if (!element.isJsonNull()) { pairs.second(element.getAsLong()); } return pairs; }#deserialize#deserialize#604#621#18#3#11#6#3#18#0#63#4
^{ if (src.size() == 0) { return new JsonNull(); } JsonArray array = new JsonArray(); for (PortConfig pc : src) { array.add(s_gson.toJsonTree(pc)); } return array; }#serialize#serialize#631#641#11#3#5#5#1#8#0#29#3
^{ if (json.isJsonNull()) { return new ArrayList<PortConfig>(); } List<PortConfig> pcs = new ArrayList<PortConfig>(); JsonArray array = json.getAsJsonArray(); Iterator<JsonElement> it = array.iterator(); while (it.hasNext()) { JsonElement element = it.next(); pcs.add(s_gson.fromJson(element, PortConfig.class)); } return pcs; }#deserialize#deserialize#644#656#13#3#9#7#1#13#0#56#3
^{ _ver = ver; _cmds = cmds; _flags = flags; _seq = seq; _via = via; _agentId = agentId; _mgmtId = mgmtId; setInSequence(cmds); }#request#Request#120#128#9#7#1#7#8#9#0#32#1
^{ this(ver, seq, agentId, mgmtId, agentId, flags, cmds); }#request#Request#131#132#2#6#1#6#1#8#0#22#1
^{ this(ver, seq, agentId, mgmtId, via, flags, (Command)null); _content = content; }#request#Request#135#137#3#7#1#7#2#9#0#26#1
^{ this(agentId, mgmtId, new Command {command}, true, fromServer); }#request#Request#140#141#2#4#1#4#1#7#0#16#1
^{ this(Version.v1, -1l, agentId, mgmtId, (short)0, cmds); setStopOnError(stopOnError); setFromServer(fromServer); }#request#Request#144#147#4#5#3#5#3#11#0#24#1
^{ this(agentId, mgmtId, cmds, stopOnError, fromServer); setAgentName(agentName); }#request#Request#150#152#3#6#2#6#2#8#0#22#1
^{ _ver = that._ver; _seq = that._seq; setInSequence(that.executeInSequence()); setStopOnError(that.stopOnError()); _cmds = cmds; _mgmtId = that._mgmtId; _via = that._via; _agentId = that._agentId; _agentName = that._agentName; setFromServer(!that.isFromServer()); }#request#Request#171#181#11#2#6#2#10#13#0#44#1
^{ if (clazz.isArray() || !Command.class.isAssignableFrom(clazz)) { return false; } Log4jLevel log4jLevel = null; LogLevel level = clazz.getAnnotation(LogLevel.class); if (level == null) { log4jLevel = LogLevel.Log4jLevel.Debug; } else { log4jLevel = level.value(); } return !log4jLevel.enabled(_logger); }#should skip class#shouldSkipClass#34#47#14#1#5#3#2#11#0#40#3
^{ LogLevel level = field.getAnnotation(LogLevel.class); return level != null && !level.value().enabled(_logger); }#should skip field#shouldSkipField#50#53#4#1#3#2#0#4#0#19#1
^{ _logger = logger; }#logging exclusion strategy#LoggingExclusionStrategy#56#57#2#1#0#1#1#1#0#5#1
^{ return primaryStoragePoolNameLabel; }#get primary storage pool name label#getPrimaryStoragePoolNameLabel#49#50#2#0#0#0#0#1#0#3#1
^{ return volumeUuid; }#get volume uuid#getVolumeUuid#56#57#2#0#0#0#0#1#0#3#1
^{ return firstBackupUuid; }#get first backup uuid#getFirstBackupUuid#63#64#2#0#0#0#0#1#0#3#1
^{ return previousSnapshotUuid; }#get previous snapshot uuid#getPreviousSnapshotUuid#67#68#2#0#0#0#0#1#0#3#1
^{ return templateUuid; }#get template uuid#getTemplateUuid#74#75#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#78#80#3#0#0#0#0#1#0#3#1
^{ this.primaryStoragePoolNameLabel = primaryStoragePoolNameLabel; this.volumeUuid = volumeUuid; this.firstBackupUuid = firstBackupUuid; this.previousSnapshotUuid = previousSnapshotUuid; this.templateUuid = templateUuid; }#validate snapshot command#ValidateSnapshotCommand#41#46#6#5#0#5#5#5#0#31#1
^{ return _pubKey; }#get pub key#getPubKey#39#40#2#0#0#0#0#1#0#3#1
^{ return _prvKey; }#get prv key#getPrvKey#43#44#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#47#49#3#0#0#0#0#1#0#3#1
^{ _pubKey = pubKey; _prvKey = prvKey; }#modify ssh keys command#ModifySshKeysCommand#34#36#3#2#0#2#2#2#0#9#1
^{ return false; }#execute in sequence#executeInSequence#38#40#3#0#0#0#0#1#0#3#1
^{ return vmName; }#get vm name#getVmName#43#44#2#0#0#0#0#1#0#3#1
^{ return vmData; }#get vm data#getVmData#47#48#2#0#0#0#0#1#0#5#1
^{ return isAttach; }#is attach#isAttach#51#52#2#0#0#0#0#1#0#3#1
^{ return configDriveLabel; }#get config drive label#getConfigDriveLabel#55#56#2#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.vmData = vmData; this.configDriveLabel = label; this.isAttach = attach; }#attach or dettach config drive command#AttachOrDettachConfigDriveCommand#31#35#5#4#0#4#4#4#0#28#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#41#42#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#45#46#2#1#0#1#1#1#0#10#1
^{ super(cmd, result, message); }#delete vm snapshot answer#DeleteVMSnapshotAnswer#32#33#2#3#1#3#1#4#0#11#1
^{ super(cmd, true, ""); this.volumeTOs = volumeTOs; }#delete vm snapshot answer#DeleteVMSnapshotAnswer#36#38#3#2#1#2#2#5#0#13#1
^{ super(Host.Type.ExternalFirewall); }#startup external firewall command#StartupExternalFirewallCommand#26#27#2#0#1#0#1#2#0#6#1
^{ return volumeTos; }#get volume tos#getVolumeTos#39#40#2#0#0#0#0#1#0#5#1
^{ super(cmd, ex); volumeTos = null; }#migrate with storage complete answer#MigrateWithStorageCompleteAnswer#29#31#3#2#1#2#2#4#0#9#1
^{ super(cmd, true, null); this.volumeTos = volumeTos; }#migrate with storage complete answer#MigrateWithStorageCompleteAnswer#34#36#3#2#1#2#2#5#0#13#1
^{ return address; }#get address#getAddress#44#45#2#0#0#0#0#1#0#3#1
^{ return port; }#get port#getPort#48#49#2#0#0#0#0#1#0#3#1
^{ super(cmd, true, null); this.port = port; }#get vnc port answer#GetVncPortAnswer#29#31#3#2#1#2#2#5#0#11#1
^{ super(cmd, true, null); this.address = address; this.port = port; }#get vnc port answer#GetVncPortAnswer#34#37#4#3#1#3#3#6#0#17#1
^{ super(cmd, false, details); }#get vnc port answer#GetVncPortAnswer#40#41#2#2#1#2#1#4#0#8#1
^{ return _proxyVmId; }#get proxy vm id#getProxyVmId#35#36#2#0#0#0#0#1#0#3#1
^{ return _loadInfo; }#get load info#getLoadInfo#39#40#2#0#0#0#0#1#0#3#1
^{ _proxyVmId = proxyVmId; _loadInfo = loadInfo; }#console proxy load report command#ConsoleProxyLoadReportCommand#30#32#3#2#0#2#2#2#0#9#1
^{ inSeq = inseq; }#set seq#setSeq#44#45#2#1#0#1#1#1#0#6#1
^{ return vmName; }#get vm name#getVmName#48#49#2#0#0#0#0#1#0#3#1
^{ return hostGuid; }#get host guid#getHostGuid#52#53#2#0#0#0#0#1#0#3#1
^{ return hostIp; }#get host ip#getHostIp#56#57#2#0#0#0#0#1#0#3#1
^{ return inSeq; }#execute in sequence#executeInSequence#60#62#3#0#0#0#0#1#0#4#1
^{ super(); }#fence command#FenceCommand#27#28#2#0#1#0#1#1#0#2#1
^{ super(); vmName = vm.getInstanceName(); hostGuid = host.getGuid(); hostIp = host.getPrivateIpAddress(); inSeq = false; }#fence command#FenceCommand#36#41#6#2#4#2#5#5#0#19#1
^{ return false; }#execute in sequence#executeInSequence#37#39#3#0#0#0#0#1#0#3#1
^{ return params; }#get params#getParams#42#43#2#0#0#0#0#1#0#6#1
^{ this.params = params; }#set params#setParams#46#47#2#1#0#1#1#1#0#11#1
^{ setWait(wait); this.params = params; }#performance monitor command#PerformanceMonitorCommand#32#34#3#2#1#2#2#3#0#14#1
^{ return vm; }#get virtual machine#getVirtualMachine#64#65#2#0#0#0#0#1#0#3#1
^{ return volumeToFiler; }#get volume to filer#getVolumeToFiler#68#69#2#0#0#0#0#1#0#6#1
^{ return volumeToFilerAsList; }#get volume to filer as list#getVolumeToFilerAsList#72#73#2#0#0#0#0#1#0#8#1
^{ return tgtHost; }#get target host#getTargetHost#76#77#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#80#82#3#0#0#0#0#1#0#3#1
^{ this.vm = vm; this.volumeToFiler = volumeToFiler; this.volumeToFilerAsList = null; this.tgtHost = null; }#migrate with storage command#MigrateWithStorageCommand#36#40#5#2#0#2#4#4#0#22#1
^{ this.vm = vm; this.volumeToFiler = null; this.volumeToFilerAsList = volumeToFilerAsList; this.tgtHost = null; }#migrate with storage command#MigrateWithStorageCommand#43#47#5#2#0#2#4#4#0#24#1
^{ this.vm = vm; this.volumeToFiler = volumeToFiler; this.volumeToFilerAsList = null; this.tgtHost = tgtHost; }#migrate with storage command#MigrateWithStorageCommand#50#54#5#3#0#3#4#4#0#25#1
^{ this.vm = vm; this.volumeToFiler = null; this.volumeToFilerAsList = volumeToFilerAsList; this.tgtHost = tgtHost; }#migrate with storage command#MigrateWithStorageCommand#57#61#5#3#0#3#4#4#0#27#1
^{ return _command; }#get command#getCommand#33#34#2#0#0#0#0#1#0#3#1
^{ super(cmd); _command = cmd; }#ping answer#PingAnswer#28#30#3#1#1#1#2#3#0#7#1
^{ return _success; }#succeeded#succeeded#44#45#2#0#0#0#0#1#0#3#1
^{ _success = value; }#set success#setSuccess#48#49#2#1#0#1#1#1#0#6#1
^{ return _isReauthenticating; }#is reauthenticating#isReauthenticating#52#53#2#0#0#0#0#1#0#3#1
^{ _isReauthenticating = value; }#set reauthenticating#setReauthenticating#56#57#2#1#0#1#1#1#0#6#1
^{ return _host; }#get host#getHost#60#61#2#0#0#0#0#1#0#3#1
^{ _host = host; }#set host#setHost#64#65#2#1#0#1#1#1#0#6#1
^{ return _port; }#get port#getPort#68#69#2#0#0#0#0#1#0#3#1
^{ _port = port; }#set port#setPort#72#73#2#1#0#1#1#1#0#6#1
^{ return _tunnelUrl; }#get tunnel url#getTunnelUrl#76#77#2#0#0#0#0#1#0#3#1
^{ _tunnelUrl = tunnelUrl; }#set tunnel url#setTunnelUrl#80#81#2#1#0#1#1#1#0#6#1
^{ return _tunnelSession; }#get tunnel session#getTunnelSession#84#85#2#0#0#0#0#1#0#3#1
^{ _tunnelSession = tunnelSession; }#set tunnel session#setTunnelSession#88#89#2#1#0#1#1#1#0#6#1
^{ _success = false; _isReauthenticating = false; _port = 0; }#console access authentication answer#ConsoleAccessAuthenticationAnswer#33#36#4#0#0#0#3#3#0#4#1
^{ super(cmd); _success = success; }#console access authentication answer#ConsoleAccessAuthenticationAnswer#39#41#3#2#1#2#2#3#0#9#1
^{ return vm; }#get virtual machine#getVirtualMachine#43#44#2#0#0#0#0#1#0#3#1
^{ return volumeToSr; }#get volume to sr#getVolumeToSr#47#48#2#0#0#0#0#1#0#8#1
^{ return nicToNetwork; }#get nic to network#getNicToNetwork#51#52#2#0#0#0#0#1#0#8#1
^{ return token; }#get token#getToken#55#56#2#0#0#0#0#1#0#6#1
^{ return true; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#3#1
^{ this.vm = vm; this.volumeToSr = volumeToSr; this.nicToNetwork = nicToNetwork; this.token = token; }#migrate with storage send command#MigrateWithStorageSendCommand#36#40#5#4#0#4#4#4#0#38#1
^{ super(); }#fence answer#FenceAnswer#23#24#2#0#1#0#1#1#0#2#1
^{ super(cmd, true, null); }#fence answer#FenceAnswer#27#28#2#1#1#1#1#4#0#5#1
^{ super(cmd, true, details); }#fence answer#FenceAnswer#31#32#2#2#1#2#1#4#0#8#1
^{ super(cmd, result, details); }#fence answer#FenceAnswer#35#36#2#3#1#3#1#4#0#11#1
^{ return states; }#get states#getStates#42#43#2#0#0#0#0#1#0#8#1
^{ super(); }#ping routing with ovs command#PingRoutingWithOvsCommand#31#32#2#0#1#0#1#1#0#2#1
^{ super(type, id, hostVmStateReport); this.states = ovsStates; }#ping routing with ovs command#PingRoutingWithOvsCommand#35#39#5#4#1#4#2#5#0#27#1
^{ _details = details; }#set details#setDetails#42#43#2#1#0#1#1#1#0#6#1
^{ return _details; }#get details#getDetails#46#47#2#0#0#0#0#1#0#3#1
^{ return dcId; }#get data center id#getDataCenterId#50#51#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#54#56#3#0#0#0#0#1#0#3#1
^{ return hostId; }#get host id#getHostId#59#60#2#0#0#0#0#1#0#3#1
^{ super(); }#ready command#ReadyCommand#25#26#2#0#1#0#1#1#0#2#1
^{ super(); this.dcId = dcId; }#ready command#ReadyCommand#32#34#3#1#1#1#2#2#0#8#1
^{ this(dcId); this.hostId = hostId; }#ready command#ReadyCommand#37#39#3#2#1#2#2#3#0#11#1
^{ return newPassword; }#get new password#getNewPassword#47#48#2#0#0#0#0#1#0#3#1
^{ return username; }#get username#getUsername#51#52#2#0#0#0#0#1#0#3#1
^{ return hostIp; }#get host ip#getHostIp#55#56#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#59#61#3#0#0#0#0#1#0#3#1
^{ this(username, newPassword, null); }#update host password command#UpdateHostPasswordCommand#37#38#2#2#1#2#1#4#0#8#1
^{ this.username = username; this.newPassword = newPassword; this.hostIp = hostIp; }#update host password command#UpdateHostPasswordCommand#41#44#4#3#0#3#3#3#0#19#1
^{ return false; // standalone command and can be executed independent of other commands }#execute in sequence#executeInSequence#31#33#3#0#0#0#0#1#1#3#1
^{ return cpuSockets; }#get cpu sockets#getCpuSockets#80#81#2#0#0#0#0#1#0#3#1
^{ return cpus; }#get cpus#getCpus#84#85#2#0#0#0#0#1#0#3#1
^{ return caps; }#get capabilities#getCapabilities#88#89#2#0#0#0#0#1#0#3#1
^{ return speed; }#get speed#getSpeed#92#93#2#0#0#0#0#1#0#3#1
^{ return memory; }#get memory#getMemory#96#97#2#0#0#0#0#1#0#3#1
^{ return dom0MinMemory; }#get dom 0 min memory#getDom0MinMemory#100#101#2#0#0#0#0#1#0#3#1
^{ this.speed = speed; }#set speed#setSpeed#104#105#2#1#0#1#1#1#0#8#1
^{ this.cpuSockets = cpuSockets; }#set cpu sockets#setCpuSockets#108#109#2#1#0#1#1#1#0#8#1
^{ this.cpus = cpus; }#set cpus#setCpus#112#113#2#1#0#1#1#1#0#8#1
^{ this.memory = memory; }#set memory#setMemory#116#117#2#1#0#1#1#1#0#8#1
^{ this.dom0MinMemory = dom0MinMemory; }#set dom 0 min memory#setDom0MinMemory#120#121#2#1#0#1#1#1#0#8#1
^{ this.caps = caps; }#set caps#setCaps#124#125#2#1#0#1#1#1#0#8#1
^{ return pool; }#get pool#getPool#128#129#2#0#0#0#0#1#0#3#1
^{ this.pool = pool; }#set pool#setPool#132#133#2#1#0#1#1#1#0#8#1
^{ return poolSync; }#is pool sync#isPoolSync#136#137#2#0#0#0#0#1#0#3#1
^{ this.poolSync = poolSync; }#set pool sync#setPoolSync#140#141#2#1#0#1#1#1#0#8#1
^{ return hypervisorType; }#get hypervisor type#getHypervisorType#144#145#2#0#0#0#0#1#0#3#1
^{ this.hypervisorType = hypervisorType; }#set hypervisor type#setHypervisorType#148#149#2#1#0#1#1#1#0#8#1
^{ return hostDetails; }#get host details#getHostDetails#152#153#2#0#0#0#0#1#0#6#1
^{ this.hostDetails = hostDetails; }#set host details#setHostDetails#156#157#2#1#0#1#1#1#0#11#1
^{ return hypervisorVersion; }#get hypervisor version#getHypervisorVersion#160#161#2#0#0#0#0#1#0#3#1
^{ this.hypervisorVersion = hypervisorVersion; }#set hypervisor version#setHypervisorVersion#164#165#2#1#0#1#1#1#0#8#1
^{ return hostTags; }#get host tags#getHostTags#168#169#2#0#0#0#0#1#0#5#1
^{ this.hostTags.add(hostTag); }#set host tags#setHostTags#172#173#2#1#1#1#1#2#0#9#1
^{ return groupDetails; }#get gpu group details#getGpuGroupDetails#176#177#2#0#0#0#0#1#0#9#1
^{ this.groupDetails = groupDetails; }#set gpu group details#setGpuGroupDetails#180#181#2#1#0#1#1#1#0#14#1
^{ return supportsClonedVolumes; }#get supports cloned volumes#getSupportsClonedVolumes#184#185#2#0#0#0#0#1#0#3#1
^{ this.supportsClonedVolumes = supportsClonedVolumes; }#set supports cloned volumes#setSupportsClonedVolumes#188#189#2#1#0#1#1#1#0#8#1
^{ super(Host.Type.Routing); hostDetails = new HashMap<String, String>(); getHostDetails().put(RouterPrivateIpStrategy.class.getCanonicalName(), RouterPrivateIpStrategy.DcGlobal.toString()); }#startup routing command#StartupRoutingCommand#48#51#4#0#6#0#3#6#0#22#1
^{ super(Host.Type.Routing); this.cpus = cpus; this.speed = speed; this.memory = memory; this.dom0MinMemory = dom0MinMemory; this.hypervisorType = hypervisorType; this.hostDetails = hostDetails; this.caps = caps; this.poolSync = false; }#startup routing command#StartupRoutingCommand#55#65#11#7#1#7#9#10#0#54#1
^{ this(cpus, speed, memory, dom0MinMemory, caps, hypervisorType); getHostDetails().put(RouterPrivateIpStrategy.class.getCanonicalName(), privIpStrategy.toString()); }#startup routing command#StartupRoutingCommand#68#71#4#7#5#7#2#10#0#32#1
^{ this(cpus2, speed2, memory2, dom0MinMemory2, caps2, hypervisorType2, new HashMap<String, String>()); }#startup routing command#StartupRoutingCommand#75#76#2#6#2#6#1#8#0#24#1
^{ super(cmd, false, detail); }#prepare for migration answer#PrepareForMigrationAnswer#26#27#2#2#1#2#1#4#0#8#1
^{ super(cmd, ex); }#prepare for migration answer#PrepareForMigrationAnswer#30#31#2#2#1#2#1#3#0#8#1
^{ super(cmd, true, null); }#prepare for migration answer#PrepareForMigrationAnswer#34#35#2#1#1#1#1#4#0#5#1
^{ return reason; }#get reason#getReason#47#48#2#0#0#0#0#1#0#3#1
^{ return detail; }#get detail#getDetail#51#52#2#0#0#0#0#1#0#3#1
^{ return true; }#execute in sequence#executeInSequence#55#57#3#0#0#0#0#1#0#3#1
^{ super(); }#shutdown command#ShutdownCommand#34#35#2#0#1#0#1#1#0#2#1
^{ super(); this.reason = reason; this.detail = detail; }#shutdown command#ShutdownCommand#38#41#4#2#1#2#3#3#0#14#1
^{ return vmName; }#get vm name#getVmName#31#32#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#35#37#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#modify vm nic config answer#ModifyVmNicConfigAnswer#27#28#2#1#0#1#1#1#0#7#1
^{ return logSequenceNumber; }#get log sequence number#getLogSequenceNumber#54#55#2#0#0#0#0#1#0#3#1
^{ return vmId; }#get vm id#getVmId#58#59#2#0#0#0#0#1#0#3#1
^{ return reason; }#get reason#getReason#62#63#2#0#0#0#0#1#0#3#1
^{ this.reason = reason; }#set reason#setReason#66#67#2#1#0#1#1#1#0#8#1
^{ super(cmd); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); }#security group rule answer#SecurityGroupRuleAnswer#34#37#4#1#3#1#3#4#0#17#1
^{ super(cmd, result, detail); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); reason = FailureReason.PROGRAMMING_FAILED; }#security group rule answer#SecurityGroupRuleAnswer#40#44#5#3#3#3#4#7#0#27#1
^{ super(cmd, result, detail); this.logSequenceNumber = cmd.getSeqNum(); this.vmId = cmd.getVmId(); reason = r; }#security group rule answer#SecurityGroupRuleAnswer#47#51#5#4#3#4#4#7#0#27#1
^{ return vmName; }#get vm name#getVmName#35#36#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#39#41#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; setWait(20); }#check virtual machine command#CheckVirtualMachineCommand#30#32#3#1#1#1#2#3#0#8#1
^{ return vmName; }#get vm name#getVmName#48#49#2#0#0#0#0#1#0#3#1
^{ return type; }#get type#getType#52#53#2#0#0#0#0#1#0#5#1
^{ return vmSecIp; }#get vm sec ip#getVmSecIp#56#57#2#0#0#0#0#1#0#3#1
^{ return vmMac; }#get vm mac#getVmMac#60#61#2#0#0#0#0#1#0#3#1
^{ return action; }#get action#getAction#64#65#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#68#70#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.type = type; }#network rules vm secondary ip command#NetworkRulesVmSecondaryIpCommand#32#34#3#2#0#2#2#2#0#15#1
^{ this.vmName = vmName; this.vmMac = vmMac; this.vmSecIp = secondaryIp; if (action) { this.action = "-A"; } else { this.action = "-D"; } }#network rules vm secondary ip command#NetworkRulesVmSecondaryIpCommand#37#44#8#4#0#4#5#6#0#28#2
^{ this.add = add; }#set add#setAdd#37#38#2#1#0#1#1#1#0#8#1
^{ return add; }#get add#getAdd#41#42#2#0#0#0#0#1#0#3#1
^{ this.targets = targets; }#set targets#setTargets#45#46#2#1#0#1#1#1#0#13#1
^{ return targets; }#get targets#getTargets#49#50#2#0#0#0#0#1#0#8#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ return hostType; }#get host type#getHostType#36#37#2#0#0#0#0#1#0#5#1
^{ return hostId; }#get host id#getHostId#40#41#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#44#46#3#0#0#0#0#1#0#3#1
^{ if (this == o) return true; if (!(o instanceof PingCommand)) return false; if (!super.equals(o)) return false; PingCommand that = (PingCommand) o; if (hostId != that.hostId) return false; if (hostType != that.hostType) return false; return true; }#equals#equals#49#60#12#1#1#2#0#13#0#25#6
^{ int result = super.hashCode(); result = 31 * result + (hostType != null ? hostType.hashCode() : 0); result = 31 * result + (int) (hostId ^ (hostId >>> 32)); return result; }#hash code#hashCode#63#68#6#0#3#1#2#5#0#20#1
^{ hostType = type; hostId = id; }#ping command#PingCommand#31#33#3#2#0#2#2#2#0#11#1
^{ return vm; }#get virtual machine#getVirtualMachine#33#34#2#0#0#0#0#1#0#3#1
^{ //VR start doesn't go through queue if (vm.getName() != null && vm.getName().startsWith("r-")) { return false; } return executeInSequence; }#execute in sequence#executeInSequence#37#43#7#0#3#0#0#4#1#11#2
^{ return this.hostIp; }#get host ip#getHostIp#56#57#2#0#0#0#0#1#0#5#1
^{ return this.secondaryStorage; }#get secondary storage#getSecondaryStorage#60#61#2#0#0#0#0#1#0#5#1
^{ this.secondaryStorage = secondary; }#set secondary storage#setSecondaryStorage#64#65#2#1#0#1#1#1#0#8#1
^{ this.vm = vm; this.hostIp = host.getPrivateIpAddress(); this.executeInSequence = executeInSequence; this.secondaryStorage = null; }#start command#StartCommand#49#53#5#3#1#3#4#4#0#24#1
^{ return vmNames; }#get vm names#getVmNames#41#42#2#0#0#0#0#1#0#5#1
^{ return this.hostGuid; }#get host guid#getHostGuid#45#46#2#0#0#0#0#1#0#5#1
^{ return this.hostName; }#get host name#getHostName#49#50#2#0#0#0#0#1#0#5#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ this.vmNames = vmNames; this.hostGuid = hostGuid; this.hostName = hostName; }#get vm disk stats command#GetVmDiskStatsCommand#35#38#4#3#0#3#3#3#0#21#1
^{ return privateIP; }#get private ip#getPrivateIP#69#70#2#0#0#0#0#1#0#3#1
^{ return domRName; }#get dom r name#getDomRName#73#74#2#0#0#0#0#1#0#3#1
^{ return option; }#get option#getOption#77#78#2#0#0#0#0#1#0#3#1
^{ return forVpc; }#is for vpc#isForVpc#81#82#2#0#0#0#0#1#0#3#1
^{ return vpcCIDR; }#get vpc cidr#getVpcCIDR#85#86#2#0#0#0#0#1#0#3#1
^{ return gatewayIP; }#get gateway ip#getGatewayIP#89#90#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#93#95#3#0#0#0#0#1#0#3#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = "get"; }#network usage command#NetworkUsageCommand#37#42#6#4#0#4#5#5#0#28#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.option = option; this.forVpc = forVpc; }#network usage command#NetworkUsageCommand#45#49#5#4#0#4#4#4#0#25#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = "create"; this.vpcCIDR = vpcCIDR; }#network usage command#NetworkUsageCommand#52#58#7#5#0#5#6#6#0#34#1
^{ this.privateIP = privateIP; this.domRName = domRName; this.forVpc = forVpc; this.gatewayIP = gatewayIP; this.option = option; }#network usage command#NetworkUsageCommand#61#66#6#5#0#5#5#5#0#31#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#42#43#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#46#47#2#0#0#0#0#1#0#3#1
^{ return proxyManagementIp; }#get proxy management ip#getProxyManagementIp#50#51#2#0#0#0#0#1#0#3#1
^{ return proxyCmdPort; }#get proxy cmd port#getProxyCmdPort#54#55#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#58#60#3#0#0#0#0#1#0#3#1
^{ this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; this.proxyManagementIp = proxyManagementIp; this.proxyCmdPort = proxyCmdPort; }#check console proxy load command#CheckConsoleProxyLoadCommand#35#39#5#4#0#4#4#4#0#25#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#40#41#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#44#45#2#0#0#0#0#1#0#3#1
^{ super(command, success, details); this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; }#console proxy load answer#ConsoleProxyLoadAnswer#33#37#5#5#1#5#3#6#0#23#1
^{ super(); }#proxy command#ProxyCommand#25#26#2#0#1#0#1#1#0#2#1
^{ return proxyVmId; }#get proxy vm id#getProxyVmId#43#44#2#0#0#0#0#1#0#3#1
^{ return proxyVmName; }#get proxy vm name#getProxyVmName#47#48#2#0#0#0#0#1#0#3#1
^{ return proxyManagementIp; }#get proxy management ip#getProxyManagementIp#51#52#2#0#0#0#0#1#0#3#1
^{ return proxyCmdPort; }#get proxy cmd port#getProxyCmdPort#55#56#2#0#0#0#0#1#0#3#1
^{ return interval; }#get interval#getInterval#59#61#3#0#0#0#0#1#0#4#1
^{ return false; }#execute in sequence#executeInSequence#64#66#3#0#0#0#0#1#0#3#1
^{ this.interval = interval; this.proxyVmId = proxyVmId; this.proxyVmName = proxyVmName; this.proxyManagementIp = proxyManagementIp; this.proxyCmdPort = proxyCmdPort; }#watch console proxy load command#WatchConsoleProxyLoadCommand#32#37#6#5#0#5#5#5#0#31#1
^{ return true; }#execute in sequence#executeInSequence#43#45#3#0#0#0#0#1#0#3#1
^{ return keystoreBits; }#get keystore bits#getKeystoreBits#48#49#2#0#0#0#0#1#0#3#1
^{ this.keystoreBits = keystoreBits; }#set keystore bits#setKeystoreBits#52#53#2#1#0#1#1#1#0#9#1
^{ return keystorePassword; }#get keystore password#getKeystorePassword#56#57#2#0#0#0#0#1#0#3#1
^{ this.keystorePassword = keystorePassword; }#set keystore password#setKeystorePassword#60#61#2#1#0#1#1#1#0#8#1
^{ return encryptorPassword; }#get encryptor password#getEncryptorPassword#64#65#2#0#0#0#0#1#0#3#1
^{ this.encryptorPassword = encryptorPassword; }#set encryptor password#setEncryptorPassword#68#69#2#1#0#1#1#1#0#8#1
^{ super(); }#start console proxy agent http handler command#StartConsoleProxyAgentHttpHandlerCommand#34#35#2#0#1#0#1#1#0#2#1
^{ this.keystoreBits = ksBits; this.keystorePassword = ksPassword; }#start console proxy agent http handler command#StartConsoleProxyAgentHttpHandlerCommand#38#40#3#2#0#2#2#2#0#14#1
^{ super(cmd, result, details); }#performance monitor answer#PerformanceMonitorAnswer#26#28#3#3#1#3#1#4#0#11#1
^{ return platform; }#get platform#getPlatform#44#45#2#0#0#0#0#1#0#3#1
^{ super(cmd, details, success); this.platform = platform; }#stop answer#StopAnswer#29#31#3#4#1#4#2#5#0#17#1
^{ super(cmd, details, success); this.platform = null; }#stop answer#StopAnswer#34#36#3#3#1#3#2#5#0#14#1
^{ super(cmd, e); this.platform = null; }#stop answer#StopAnswer#39#41#3#2#1#2#2#4#0#11#1
^{ return parent; }#get parent#getParent#63#64#2#0#0#0#0#1#0#3#1
^{ this.parent = parent; }#set parent#setParent#67#68#2#1#0#1#1#1#0#8#1
^{ this.nfsShare = nfsShare; }#set nfs share#setNfsShare#71#72#2#1#0#1#1#1#0#8#1
^{ return nfsShare; }#get nfs share#getNfsShare#75#76#2#0#0#0#0#1#0#3#1
^{ return totalSize; }#get total size#getTotalSize#79#80#2#0#0#0#0#1#0#3#1
^{ return templateInfo; }#get template info#getTemplateInfo#83#84#2#0#0#0#0#1#0#6#1
^{ this.templateInfo = templateInfo; }#set template info#setTemplateInfo#87#88#2#1#0#1#1#1#0#11#1
^{ return poolInfo; }#get pool info#getPoolInfo#91#92#2#0#0#0#0#1#0#3#1
^{ this.poolInfo = poolInfo; }#set pool info#setPoolInfo#95#96#2#1#0#1#1#1#0#8#1
^{ return resourceType; }#get resource type#getResourceType#99#100#2#0#0#0#0#1#0#5#1
^{ this.resourceType = resourceType; }#set resource type#setResourceType#103#104#2#1#0#1#1#1#0#10#1
^{ return hostDetails; }#get host details#getHostDetails#108#109#2#0#0#0#0#1#0#6#1
^{ super(Host.Type.Storage); }#startup storage command#StartupStorageCommand#41#42#2#0#1#0#1#2#0#6#1
^{ super(Host.Type.Storage); this.parent = parent; this.totalSize = totalSize; this.templateInfo = info; this.poolInfo = null; this.fsType = fsType; }#startup storage command#StartupStorageCommand#45#51#7#4#1#4#6#7#0#36#1
^{ super(Host.Type.Storage); this.parent = parent; this.templateInfo = templateInfo; this.totalSize = poolInfo.capacityBytes; this.poolInfo = poolInfo; this.fsType = fsType; }#startup storage command#StartupStorageCommand#54#60#7#4#1#4#6#7#0#39#1
^{ return volumeToSet; }#get volume to set#getVolumeToSet#40#41#2#0#0#0#0#1#0#5#1
^{ super(cmd, ex); volumeToSet = null; }#migrate with storage send answer#MigrateWithStorageSendAnswer#30#32#3#2#1#2#2#4#0#9#1
^{ super(cmd, true, null); this.volumeToSet = volumeToSet; }#migrate with storage send answer#MigrateWithStorageSendAnswer#35#37#3#2#1#2#2#5#0#13#1
^{ return true; }#execute in sequence#executeInSequence#31#33#3#0#0#0#0#1#0#3#1
^{ return allowedInternalSites; }#get allowed internal sites#getAllowedInternalSites#36#37#2#0#0#0#0#1#0#3#1
^{ this.allowedInternalSites = allowedInternalSites; }#set allowed internal sites#setAllowedInternalSites#40#41#2#1#0#1#1#1#0#9#1
^{ return copyUserName; }#get copy user name#getCopyUserName#44#45#2#0#0#0#0#1#0#3#1
^{ this.copyUserName = copyUserName; }#set copy user name#setCopyUserName#48#49#2#1#0#1#1#1#0#8#1
^{ return copyPassword; }#get copy password#getCopyPassword#52#53#2#0#0#0#0#1#0#3#1
^{ this.copyPassword = copyPassword; }#set copy password#setCopyPassword#56#57#2#1#0#1#1#1#0#8#1
^{ super(); }#sec storage vm setup command#SecStorageVMSetupCommand#27#28#2#0#1#0#1#1#0#2#1
^{ return _host; }#get host#getHost#44#45#2#0#0#0#0#1#0#3#1
^{ return _port; }#get port#getPort#48#49#2#0#0#0#0#1#0#3#1
^{ return _vmId; }#get vm id#getVmId#52#53#2#0#0#0#0#1#0#3#1
^{ return _sid; }#get sid#getSid#56#57#2#0#0#0#0#1#0#3#1
^{ return _ticket; }#get ticket#getTicket#60#61#2#0#0#0#0#1#0#3#1
^{ return _isReauthenticating; }#is reauthenticating#isReauthenticating#64#65#2#0#0#0#0#1#0#3#1
^{ _isReauthenticating = value; }#set reauthenticating#setReauthenticating#68#69#2#1#0#1#1#1#0#6#1
^{ _isReauthenticating = false; }#console access authentication command#ConsoleAccessAuthenticationCommand#32#33#2#0#0#0#1#1#0#2#1
^{ _host = host; _port = port; _vmId = vmId; _sid = sid; _ticket = ticket; }#console access authentication command#ConsoleAccessAuthenticationCommand#36#41#6#5#0#5#5#5#0#21#1
^{ return vmName; }#get vm name#getVmName#37#38#2#0#0#0#0#1#0#3#1
^{ this.nics = nics; }#set nics#setNics#41#42#2#1#0#1#1#1#0#10#1
^{ return false; }#execute in sequence#executeInSequence#45#47#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; }#get vm config command#GetVmConfigCommand#33#34#2#1#0#1#1#1#0#7#1
^{ return host; }#get host#getHost#36#37#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#40#42#3#0#0#0#0#1#0#3#1
^{ this.host = new HostTO(host); setWait(20); }#check on host command#CheckOnHostCommand#31#33#3#1#2#1#2#4#0#9#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#31#32#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#35#36#2#1#0#1#1#1#0#10#1
^{ return vmSnapshotTo; }#get vm snapshot to#getVmSnapshotTo#39#40#2#0#0#0#0#1#0#3#1
^{ this.vmSnapshotTo = vmSnapshotTo; }#set vm snapshot to#setVmSnapshotTo#43#44#2#1#0#1#1#1#0#8#1
^{ super(cmd, success, result); }#create vm snapshot answer#CreateVMSnapshotAnswer#51#52#2#3#1#3#1#4#0#11#1
^{ super(cmd, true, ""); this.vmSnapshotTo = vmSnapshotTo; this.volumeTOs = volumeTOs; }#create vm snapshot answer#CreateVMSnapshotAnswer#55#58#4#3#1#3#3#6#0#19#1
^{ return true; }#execute in sequence#executeInSequence#29#31#3#0#0#0#0#1#0#3#1
^{ return vpnIps; }#get vpn ips#getVpnIps#39#40#2#0#0#0#0#1#0#5#1
^{ return true; }#is query#isQuery#43#45#3#0#0#0#0#1#0#3#1
^{ super(); this.vpnIps = vpnIps; }#check s 2 s vpn connections command#CheckS2SVpnConnectionsCommand#34#36#3#1#1#1#2#2#0#10#1
^{ return _reconnect; }#need reconnect#needReconnect#38#39#2#0#0#0#0#1#0#3#1
^{ super(cmd, result, details); _reconnect = reconnect; }#check network answer#CheckNetworkAnswer#29#31#3#4#1#4#2#5#0#15#1
^{ this(cmd, result, details, false); }#check network answer#CheckNetworkAnswer#34#35#2#3#1#3#1#5#0#11#1
^{ return privateIp; }#get private ip address#getPrivateIpAddress#34#35#2#0#0#0#0#1#0#3#1
^{ super(vmName, true); this.privateIp = privateIp; }#reboot router command#RebootRouterCommand#29#31#3#2#1#2#2#4#0#11#1
^{ return add; }#is add#isAdd#44#45#2#0#0#0#0#1#0#3#1
^{ return sourceIp; }#get source ip#getSourceIp#48#49#2#0#0#0#0#1#0#3#1
^{ return port; }#get port#getPort#52#53#2#0#0#0#0#1#0#3#1
^{ return intf; }#get intf#getIntf#56#57#2#0#0#0#0#1#0#3#1
^{ PortConfig pc = new PortConfig(sourceIp, port, add, intf); this.portConfigs.add(pc); }#add port config#addPortConfig#72#74#3#4#2#5#1#7#0#22#1
^{ return isAppendAIp; }#get is append a ip#getIsAppendAIp#78#79#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#82#84#3#0#0#0#0#1#0#3#1
^{ return portConfigs; }#get port configs#getPortConfigs#87#88#2#0#0#0#0#1#0#5#1
^{ this.add = add; this.sourceIp = sourceIp; this.port = port; this.intf = intf; }#port config#PortConfig#33#37#5#4#0#4#4#4#0#25#1
^{ this.isAppendAIp = isAppend; }#sec storage firewall cfg command#SecStorageFirewallCfgCommand#68#69#2#1#0#1#1#1#0#7#1
^{ return diskProfile; }#get dskch#getDskch#35#36#2#0#0#0#0#1#0#3#1
^{ return path; }#get path#getPath#39#40#2#0#0#0#0#1#0#3#1
^{ return volumeId; }#get volume id#getVolumeId#43#44#2#0#0#0#0#1#0#3#1
^{ return false; }#execute in sequence#executeInSequence#69#71#3#0#0#0#0#1#0#3#1
^{ return name; }#get name#getName#74#75#2#0#0#0#0#1#0#3#1
^{ return fullClone; }#get full clone#getFullClone#78#79#2#0#0#0#0#1#0#3#1
^{ return storagePoolUuid; }#get storage pool uuid#getStoragePoolUuid#82#83#2#0#0#0#0#1#0#3#1
^{ return pool; }#get pool#getPool#86#87#2#0#0#0#0#1#0#3#1
^{ this.path = path; this.name = name; this.fullClone = fullClone; this.storagePoolUuid = storagePoolUuid; }#create volume from vm snapshot command#CreateVolumeFromVMSnapshotCommand#51#55#5#4#0#4#4#4#0#25#1
^{ this.path = path; this.name = name; this.fullClone = fullClone; this.storagePoolUuid = storagePoolUuid; this.pool = pool; this.diskProfile = diskProfile; this.volumeId = volumeId; }#create volume from vm snapshot command#CreateVolumeFromVMSnapshotCommand#58#66#9#7#0#7#7#7#0#43#1
^{ return false; }#execute in sequence#executeInSequence#53#55#3#0#0#0#0#1#0#3#1
^{ return _primaryPool; }#get pool#getPool#58#60#3#0#0#0#0#1#0#4#1
^{ return _secondaryStorageUrl; }#get secondary storage url#getSecondaryStorageUrl#63#65#3#0#0#0#0#1#0#4#1
^{ return _userSpecifiedName; }#get template name#getTemplateName#68#69#2#0#0#0#0#1#0#3#1
^{ return _uniqueName; }#get unique name#getUniqueName#72#73#2#0#0#0#0#1#0#3#1
^{ return _templateId; }#get template id#getTemplateId#76#77#2#0#0#0#0#1#0#3#1
^{ return _vmName; }#get vm name#getVmName#80#81#2#0#0#0#0#1#0#3#1
^{ this._volumePath = volumePath; }#set volume path#setVolumePath#84#86#3#1#0#1#1#1#0#9#1
^{ return _volumePath; }#get volume path#getVolumePath#89#91#3#0#0#0#0#1#0#4#1
^{ return _accountId; }#get account id#getAccountId#94#96#3#0#0#0#0#1#0#4#1
^{ _templateId = templateId; }#set template id#setTemplateId#99#100#2#1#0#1#1#1#0#6#1
^{ _secondaryStorageUrl = secondaryStorageUrl; _templateId = templateId; _accountId = accountId; _userSpecifiedName = userSpecifiedName; _uniqueName = uniqueName; _volumePath = volumePath; _vmName = vmName; primaryStoragePoolNameLabel = pool.getUuid(); _primaryPool = new StorageFilerTO(pool); setWait(wait); }#create private template from volume command#CreatePrivateTemplateFromVolumeCommand#39#50#12#9#3#9#10#12#0#42#1
^{ return _dir; }#get dir#get_dir#33#34#2#0#0#0#0#1#0#3#1
^{ super(null, true, "success"); this._dir = dir; }#sec storage setup answer#SecStorageSetupAnswer#28#30#3#1#1#1#2#5#0#8#1
^{ return true; }#execute in sequence#executeInSequence#41#43#3#0#0#0#0#1#0#3#1
^{ return store; }#get data store#getDataStore#46#47#2#0#0#0#0#1#0#3#1
^{ return directory; }#get directory#getDirectory#50#51#2#0#0#0#0#1#0#3#1
^{ this.store = store; this.directory = dir; }#delete snapshots dir command#DeleteSnapshotsDirCommand#36#38#3#2#0#2#2#2#0#13#1
^{ return vmState; }#get vm state#getVmState#47#48#2#0#0#0#0#1#0#5#1
^{ return volumeTOs; }#get volume t os#getVolumeTOs#51#52#2#0#0#0#0#1#0#5#1
^{ this.volumeTOs = volumeTOs; }#set volume t os#setVolumeTOs#55#56#2#1#0#1#1#1#0#10#1
^{ this.vmState = vmState; }#set vm state#setVmState#59#60#2#1#0#1#1#1#0#10#1
^{ super(cmd, result, message); }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#33#34#2#3#1#3#1#4#0#11#1
^{ super(); }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#37#38#2#0#1#0#1#1#0#2#1
^{ super(cmd, true, ""); this.volumeTOs = volumeTOs; this.vmState = vmState; }#revert to vm snapshot answer#RevertToVMSnapshotAnswer#41#44#4#3#1#3#3#6#0#21#1
^{ return vmName; }#get vm name#getVmName#38#39#2#0#0#0#0#1#0#3#1
^{ return type; }#get type#getType#42#43#2#0#0#0#0#1#0#5#1
^{ return false; }#execute in sequence#executeInSequence#46#48#3#0#0#0#0#1#0#3#1
^{ this.vmName = vmName; this.type = type; }#network rules system vm command#NetworkRulesSystemVmCommand#33#35#3#2#0#2#2#2#0#15#1
^{ return isWindows; }#is windows#isWindows#43#44#2#0#0#0#0#1#0#3#1
^{ return vmTO; }#get virtual machine#getVirtualMachine#47#48#2#0#0#0#0#1#0#3#1
^{ return destIp; }#get destination ip#getDestinationIp#51#52#2#0#0#0#0#1#0#3#1
^{ return vmName; }#get vm name#getVmName#55#56#2#0#0#0#0#1#0#3#1
^{ this.hostGuid = guid; }#set host guid#setHostGuid#59#60#2#1#0#1#1#1#0#8#1
^{ return this.hostGuid; }#get host guid#getHostGuid#63#64#2#0#0#0#0#1#0#5#1
^{ return executeInSequence; }#execute in sequence#executeInSequence#67#69#3#0#0#0#0#1#0#4#1
^{ this.vmName = vmName; this.destIp = destIp; this.isWindows = isWindows; this.vmTO = vmTO; this.executeInSequence = executeInSequence; }#migrate command#MigrateCommand#35#40#6#5#0#5#5#5#0#31#1
^{ super(command); }#recurring network usage answer#RecurringNetworkUsageAnswer#27#28#2#1#1#1#1#2#0#5#1
^{ super(command, e); }#recurring network usage answer#RecurringNetworkUsageAnswer#31#32#2#2#1#2#1#3#0#8#1
^{ this.vmName = vmName; }#set vm name#setVmName#45#46#2#1#0#1#1#1#0#8#1
